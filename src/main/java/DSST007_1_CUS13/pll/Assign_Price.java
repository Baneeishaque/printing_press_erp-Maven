package DSST007_1_CUS13.pll;

import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import javax.swing.InputMap;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author praveen
 */
public class Assign_Price extends javax.swing.JInternalFrame {

    private static Assign_Price form_instance;
    String tableid;
    int save_status = 0;
    dishname_1_jcb_AL dishname_1_jcb_AL_obj = new dishname_1_jcb_AL();
    price_table_jt_LSL price_table_jt_LSL_obj = new price_table_jt_LSL();
    
    public Assign_Price() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        price_table_jt = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        dishname_1_jcb = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        portionname_1_jcb = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        price_1_jtf = new javax.swing.JTextField();
        save_jb = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        dishname_2_jcb = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        portionname_2_jcb = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        price_2_jtf = new javax.swing.JTextField();
        editfields_jb = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        dishcode_jtf = new javax.swing.JTextField();
        delete_jb = new javax.swing.JButton();
        new_jb = new javax.swing.JButton();
        update_jb = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255)));
        setClosable(true);
        setIconifiable(true);
        setTitle("Set Up - > Pricing");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/DSST007_1_CUS13/InstabizTrader Logo Final 35x35.png"))); // NOI18N
        addInternalFrameListener(new javax.swing.event.InternalFrameListener()
        {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt)
            {
                formInternalFrameOpened(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt)
            {
                formInternalFrameClosing(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt)
            {
                formInternalFrameClosed(evt);
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt)
            {
            }
        });

        jPanel1.setBackground(new java.awt.Color(242, 242, 255));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setPreferredSize(new java.awt.Dimension(573, 430));

        price_table_jt.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "SNo", "Dish Name", "PortionName", "Price", "id"
            }
        )
        {
            boolean[] canEdit = new boolean []
            {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        price_table_jt.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        price_table_jt.setFillsViewportHeight(true);
        price_table_jt.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        price_table_jt.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusGained(java.awt.event.FocusEvent evt)
            {
                price_table_jtFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                price_table_jtFocusLost(evt);
            }
        });
        jScrollPane2.setViewportView(price_table_jt);
        if (price_table_jt.getColumnModel().getColumnCount() > 0)
        {
            price_table_jt.getColumnModel().getColumn(0).setMinWidth(50);
            price_table_jt.getColumnModel().getColumn(0).setPreferredWidth(50);
            price_table_jt.getColumnModel().getColumn(1).setMinWidth(250);
            price_table_jt.getColumnModel().getColumn(1).setPreferredWidth(250);
            price_table_jt.getColumnModel().getColumn(2).setMinWidth(150);
            price_table_jt.getColumnModel().getColumn(2).setPreferredWidth(150);
            price_table_jt.getColumnModel().getColumn(3).setMinWidth(100);
            price_table_jt.getColumnModel().getColumn(3).setPreferredWidth(100);
            price_table_jt.getColumnModel().getColumn(4).setMinWidth(0);
            price_table_jt.getColumnModel().getColumn(4).setPreferredWidth(0);
            price_table_jt.getColumnModel().getColumn(4).setMaxWidth(0);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 20;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel1.add(jScrollPane2, gridBagConstraints);

        jButton1.setBackground(new java.awt.Color(185, 197, 31));
        jButton1.setText("<< Refresh");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                jButton1MouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel1.add(jButton1, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel4.setText("Select Dish Name :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel1.add(jLabel4, gridBagConstraints);

        dishname_1_jcb.setEditable(true);
        dishname_1_jcb.setPreferredSize(new java.awt.Dimension(250, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        jPanel1.add(dishname_1_jcb, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel5.setText("Portion Name :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel1.add(jLabel5, gridBagConstraints);

        jLabel6.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel6.setText("Add New Portion");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 5, 0);
        jPanel1.add(jLabel6, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 2, 0, 2);
        jPanel1.add(jSeparator1, gridBagConstraints);

        portionname_1_jcb.setEditable(true);
        portionname_1_jcb.setPreferredSize(new java.awt.Dimension(200, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel1.add(portionname_1_jcb, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel7.setText("Price :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel1.add(jLabel7, gridBagConstraints);

        price_1_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        price_1_jtf.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyTyped(java.awt.event.KeyEvent evt)
            {
                price_1_jtfKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel1.add(price_1_jtf, gridBagConstraints);

        save_jb.setBackground(new java.awt.Color(185, 197, 31));
        save_jb.setText("Save");
        save_jb.setPreferredSize(new java.awt.Dimension(65, 27));
        save_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                save_jbMouseClicked(evt);
            }
        });
        save_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                save_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(save_jb, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 2, 0, 2);
        jPanel1.add(jSeparator2, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel1.setText("Dish Name :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel1.add(jLabel1, gridBagConstraints);

        dishname_2_jcb.setEditable(true);
        dishname_2_jcb.setPreferredSize(new java.awt.Dimension(250, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 2);
        jPanel1.add(dishname_2_jcb, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel2.setText("Portion Name :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel1.add(jLabel2, gridBagConstraints);

        portionname_2_jcb.setEditable(true);
        portionname_2_jcb.setPreferredSize(new java.awt.Dimension(200, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel1.add(portionname_2_jcb, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel3.setText("Edit Portions");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 5, 0);
        jPanel1.add(jLabel3, gridBagConstraints);

        jLabel8.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel8.setText("Price :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel1.add(jLabel8, gridBagConstraints);

        price_2_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        price_2_jtf.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyTyped(java.awt.event.KeyEvent evt)
            {
                price_2_jtfKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 18;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel1.add(price_2_jtf, gridBagConstraints);

        editfields_jb.setBackground(new java.awt.Color(185, 197, 31));
        editfields_jb.setText("Edit");
        editfields_jb.setPreferredSize(new java.awt.Dimension(80, 27));
        editfields_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                editfields_jbMouseClicked(evt);
            }
        });
        editfields_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                editfields_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 18;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(editfields_jb, gridBagConstraints);

        jPanel2.setBackground(new java.awt.Color(242, 242, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jButton4.setBackground(new java.awt.Color(86, 132, 191));
        jButton4.setMnemonic('s');
        jButton4.setText("Close");
        jButton4.setPreferredSize(new java.awt.Dimension(100, 27));
        jButton4.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                jButton4MouseClicked(evt);
            }
        });
        jButton4.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton4ActionPerformed(evt);
            }
        });
        jButton4.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                jButton4KeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 15, 0);
        jPanel2.add(jButton4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(jPanel2, gridBagConstraints);

        jLabel9.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel9.setText("Dish Code :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel1.add(jLabel9, gridBagConstraints);

        dishcode_jtf.setEditable(false);
        dishcode_jtf.setBackground(new java.awt.Color(242, 242, 255));
        dishcode_jtf.setPreferredSize(new java.awt.Dimension(200, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel1.add(dishcode_jtf, gridBagConstraints);

        delete_jb.setBackground(new java.awt.Color(185, 197, 31));
        delete_jb.setText("Delete");
        delete_jb.setPreferredSize(new java.awt.Dimension(80, 27));
        delete_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                delete_jbMouseClicked(evt);
            }
        });
        delete_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                delete_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 19;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(delete_jb, gridBagConstraints);

        new_jb.setBackground(new java.awt.Color(185, 197, 31));
        new_jb.setText("New");
        new_jb.setPreferredSize(new java.awt.Dimension(65, 27));
        new_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                new_jbMouseClicked(evt);
            }
        });
        new_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                new_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(new_jb, gridBagConstraints);

        update_jb.setBackground(new java.awt.Color(185, 197, 31));
        update_jb.setText("Update");
        update_jb.setPreferredSize(new java.awt.Dimension(80, 27));
        update_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                update_jbMouseClicked(evt);
            }
        });
        update_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                update_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 19;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        jPanel1.add(update_jb, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:

        Dimension desktopSize = NewMDIApplication.desktopbg_jlbl.getSize();
        Dimension jInternalFrameSize = this.getSize();
        this.setLocation((desktopSize.width - jInternalFrameSize.width)/2,(desktopSize.height- jInternalFrameSize.height)/2);

        get_price_details();
        
        load_dishname_1_jcb();
        AutoCompleteDecorator.decorate(dishname_1_jcb);
        
        load_portionname_1_jcb();
        AutoCompleteDecorator.decorate(portionname_1_jcb);
        
        AutoCompleteDecorator.decorate(dishname_2_jcb);
        AutoCompleteDecorator.decorate(portionname_2_jcb);
        
        disable_editable_fields();
        
        dishname_1_jcb.addActionListener(dishname_1_jcb_AL_obj);
        
    }//GEN-LAST:event_formInternalFrameOpened

    void enable_editable_fields()
    {
        
        if(price_table_jt.getSelectedRowCount() == 0)
        {
        
            JOptionPane.showMessageDialog(this, "Select An Item In The Table .","Error",JOptionPane.ERROR_MESSAGE);
            
        }
        else
        {
            portionname_2_jcb.setEnabled(true);
            price_2_jtf.setEnabled(true);
            update_jb.setEnabled(true);
            delete_jb.setEnabled(true);
        }
        
        
    }
    
    void disable_editable_fields()
    {
        
        dishname_2_jcb.setEnabled(false);
        portionname_2_jcb.setEnabled(false);
        price_2_jtf.setEnabled(false);
        update_jb.setEnabled(false);
        delete_jb.setEnabled(false);
        
    }
    
    void load_dishname_1_jcb()
    {
        
        Connection con = DatabaseConnection.createConnection();
        PreparedStatement prepstate = null;
        ResultSet rs = null;
        
        try
        {
            
            String sql = "SELECT DISTINCT item_name,item_code FROM dishes";
            prepstate = con.prepareStatement(sql);
            rs = prepstate.executeQuery();
            
            while(rs.next())
            {
                
                String dishname = rs.getString("item_name");
                String dishcode = rs.getString("item_code");
               
                dishname_1_jcb.addItem(dishname+" | "+dishcode);
                dishname_2_jcb.addItem(dishname);
                
            }
            
            dishname_1_jcb.setSelectedItem("");
            dishname_2_jcb.setSelectedItem("");
            
        }
        catch(Exception e)
        {
            
            JOptionPane.showMessageDialog(this, "load_dishname_1_jcb() :"+e);
            
        }
        
        finally
        {
            
            try
            {
               
                
                if(con != null)
                {
                    
                    con.close();
                    
                }
                if(prepstate != null)
                {
                    
                    prepstate.close();
                    
                }
                if(rs != null)
                {
                    
                    rs.close();
                    
                }
                
            }
            catch(Exception e)
            {
                
                JOptionPane.showMessageDialog(this, e);
                
            }
            
        }
        
    }
    
    void load_portionname_1_jcb()
    {
        
        Connection con = DatabaseConnection.createConnection();
        PreparedStatement prepstate = null;
        ResultSet rs = null;
        
        try
        {
            
            String sql = "SELECT DISTINCT portion_name FROM price";
            prepstate = con.prepareStatement(sql);
            rs = prepstate.executeQuery();
            
            while(rs.next())
            {
                
                String portionname = rs.getString("portion_name");
                
                portionname_1_jcb.addItem(portionname);
                portionname_2_jcb.addItem(portionname);
                
            }
            
            portionname_1_jcb.setSelectedItem("");
            portionname_2_jcb.setSelectedItem("");
            
        }
        catch(Exception e)
        {
            
            JOptionPane.showMessageDialog(this, "load_dishname_1_jcb() :"+e);
            
        }
        
        finally
        {
            
            try
            {
               
                
                if(con != null)
                {
                    
                    con.close();
                    
                }
                if(prepstate != null)
                {
                    
                    prepstate.close();
                    
                }
                if(rs != null)
                {
                    
                    rs.close();
                    
                }
                
            }
            catch(Exception e)
            {
                
                JOptionPane.showMessageDialog(this, e);
                
            }
            
        }
        
    }
    
    public static Assign_Price getInstance()
    {
        
        if (form_instance == null)
            form_instance = new Assign_Price();

        return form_instance;
        
    }
    
    
    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        // TODO add your handling code here:
       
       form_instance = null;
        
    }//GEN-LAST:event_formInternalFrameClosed

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        // TODO add your handling code here:
        
        form_instance = null;
        
    }//GEN-LAST:event_formInternalFrameClosing

    private void save_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_save_jbMouseClicked
        // TODO add your handling code here:
        
        if(validation_before_save() == true)
        {
            
            save_data();
            
        }
        
    }//GEN-LAST:event_save_jbMouseClicked

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        
        get_price_details();
        
    }//GEN-LAST:event_jButton1MouseClicked

    private void new_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_new_jbMouseClicked
        // TODO add your handling code here:
      
        dishname_1_jcb.removeActionListener(dishname_1_jcb_AL_obj);
        dishname_1_jcb.setSelectedItem("");
         dishname_1_jcb.addActionListener(dishname_1_jcb_AL_obj);
        dishcode_jtf.setText("");
        portionname_1_jcb.setSelectedItem("");
        price_1_jtf.setText("");
        
        dishname_1_jcb.requestFocusInWindow();
        save_jb.setEnabled(true);

    }//GEN-LAST:event_new_jbMouseClicked

    private void save_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_save_jbKeyPressed
        // TODO add your handling code here:
        
        if(save_jb.isEnabled() == true)
        {
            
            if(evt.getKeyCode() == KeyEvent.VK_ENTER)
            {
                
                if(validation_before_save() == true)
                {
            
                    save_data();
            
                }
                
            }
            
        }
        
    }//GEN-LAST:event_save_jbKeyPressed

    private void new_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_new_jbKeyPressed
        // TODO add your handling code here:
        
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            
            dishname_1_jcb.removeActionListener(dishname_1_jcb_AL_obj);
            dishname_1_jcb.setSelectedItem("");
             dishname_1_jcb.addActionListener(dishname_1_jcb_AL_obj);
            dishcode_jtf.setText("");
            portionname_1_jcb.setSelectedItem("");
            price_1_jtf.setText("");

            dishname_1_jcb.requestFocusInWindow();
            save_jb.setEnabled(true);
            
        }
        
    }//GEN-LAST:event_new_jbKeyPressed

    private void price_table_jtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_price_table_jtFocusGained
        // TODO add your handling code here:
        
        price_table_jt.getSelectionModel().addListSelectionListener(price_table_jt_LSL_obj);
        
    }//GEN-LAST:event_price_table_jtFocusGained

    private void price_table_jtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_price_table_jtFocusLost
        // TODO add your handling code here:
        
        price_table_jt.getSelectionModel().removeListSelectionListener(price_table_jt_LSL_obj);
        
    }//GEN-LAST:event_price_table_jtFocusLost

    private void editfields_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editfields_jbMouseClicked
        // TODO add your handling code here:
        
        enable_editable_fields();
        
    }//GEN-LAST:event_editfields_jbMouseClicked

    private void editfields_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_editfields_jbKeyPressed
        // TODO add your handling code here:
        
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            
            enable_editable_fields();
            
        }
        
    }//GEN-LAST:event_editfields_jbKeyPressed

    private void update_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_update_jbKeyPressed
        // TODO add your handling code here:
        
        if(update_jb.isEnabled() == true)
        {
            if(evt.getKeyCode() == KeyEvent.VK_ENTER)
            {
                if(validation_before_udpate() == true)
                {

                    update_data();

                }
            }
        }
        
    }//GEN-LAST:event_update_jbKeyPressed

    private void update_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_update_jbMouseClicked
        // TODO add your handling code here:
        
        if(update_jb.isEnabled() == true)
        {
            if(validation_before_udpate() == true)
            {

                update_data();

            }
        }
        
    }//GEN-LAST:event_update_jbMouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        
        this.dispose();
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
        // TODO add your handling code here:
        
        this.dispose();
        
    }//GEN-LAST:event_jButton4MouseClicked

    private void jButton4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton4KeyPressed
        // TODO add your handling code here:
        
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            
            this.dispose();
            
        }
        
    }//GEN-LAST:event_jButton4KeyPressed

    private void delete_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_delete_jbMouseClicked
        // TODO add your handling code here:
        
        if(delete_jb.isEnabled() == true)
        {
            
            if(price_table_jt.getSelectedRowCount() == 0)
            {
                
                JOptionPane.showMessageDialog(this, "Select A Row From The Table.","Error",JOptionPane.ERROR_MESSAGE);
                
            }
            else
            {
                
                delete_data();
                
            }
            
        }
        
    }//GEN-LAST:event_delete_jbMouseClicked

    private void delete_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_delete_jbKeyPressed
        // TODO add your handling code here:
        
        if(delete_jb.isEnabled() == true)
        {
            
            if(evt.getKeyCode() == KeyEvent.VK_ENTER)
            {
                if(price_table_jt.getSelectedRowCount() == 0)
                {

                    JOptionPane.showMessageDialog(this, "Select A Row From The Table.","Error",JOptionPane.ERROR_MESSAGE);

                }
                else
                {

                    delete_data();

                }
            }
            
        }
        
    }//GEN-LAST:event_delete_jbKeyPressed

    private void price_1_jtfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_price_1_jtfKeyTyped
        // TODO add your handling code here:
        
        String price = price_1_jtf.getText();
        int lastindex = price.lastIndexOf(".");
        
       //System.out.println(lastindex);
       
        char c = evt.getKeyChar();

        if(!(Character.isDigit(c)||(c==KeyEvent.VK_BACK_SPACE)||c==KeyEvent.VK_DELETE||evt.getKeyChar() == '.'))
        {
            //  evt.getKeyChar() == '.' does accept point when jtextfield accepts decimal number
            evt.consume();
            getToolkit().beep();
        
        }
        else if(lastindex >= 0 && !Character.isDigit(c))
        {
            
             evt.consume();
            
        }
        
    }//GEN-LAST:event_price_1_jtfKeyTyped

    private void price_2_jtfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_price_2_jtfKeyTyped
        // TODO add your handling code here:
        
        String price = price_2_jtf.getText();
        int lastindex = price.lastIndexOf(".");
        
       //System.out.println(lastindex);
       
        char c = evt.getKeyChar();

        if(!(Character.isDigit(c)||(c==KeyEvent.VK_BACK_SPACE)||c==KeyEvent.VK_DELETE||evt.getKeyChar() == '.'))
        {
            //  evt.getKeyChar() == '.' does accept point when jtextfield accepts decimal number
            evt.consume();
            getToolkit().beep();
        
        }
        else if(lastindex >= 0 && !Character.isDigit(c))
        {
            
             evt.consume();
            
        }
        
    }//GEN-LAST:event_price_2_jtfKeyTyped

    void delete_data()
    {
        
        boolean error = false;
        boolean proc_complete = true;
        
        Connection con = DatabaseConnection.createConnection();
        PreparedStatement prepstat = null;
        
        try
        {
            
            int selrow = price_table_jt.getSelectedRow();
            String id = price_table_jt.getValueAt(selrow, 4).toString();
          
            String sql = "DELETE FROM price WHERE id=?";
            prepstat = con.prepareStatement(sql);
            prepstat.setString(1, id);
            
            prepstat.execute();
       
            
            proc_complete = true;
            
        }
        catch(Exception e)
        {
            
            JOptionPane.showMessageDialog(null,"delete_data() :"+e);
            error = true;
            
        }
        
        finally
        {
            
            try
            {
               
                
                if(con != null)
                {
                    
                    con.close();
                    
                }
                if(prepstat != null)
                {
                    
                    prepstat.close();
                    
                }
                
            }
            catch(Exception e)
            {
                
                JOptionPane.showMessageDialog(this, e);
                
            }
            
        }
        
        if(error == false && proc_complete == true)
        {
            
            JOptionPane.showMessageDialog(this,"Operation Successful.","Success",JOptionPane.INFORMATION_MESSAGE);
            disable_editable_fields();
            get_price_details();
            load_dishname_1_jcb();
            load_portionname_1_jcb();
            price_2_jtf.setText("");
            
        }
        
        
    }
    
    
    void update_data()
    {
        
        boolean error = false;
        boolean proc_complete = true;
        
        Connection con = DatabaseConnection.createConnection();
        PreparedStatement prepstat = null;
        
        try
        {
            
            String portionname = portionname_2_jcb.getSelectedItem().toString();
            String price = price_2_jtf.getText();
            int selrow = price_table_jt.getSelectedRow();
            String id = price_table_jt.getValueAt(selrow, 4).toString();
          
            String sql = "UPDATE price SET portion_name=?, price=? WHERE id=?";
            prepstat = con.prepareStatement(sql);
            prepstat.setString(1, portionname);
            prepstat.setString(2, price);
            prepstat.setString(3, id);
            
            prepstat.execute();
       
            
            proc_complete = true;
            
        }
        catch(Exception e)
        {
            
            JOptionPane.showMessageDialog(null,"update_data() :"+e);
            error = true;
            
        }
        
        finally
        {
            
            try
            {
               
                
                if(con != null)
                {
                    
                    con.close();
                    
                }
                if(prepstat != null)
                {
                    
                    prepstat.close();
                    
                }
                
            }
            catch(Exception e)
            {
                
                JOptionPane.showMessageDialog(this, e);
                
            }
            
        }
        
        if(error == false && proc_complete == true)
        {
            
            JOptionPane.showMessageDialog(this,"Operation Successful.","Success",JOptionPane.INFORMATION_MESSAGE);
            disable_editable_fields();
            get_price_details();
            load_dishname_1_jcb();
            load_portionname_1_jcb();
            price_2_jtf.setText("");
            
        }
        
        
    }
    
    
    void save_data()
    {
        
        boolean error = false;
        boolean proc_complete = true;
        
        Connection con = DatabaseConnection.createConnection();
        PreparedStatement prepstat = null;
        
        try
        {
            
            String dishname_code = dishname_1_jcb.getSelectedItem().toString();
            String dishname = (dishname_code.substring(0, dishname_code.lastIndexOf("|"))).trim();
            String dishcode = dishcode_jtf.getText();
            String portionname = portionname_1_jcb.getSelectedItem().toString();
            String price = price_1_jtf.getText();
          
            String sql = "INSERT INTO price(item_name,item_code,portion_name,price) VALUES(?,?,?,?)";
            prepstat = con.prepareStatement(sql);
            prepstat.setString(1, dishname);
            prepstat.setString(2, dishcode);
            prepstat.setString(3, portionname);
            prepstat.setString(4, price);
            prepstat.execute();
       
            
            proc_complete = true;
            
        }
        catch(Exception e)
        {
            
            JOptionPane.showMessageDialog(null,"save_data() :"+e);
            error = true;
            
        }
        
        finally
        {
            
            try
            {
               
                
                if(con != null)
                {
                    
                    con.close();
                    
                }
                if(prepstat != null)
                {
                    
                    prepstat.close();
                    
                }
                
            }
            catch(Exception e)
            {
                
                JOptionPane.showMessageDialog(this, e);
                
            }
            
        }
        
        if(error == false && proc_complete == true)
        {
            
            JOptionPane.showMessageDialog(this,"Operation Successful.","Success",JOptionPane.INFORMATION_MESSAGE);
            save_jb.setEnabled(false);
            new_jb.requestFocusInWindow();
              
            get_price_details();
         
            
        }
        
        
    }
    
    boolean validation_before_save()
    {
        
        boolean valid = true;
        
        if(dishname_1_jcb.getSelectedIndex() == -1)
        {
            
            JOptionPane.showMessageDialog(this, "Select a Valid Dish.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        else if(dishname_1_jcb.getSelectedItem() == null || dishname_1_jcb.getSelectedItem().toString().equals(""))
        {
            
            JOptionPane.showMessageDialog(this, "Select a Valid Dish.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        else if(portionname_1_jcb.getSelectedItem() == null || portionname_1_jcb.getSelectedItem().toString().equals(""))
        {
            
            JOptionPane.showMessageDialog(this, "Specify a Portion Name.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        else if(price_1_jtf.getText().equals(""))
        {
            
            JOptionPane.showMessageDialog(this, "Enter The Price For The Portion.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        
        return valid;
        
        
    }

    boolean validation_before_udpate()
    {
        
        boolean valid = true;
        
        if(price_table_jt.getSelectedRowCount() == 0)
        {
            
            JOptionPane.showMessageDialog(this, "Select An Item In The Table .","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        else if(portionname_2_jcb.getSelectedItem() == null || portionname_2_jcb.getSelectedItem().toString().equals(""))
        {
            
            JOptionPane.showMessageDialog(this, "Specify a Portion Name.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        else if(price_2_jtf.getText().equals(""))
        {
            
            JOptionPane.showMessageDialog(this, "Enter The Price For The Portion.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        
        return valid;
        
        
    }
    
    void get_price_details()
    {
        
        Connection con = DatabaseConnection.createConnection();
        PreparedStatement prepstate = null;
        ResultSet rs = null;
        
        try
        {
            
             DefaultTableModel dtm = (DefaultTableModel)price_table_jt.getModel();
             dtm.setRowCount(0);
            
            String sql = "SELECT DISTINCT item_name,portion_name,price,id FROM price";
            prepstate = con.prepareStatement(sql);
            rs = prepstate.executeQuery();
            
            while(rs.next())
            {
                
                String dishname = rs.getString("item_name");
                String portionname = rs.getString("portion_name");
                String price = rs.getString("price");
                String id = rs.getString("id");
                
                String[] arr = new String[]{Integer.toString(dtm.getRowCount()+1),dishname,portionname,price,id};
                dtm.addRow(arr);
                
            }
            
          
            
        }
        catch(Exception e)
        {
            
            JOptionPane.showMessageDialog(this, "load_dishname_jcb() :"+e);
            
        }
        
        finally
        {
            
            try
            {
               
                
                if(con != null)
                {
                    
                    con.close();
                    
                }
                if(prepstate != null)
                {
                    
                    prepstate.close();
                    
                }
                if(rs != null)
                {
                    
                    rs.close();
                    
                }
                
            }
            catch(Exception e)
            {
                
                JOptionPane.showMessageDialog(this, e);
                
            }
            
        }
        
    }
    
    class dishname_1_jcb_AL implements ActionListener
    {

        @Override
        public void actionPerformed(ActionEvent e) {
            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            
            String dishname_code = dishname_1_jcb.getSelectedItem().toString();
        
            String dish_code = (dishname_code.substring(dishname_code.lastIndexOf("|")+1,dishname_code.length())).trim();
        
            dishcode_jtf.setText(dish_code);
            
        }
        
    }
    
    class price_table_jt_LSL implements ListSelectionListener
    {

        @Override
        public void valueChanged(ListSelectionEvent e) {
            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            
            int selrow = price_table_jt.getSelectedRow();
            
            String dishname = price_table_jt.getValueAt(selrow, 1).toString();
            String portion = price_table_jt.getValueAt(selrow, 2).toString();
            String price = price_table_jt.getValueAt(selrow, 3).toString();
            String id = price_table_jt.getValueAt(selrow, 4).toString();
            
            dishname_2_jcb.setSelectedItem(dishname);
            portionname_2_jcb.setSelectedItem(portion);
            price_2_jtf.setText(price);
            
        }
         
        
    }
            
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton delete_jb;
    private javax.swing.JTextField dishcode_jtf;
    private javax.swing.JComboBox dishname_1_jcb;
    private javax.swing.JComboBox dishname_2_jcb;
    private javax.swing.JButton editfields_jb;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JButton new_jb;
    private javax.swing.JComboBox portionname_1_jcb;
    private javax.swing.JComboBox portionname_2_jcb;
    private javax.swing.JTextField price_1_jtf;
    private javax.swing.JTextField price_2_jtf;
    private javax.swing.JTable price_table_jt;
    private javax.swing.JButton save_jb;
    private javax.swing.JButton update_jb;
    // End of variables declaration//GEN-END:variables
}
