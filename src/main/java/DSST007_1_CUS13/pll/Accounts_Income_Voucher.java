/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package DSST007_1_CUS13.pll;

import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author praveen
 */
public class Accounts_Income_Voucher extends javax.swing.JInternalFrame {

    private static Accounts_Income_Voucher instance;
    int initial_rowcnt;
    
    public Accounts_Income_Voucher() {
        initComponents();
    }

    public static Accounts_Income_Voucher getInstance()
    {
        
        if (instance == null)
            instance = new Accounts_Income_Voucher();

        return instance;
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        receiptno_jtf = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        date_jdc = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        incomeType_jcb = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        incomeItem_jcb = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        description_jtf = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        from_jtf = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        amount_jtf = new javax.swing.JTextField();
        apply = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        incomedetails_jt = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        totalcount_jtf = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        totalamt_jtf = new javax.swing.JTextField();
        tobank_jchkbx = new javax.swing.JCheckBox();
        banklist_jcb = new javax.swing.JComboBox();
        tocash_jchkbx = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel3 = new javax.swing.JPanel();
        save_print_jb = new javax.swing.JButton();
        new_jb = new javax.swing.JButton();
        close_jb = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255)));
        setClosable(true);
        setTitle("Transactions -> Income Voucher");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/DSST007_1_CUS13/InstabizTrader Logo Final 35x35.png"))); // NOI18N
        addInternalFrameListener(new javax.swing.event.InternalFrameListener()
        {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt)
            {
                formInternalFrameOpened(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt)
            {
                formInternalFrameClosing(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt)
            {
                formInternalFrameClosed(evt);
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt)
            {
            }
        });

        jPanel1.setBackground(new java.awt.Color(242, 242, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel1.setText("Receipt No :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel1.add(jLabel1, gridBagConstraints);

        receiptno_jtf.setEditable(false);
        receiptno_jtf.setBackground(new java.awt.Color(255, 204, 51));
        receiptno_jtf.setPreferredSize(new java.awt.Dimension(110, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(receiptno_jtf, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel2.setText("Date :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel1.add(jLabel2, gridBagConstraints);

        date_jdc.setBackground(new java.awt.Color(242, 242, 255));
        date_jdc.setDateFormatString("d-MMM- yy");
        date_jdc.setPreferredSize(new java.awt.Dimension(140, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(date_jdc, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel3.setText("Income Category :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel1.add(jLabel3, gridBagConstraints);

        incomeType_jcb.setPreferredSize(new java.awt.Dimension(200, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(incomeType_jcb, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel4.setText("Income Item :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel1.add(jLabel4, gridBagConstraints);

        incomeItem_jcb.setPreferredSize(new java.awt.Dimension(200, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(incomeItem_jcb, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel5.setText("Description :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel5, gridBagConstraints);

        description_jtf.setPreferredSize(new java.awt.Dimension(300, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(description_jtf, gridBagConstraints);

        jLabel6.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel6.setText("From :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel6, gridBagConstraints);

        from_jtf.setPreferredSize(new java.awt.Dimension(300, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(from_jtf, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel7.setText("Amount :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel7, gridBagConstraints);

        amount_jtf.setPreferredSize(new java.awt.Dimension(110, 27));
        amount_jtf.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyTyped(java.awt.event.KeyEvent evt)
            {
                amount_jtfKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(amount_jtf, gridBagConstraints);

        apply.setBackground(new java.awt.Color(185, 197, 31));
        apply.setText("Apply");
        apply.setPreferredSize(new java.awt.Dimension(90, 27));
        apply.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                applyMouseClicked(evt);
            }
        });
        apply.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                applyKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(apply, gridBagConstraints);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(673, 350));

        incomedetails_jt.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        incomedetails_jt.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "SNo", "IncomeCategory", "IncomeItem", "Description", "Amount"
            }
        )
        {
            boolean[] canEdit = new boolean []
            {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        incomedetails_jt.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        incomedetails_jt.setFillsViewportHeight(true);
        incomedetails_jt.setRowHeight(23);
        incomedetails_jt.setSelectionBackground(new java.awt.Color(86, 132, 191));
        incomedetails_jt.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                incomedetails_jtKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(incomedetails_jt);
        if (incomedetails_jt.getColumnModel().getColumnCount() > 0)
        {
            incomedetails_jt.getColumnModel().getColumn(0).setMinWidth(65);
            incomedetails_jt.getColumnModel().getColumn(0).setPreferredWidth(65);
            incomedetails_jt.getColumnModel().getColumn(1).setMinWidth(150);
            incomedetails_jt.getColumnModel().getColumn(1).setPreferredWidth(150);
            incomedetails_jt.getColumnModel().getColumn(2).setMinWidth(150);
            incomedetails_jt.getColumnModel().getColumn(2).setPreferredWidth(150);
            incomedetails_jt.getColumnModel().getColumn(3).setMinWidth(200);
            incomedetails_jt.getColumnModel().getColumn(3).setPreferredWidth(200);
            incomedetails_jt.getColumnModel().getColumn(4).setMinWidth(100);
            incomedetails_jt.getColumnModel().getColumn(4).setPreferredWidth(100);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 0);
        jPanel1.add(jScrollPane1, gridBagConstraints);

        jPanel2.setBackground(new java.awt.Color(242, 242, 255));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel8.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel8.setText("Total Count :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 175, 0, 0);
        jPanel2.add(jLabel8, gridBagConstraints);

        totalcount_jtf.setEditable(false);
        totalcount_jtf.setBackground(new java.awt.Color(255, 204, 51));
        totalcount_jtf.setFocusable(false);
        totalcount_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        jPanel2.add(totalcount_jtf, gridBagConstraints);

        jLabel9.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel9.setText("Total Amount :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 165, 0, 0);
        jPanel2.add(jLabel9, gridBagConstraints);

        totalamt_jtf.setEditable(false);
        totalamt_jtf.setBackground(new java.awt.Color(255, 204, 51));
        totalamt_jtf.setFocusable(false);
        totalamt_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        jPanel2.add(totalamt_jtf, gridBagConstraints);

        tobank_jchkbx.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        tobank_jchkbx.setText("To Bank :");
        tobank_jchkbx.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                tobank_jchkbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(tobank_jchkbx, gridBagConstraints);

        banklist_jcb.setEditable(true);
        banklist_jcb.setPreferredSize(new java.awt.Dimension(250, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel2.add(banklist_jcb, gridBagConstraints);

        tocash_jchkbx.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        tocash_jchkbx.setText("To Cash");
        tocash_jchkbx.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                tocash_jchkbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(tocash_jchkbx, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        jPanel1.add(jPanel2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(jSeparator1, gridBagConstraints);

        jPanel3.setBackground(new java.awt.Color(242, 242, 255));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        save_print_jb.setBackground(new java.awt.Color(185, 197, 31));
        save_print_jb.setText("Save&Print");
        save_print_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        save_print_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                save_print_jbMouseClicked(evt);
            }
        });
        save_print_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                save_print_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel3.add(save_print_jb, gridBagConstraints);

        new_jb.setBackground(new java.awt.Color(185, 197, 31));
        new_jb.setText("New");
        new_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        new_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                new_jbMouseClicked(evt);
            }
        });
        new_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                new_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel3.add(new_jb, gridBagConstraints);

        close_jb.setBackground(new java.awt.Color(86, 132, 191));
        close_jb.setText("Close");
        close_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        close_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                close_jbMouseClicked(evt);
            }
        });
        close_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                close_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        jPanel3.add(close_jb, gridBagConstraints);

        jButton1.setBackground(new java.awt.Color(185, 197, 31));
        jButton1.setText("Clear All");
        jButton1.setPreferredSize(new java.awt.Dimension(100, 27));
        jButton1.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                jButton1KeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        jPanel3.add(jButton1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 15, 0);
        jPanel1.add(jPanel3, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        setBounds(0, 0, 677, 594);
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        // TODO add your handling code here:
        
        instance = null;
        
    }//GEN-LAST:event_formInternalFrameClosed

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        // TODO add your handling code here:
        
        instance = null;
        
    }//GEN-LAST:event_formInternalFrameClosing

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:
        
        Dimension desktopSize = NewMDIApplication.desktopbg_jlbl.getSize();
        Dimension jInternalFrameSize = this.getSize();
        this.setLocation((desktopSize.width - jInternalFrameSize.width)/2,(desktopSize.height- jInternalFrameSize.height)/2);
        
        //---------------------------------------------
        
        get_receiptno();
        date_jdc.setDate(new Date());
        
        //AutoCompleteDecorator.decorate(incomeType_jcb);
        load_incomeType_jcb();
        
        //AutoCompleteDecorator.decorate(incomeItem_jcb);
        load_incomeItem_jcb();
        
        incomedetails_jt.setFocusTraversalKeysEnabled(false);
        
        banklist_jcb.setEnabled(false);
        tocash_jchkbx.setSelected(true);
        
        load_banklist_jcb();
        AutoCompleteDecorator.decorate(banklist_jcb);
        
    }//GEN-LAST:event_formInternalFrameOpened

    void load_banklist_jcb()
    {
        
        Connection con = DatabaseConnection.createConnection();
        PreparedStatement prepstmt = null;
        banklist_jcb.removeAllItems();

        try {
            
            String sql = "SELECT DISTINCT bank_name FROM banks";
            prepstmt = con.prepareStatement(sql);
            ResultSet rs = prepstmt.executeQuery();
            while (rs.next()) {

                String banknames = rs.getString("bank_name");
               
                banklist_jcb.addItem(banknames);

            }
            
            banklist_jcb.addItem("");
            banklist_jcb.setSelectedItem("");
           
        } catch (Exception e) {

            JOptionPane.showMessageDialog(null, e);

        } finally {

            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex);
                }
            }
            
            if (prepstmt != null) {
                try {
                    prepstmt.close();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex);
                }
            }
            
            
        }       
        
    }
    
    private void load_incomeType_jcb()
    {
        
        Connection con = DatabaseConnection.createConnection();
        
         
        try
        {
            boolean stat = false;
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT DISTINCT income_type FROM income_types ");
            
            while(rs.next())
            {

                String income_type = rs.getString("income_type");
                incomeType_jcb.addItem(income_type);
                
            }    
      
            incomeType_jcb.addItem("");
            incomeType_jcb.setSelectedItem("");
            
        }
        catch(Exception e)
        {
             
            JOptionPane.showMessageDialog(null, e);
             
        }
        finally
                {
                    
                    if(con!=null)
                    {
                        try {
                            con.close();
                        } catch (SQLException ex) {
                            JOptionPane.showMessageDialog(null, ex);
                        }
                        
                    }
                    
                }
        
    }
    
    private void load_incomeItem_jcb()
    {
        
        Connection con = DatabaseConnection.createConnection();
        
         
        try
        {
            boolean stat = false;
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT DISTINCT income_item FROM income_items ");
            
            while(rs.next())
            {

                String income_item = rs.getString("income_item");
                incomeItem_jcb.addItem(income_item);
                
            }    
      
            incomeItem_jcb.addItem("");
            incomeItem_jcb.setSelectedItem("");
            
        }
        catch(Exception e)
        {
             
            JOptionPane.showMessageDialog(null, e);
             
        }
        finally
                {
                    
                    if(con!=null)
                    {
                        try {
                            con.close();
                        } catch (SQLException ex) {
                            JOptionPane.showMessageDialog(null, ex);
                        }
                        
                    }
                    
                }
        
    }
    
    private void get_receiptno()
    {
        
        Connection con = DatabaseConnection.createConnection();
        
         
        try
        {
            boolean stat = false;
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT receipt_no FROM income_voucher ");
            
            while(rs.next())
            {

                stat = true;

                int receipt_no = Integer.parseInt(rs.getString("receipt_no"));
                int newreceipt_no = receipt_no + 1;

                receiptno_jtf.setText(Integer.toString(newreceipt_no));

            }    
          
            if(stat==false)
            {
                
                receiptno_jtf.setText("1000");
                
            }
          
             
        }
        catch(Exception e)
        {
             
            JOptionPane.showMessageDialog(null, e);
             
        }
        finally
        {

            if(con!=null)
            {
                try {
                    con.close();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex);
                }

            }

        }
        
    }
    
    private void amount_jtfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_amount_jtfKeyTyped
        // TODO add your handling code here:
        
        String text = amount_jtf.getText();
        int lastindex = text.lastIndexOf(".");
        
        char c = evt.getKeyChar();

        if(!(Character.isDigit(c)||(c==KeyEvent.VK_BACK_SPACE)||c==KeyEvent.VK_DELETE||evt.getKeyChar() == '.'))
        {
            //  evt.getKeyChar() == '.' does accept point when jtextfield accepts decimal number
            evt.consume();
            getToolkit().beep();
        
        }
        else if(lastindex >= 0 && !Character.isDigit(c))
        {
            
             evt.consume();
            
        }
                
    }//GEN-LAST:event_amount_jtfKeyTyped

    private void applyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_applyMouseClicked
        // TODO add your handling code here:
 
        if(validation_on_apply() == true)
        {

            apply();
            new_jb.requestFocusInWindow();

        }

    }//GEN-LAST:event_applyMouseClicked

    private void applyKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_applyKeyPressed
        // TODO add your handling code here:
      
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            
            if(validation_on_apply() == true)
            {

                apply();
                new_jb.requestFocusInWindow();

            }
            
        }
        
    }//GEN-LAST:event_applyKeyPressed

    private void incomedetails_jtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_incomedetails_jtKeyPressed
        // TODO add your handling code here:
        
        if(evt.getKeyCode() == KeyEvent.VK_TAB)
        {
            
            tobank_jchkbx.requestFocusInWindow();
            
        }
        
    }//GEN-LAST:event_incomedetails_jtKeyPressed

    private void save_print_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_save_print_jbMouseClicked
        // TODO add your handling code here:
        
        if(validation_on_save() == true)
        {
            
            savedata();
            
        }
        
    }//GEN-LAST:event_save_print_jbMouseClicked

    private void save_print_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_save_print_jbKeyPressed
        // TODO add your handling code here:
        
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            
            if(validation_on_save() == true)
            {

                savedata();

            }
            
        }
        
    }//GEN-LAST:event_save_print_jbKeyPressed

    private void new_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_new_jbMouseClicked
        // TODO add your handling code here:
        
        clearfield();
        ((JTextField)incomeType_jcb.getEditor().getEditorComponent()).requestFocusInWindow();
        
    }//GEN-LAST:event_new_jbMouseClicked

    private void new_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_new_jbKeyPressed
        // TODO add your handling code here:
        
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            
            clearfield();
            //((JTextField)incomeType_jcb.getEditor().getEditorComponent()).requestFocusInWindow();
            
            incomeType_jcb.requestFocusInWindow();
            
        }
        
    }//GEN-LAST:event_new_jbKeyPressed

    private void close_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_close_jbKeyPressed
        // TODO add your handling code here:
        
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            
            this.dispose();
            
        }
        
    }//GEN-LAST:event_close_jbKeyPressed

    private void close_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_close_jbMouseClicked
        // TODO add your handling code here:
        
        this.dispose();
        
    }//GEN-LAST:event_close_jbMouseClicked

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        
        clearallfields();
        
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton1KeyPressed
        // TODO add your handling code here:

        
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            
            clearallfields();
            
        }
        
    }//GEN-LAST:event_jButton1KeyPressed

    private void tobank_jchkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tobank_jchkbxActionPerformed
        // TODO add your handling code here:
        
        if(tobank_jchkbx.isSelected() == true)
        {
            
            banklist_jcb.setEnabled(true);
            tocash_jchkbx.setSelected(false);
            
        }
        if(tobank_jchkbx.isSelected() == false)
        {
            
             banklist_jcb.setEnabled(false);
            
        }
        
    }//GEN-LAST:event_tobank_jchkbxActionPerformed

    private void tocash_jchkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tocash_jchkbxActionPerformed
        // TODO add your handling code here:
        
        if(tocash_jchkbx.isSelected() == true)
        {

            tobank_jchkbx.setSelected(false);
            banklist_jcb.setEnabled(false);

        }
        
    }//GEN-LAST:event_tocash_jchkbxActionPerformed

    private boolean validation_on_save()
    {
        boolean flag = true;
        
        if(receiptno_jtf.getText().equals(""))
        {
            
            JOptionPane.showMessageDialog(this,"Specify a Receipt No.","Error",JOptionPane.ERROR_MESSAGE); 
            flag = false;
            
        }
        else if(date_jdc.getDate() == null)
        {
            JOptionPane.showMessageDialog(this,"Select a Date.","Error",JOptionPane.ERROR_MESSAGE); 
            flag = false;
        }
        else if(incomedetails_jt.getRowCount() == 0)
        {
            
            JOptionPane.showMessageDialog(this,"No Data Found.","Error",JOptionPane.ERROR_MESSAGE); 
            flag= false;
            
        }
        else if(tobank_jchkbx.isSelected() == false && tocash_jchkbx.isSelected() == false)
        {
            
            JOptionPane.showMessageDialog(this, "Select Cash or Bank.","Error",JOptionPane.ERROR_MESSAGE);
            flag = false;
            
        }
        else if(tobank_jchkbx.isSelected() == true && (banklist_jcb.getSelectedItem() == null || banklist_jcb.getSelectedItem().toString().equals("") || banklist_jcb.getSelectedIndex() == -1))
        {
            
            JOptionPane.showMessageDialog(this, "Select a Valid Bank Name.","Error",JOptionPane.ERROR_MESSAGE);
            flag = false;
            
        }
        

        return flag;
        
    }
    
    boolean validation_on_apply()
    {
        
        boolean valid = true;
        
        if(incomeType_jcb.getSelectedItem().toString().equals("") || incomeType_jcb.getSelectedItem() == null)
        {
            
            JOptionPane.showMessageDialog(null, "Specify an Income Category.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        else if(incomeItem_jcb.getSelectedItem().toString().equals("") || incomeItem_jcb.getSelectedItem() == null)
        {
            
            JOptionPane.showMessageDialog(null, "Specify an Income Item.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
       
        else if(amount_jtf.getText().equals(""))
        {
            
            JOptionPane.showMessageDialog(null, "Specify the Amount.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        
        return valid;
        
    }
    
    void apply()
    {
        
        try
        {
         
            DefaultTableModel dtm = (DefaultTableModel)incomedetails_jt.getModel();
            
            String income_category = incomeType_jcb.getSelectedItem().toString();
            String income_item = incomeItem_jcb.getSelectedItem().toString();
            String description = description_jtf.getText();
            String amount = amount_jtf.getText();
            
            String[] arr = new String[]{Integer.toString(incomedetails_jt.getRowCount()+1),income_category,income_item,description,amount};
            dtm.addRow(arr);
            
            gettotals();
            
            clearfield();
            
        }
        catch(Exception e)
        {
            
            JOptionPane.showMessageDialog(null, e);
            
        }
        
    }
    
    private void gettotals()
    {
        
        try
        {
            
            BigDecimal big_totalamt = new BigDecimal("0").setScale(2, RoundingMode.HALF_UP);
            BigDecimal big_temp = new BigDecimal("0").setScale(2, RoundingMode.HALF_UP);
            
            for(int i = 0 ; i < incomedetails_jt.getRowCount() ; i++)
            {
                
                big_totalamt = (new BigDecimal(incomedetails_jt.getValueAt(i, 4).toString())).add(big_temp);
                big_temp = big_totalamt;
                
            }
            
            totalamt_jtf.setText(big_totalamt.toString());
            totalcount_jtf.setText(Integer.toString(incomedetails_jt.getRowCount()));
            
            
        }
        catch(Exception e)
        {
            
            JOptionPane.showMessageDialog(null, e);
            
        }
        
    }
    
    void printvoucher()
    {
        
//        try 
//        {
//            
//            addMoreRows();
//            
//            DefaultTableModel model = (DefaultTableModel)incomedetails_jt.getModel();
//            SimpleDateFormat sdf1 = new SimpleDateFormat("dd-MMM-yyyy",Locale.getDefault());
//            
//            String source = "income_receipt.jasper";
//           
//            InputStream is = getClass().getResourceAsStream(source);
//
//            Map parameters = new HashMap();
//            parameters.put("logo", getClass().getResourceAsStream("ideal_emblem_2.png"));
//            parameters.put("receipt_no", receiptno_jtf.getText());
//            parameters.put("receipt_date", sdf1.format(date_jdc.getDate()));
//            parameters.put("received_from", from_jtf.getText());
//            String big_amount = new BigDecimal(totalamt_jtf.getText()).setScale(2, RoundingMode.HALF_UP).toString();
//            parameters.put("amount", big_amount);
//           
//            // Convert amount to words:
//            int decimalindex = big_amount.indexOf(".");
//            
//            String amtbeforedecimal = big_amount.substring(0, decimalindex);
//            String amtafterdecimal = big_amount.substring(decimalindex+1);
//
//            int amtbeforedecimal_int = Integer.parseInt(amtbeforedecimal);
//            int amtafterdecimal_int = Integer.parseInt(amtafterdecimal);
//
//            NumberToWords ntw1 = new NumberToWords();
//
//            String amtbeforedecimal_words = ntw1.convert(amtbeforedecimal_int);
//            String amtafterdecimal_words = ntw1.convert(amtafterdecimal_int);
//
//            String amountinwords = "("+amtbeforedecimal_words+" Rupees "+amtafterdecimal_words+" Paise"+" Only)";
//            //End
//
//            parameters.put("amount_inwords", amountinwords);
//            
//            JasperPrint print = JasperFillManager.fillReport(is, parameters, new JRTableModelDataSource(model));
//            //JasperPrint print = JasperFillManager.fillReport(is, parameters, new JREmptyDataSource());
//            
//            JasperViewer.viewReport(print,false);
//            
//            removeAdditionalRows();
//            
//            
//        } catch (Exception ex) 
//        {
//            
//            
//            JOptionPane.showMessageDialog(null, ex);
//            
//        }
        
    }
    
    private void addMoreRows()
    {
        String[] morerowsarr = null;
        initial_rowcnt = incomedetails_jt.getRowCount();
        int rows_needed = 20;
        if(initial_rowcnt < rows_needed)
        {
            int addmorerows = rows_needed - initial_rowcnt;
            for(int i = 0 ; i < addmorerows ; i++)
            {
                
                morerowsarr = new String[]{"","","","","","","",""};
                ((DefaultTableModel)incomedetails_jt.getModel()).addRow(morerowsarr);
                
            }
        }
        
    }
    
    private void removeAdditionalRows()
    {
        int current_rowcnt = incomedetails_jt.getRowCount();
        int rowstodelete = current_rowcnt-initial_rowcnt;
        for(int i = 0 ; i < rowstodelete ; i++)
        {
            //System.out.println(current_rowcnt = current_rowcnt - 1);
            ((DefaultTableModel)incomedetails_jt.getModel()).removeRow(current_rowcnt = current_rowcnt - 1); 
        }  
    }
    
    private void clearfield(){
//        
//        incomeType_jcb.setSelectedItem("");
//        incomeItem_jcb.setSelectedItem("");
        description_jtf.setText("");
        amount_jtf.setText("");
        
    }
    
    private void clearallfields()
    {
        
        get_receiptno();
        incomeType_jcb.setSelectedItem("");
        incomeItem_jcb.setSelectedItem("");
        description_jtf.setText("");
        from_jtf.setText("");
        amount_jtf.setText("");
        ((DefaultTableModel)incomedetails_jt.getModel()).setRowCount(0);
        
    }
   
    private void savedata()
    {
        
        boolean error = false;
        boolean status = false;
        
        Connection con = DatabaseConnection.createConnection();
        PreparedStatement prepstate_1 = null, prepstate_2 = null, prepstate_3 = null, prepstate_4 = null;
        PreparedStatement prepstate_5 = null, prepstate_6 = null;
        ResultSet rs_1 = null, rs_2 = null;
        
        try 
        {
             
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd",Locale.getDefault());
            DefaultTableModel dtm = (DefaultTableModel)incomedetails_jt.getModel();
            
            String to_cash = null;
            String to_bank = null;
            BigDecimal tot_amount = new BigDecimal(totalamt_jtf.getText());
            
            if(tobank_jchkbx.isSelected() == true)
            {
                
                Boolean empty = true;
                
                to_bank = banklist_jcb.getSelectedItem().toString();
                to_cash = "NA";
                
                String sql_1 = "SELECT amount,id FROM cash_at_bank_acc WHERE bank_name = ?";
                prepstate_1 = con.prepareStatement(sql_1);
                prepstate_1.setString(1, to_bank);
                rs_1 = prepstate_1.executeQuery();
                
                while(rs_1.next())
                {
                    
                    empty = false;
                    
                    String id = rs_1.getString("id");
                    
                    BigDecimal bank_amount = new BigDecimal(rs_1.getString("amount"));
                    BigDecimal new_amount = tot_amount.add(bank_amount);
                    
                    String sql_2 = "UPDATE cash_at_bank_acc SET amount = ? WHERE id = ?";
                    prepstate_2 = con.prepareStatement(sql_2);
                    prepstate_2.setString(1, new_amount.toString());
                    prepstate_2.setString(2, id);
                    prepstate_2.executeUpdate();
                    
                }
                
                if(empty == true)
                {
                    
                    String sql_3 = "INSERT INTO cash_at_bank_acc(bank_name,amount) VALUES(?,?)";
                    prepstate_3 = con.prepareStatement(sql_3);
                    prepstate_3.setString(1, to_bank);
                    prepstate_3.setString(2, tot_amount.toString());
                    prepstate_3.executeUpdate();
                    
                }
                
                
            }
            
            else if(tocash_jchkbx.isSelected() == true)
            {
                
                Boolean empty = true;
                
                to_bank = "NA";
                to_cash = "yes";
                
                String sql_4 = "SELECT amount,id FROM cash_at_hand_acc";
                prepstate_4 = con.prepareStatement(sql_4);
                rs_2 = prepstate_4.executeQuery();
                while(rs_2.next())
                {
                    
                    empty = false;
                    
                    String id = rs_2.getString("id");
                    
                    BigDecimal cash_amount = new BigDecimal(rs_2.getString("amount"));
                    BigDecimal new_amount = tot_amount.add(cash_amount);
                    
                    String sql_5 = "UPDATE cash_at_hand_acc SET amount = ? WHERE id = ?";
                    prepstate_5 = con.prepareStatement(sql_5);
                    prepstate_5.setString(1, new_amount.toString());
                    prepstate_5.setString(2, id);
                    prepstate_5.executeUpdate();
                    
                }
                
                if(empty == true)
                {
                    
                    String sql_6 = "INSERT INTO cash_at_hand_acc(amount) VALUES(?)";
                    prepstate_6 = con.prepareStatement(sql_6);
                    prepstate_6.setString(1, tot_amount.toString());
                    prepstate_6.executeUpdate();
                    
                }
                
            }
            
            for(int i = 0 ; i < incomedetails_jt.getRowCount() ; i++)
            {
            
                String sql="INSERT into income_voucher(receipt_no,entrydate,income_type,income_item,description,from_,amount,to_bank,to_cash) values(?,?,?,?,?,?,?,?,?)";
                PreparedStatement prepstmt = con.prepareStatement(sql);
                prepstmt.setString(1, receiptno_jtf.getText());
                prepstmt.setString(2, sdf.format(date_jdc.getDate()));
                prepstmt.setString(3, dtm.getValueAt(i, 1).toString());
                prepstmt.setString(4, dtm.getValueAt(i, 2).toString());
                prepstmt.setString(5, dtm.getValueAt(i, 3).toString());
                prepstmt.setString(6, from_jtf.getText());
                prepstmt.setString(7, dtm.getValueAt(i, 4).toString());
                prepstmt.setString(8, to_bank);
                prepstmt.setString(9, to_cash);

                prepstmt.executeUpdate();
                
            }
            
            status = true;     
                
        } 
        catch (Exception ex) 
        {
                
            JOptionPane.showMessageDialog( null, ex);
            error = true;    
                
        }
        finally
        {

            try
            {
               
               if(con != null)
               {
                   con.close();
               }
               if(prepstate_1 != null)
               {
                   prepstate_1.close();
               }
               if(rs_1 != null)
               {
                   rs_1.close();
               }
               if(prepstate_2 != null)
               {
                   prepstate_2.close();
               }
               if(rs_2 != null)
               {
                   rs_2.close();
               }
               if(prepstate_3 != null)
               {
                   prepstate_3.close();
               }
               if(prepstate_4 != null)
               {
                   prepstate_4.close();
               }
               if(prepstate_5 != null)
               {
                   prepstate_5.close();
               }
               if(prepstate_6 != null)
               {
                   prepstate_6.close();
               }
               
           }
           catch(Exception e)
           {
               
               JOptionPane.showMessageDialog(null, e);
               
           }

        }
        if(error==false && status==true)
        {

            JOptionPane.showMessageDialog(this,"Operation Successful.","Success",JOptionPane.INFORMATION_MESSAGE);
            //printvoucher();
            clearallfields();
         
        }
        
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField amount_jtf;
    private javax.swing.JButton apply;
    private javax.swing.JComboBox banklist_jcb;
    private javax.swing.JButton close_jb;
    private com.toedter.calendar.JDateChooser date_jdc;
    private javax.swing.JTextField description_jtf;
    private javax.swing.JTextField from_jtf;
    private javax.swing.JComboBox incomeItem_jcb;
    private javax.swing.JComboBox incomeType_jcb;
    private javax.swing.JTable incomedetails_jt;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton new_jb;
    private javax.swing.JTextField receiptno_jtf;
    private javax.swing.JButton save_print_jb;
    private javax.swing.JCheckBox tobank_jchkbx;
    private javax.swing.JCheckBox tocash_jchkbx;
    private javax.swing.JTextField totalamt_jtf;
    private javax.swing.JTextField totalcount_jtf;
    // End of variables declaration//GEN-END:variables
}
