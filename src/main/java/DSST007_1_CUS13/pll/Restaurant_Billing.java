package DSST007_1_CUS13.pll;

import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import javax.print.attribute.HashPrintRequestAttributeSet;
import javax.print.attribute.PrintRequestAttributeSet;
import javax.print.attribute.standard.Copies;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author praveen
 */
public class Restaurant_Billing extends javax.swing.JInternalFrame {

    private static Restaurant_Billing form_instance;
    String tableid;
    int save_status = 0;
    AL_dishname_jcb dishname_jcb_AL_obj = new AL_dishname_jcb();
    AL_portion_jcb portion_jcb_AL_obj = new AL_portion_jcb();
    AL_dishCategory_jcb dishCategory_AL_obj = new AL_dishCategory_jcb();
    
    public Restaurant_Billing() {
        initComponents();
    }

    public static Restaurant_Billing getInstance()
    {
        
        if (form_instance == null)
            form_instance = new Restaurant_Billing();

        return form_instance;
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        save_print_jb = new javax.swing.JButton();
        saveonly_jb = new javax.swing.JButton();
        new_data_jb = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        dishname_jcb = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        portion_jcb = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        price_jtf = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        quantity_jtf = new javax.swing.JTextField();
        apply_jb = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        billno_jtf = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        billdate_jdc = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        items_table_jt = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        net_total_jtf = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        totalno_jtf = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        tender_jtf = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        balance_jtf = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        dishCategory_jcb = new javax.swing.JComboBox<>();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255)));
        setClosable(true);
        setIconifiable(true);
        setTitle("Transactions - > Billing");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/DSST007_1_CUS13/InstabizTrader Logo Final 35x35.png"))); // NOI18N
        addInternalFrameListener(new javax.swing.event.InternalFrameListener()
        {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt)
            {
                formInternalFrameOpened(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt)
            {
                formInternalFrameClosing(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt)
            {
                formInternalFrameClosed(evt);
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt)
            {
            }
        });

        jPanel1.setBackground(new java.awt.Color(242, 242, 255));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel2.setBackground(new java.awt.Color(242, 242, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jButton4.setBackground(new java.awt.Color(86, 132, 191));
        jButton4.setMnemonic('s');
        jButton4.setText("Close");
        jButton4.setPreferredSize(new java.awt.Dimension(100, 27));
        jButton4.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                jButton4MouseClicked(evt);
            }
        });
        jButton4.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton4ActionPerformed(evt);
            }
        });
        jButton4.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                jButton4KeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 15, 0);
        jPanel2.add(jButton4, gridBagConstraints);

        save_print_jb.setBackground(new java.awt.Color(185, 197, 31));
        save_print_jb.setText("Save&Print");
        save_print_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        save_print_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                save_print_jbMouseClicked(evt);
            }
        });
        save_print_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                save_print_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 15, 0);
        jPanel2.add(save_print_jb, gridBagConstraints);

        saveonly_jb.setBackground(new java.awt.Color(185, 197, 31));
        saveonly_jb.setText("Save Only");
        saveonly_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        saveonly_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                saveonly_jbMouseClicked(evt);
            }
        });
        saveonly_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                saveonly_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 15, 0);
        jPanel2.add(saveonly_jb, gridBagConstraints);

        new_data_jb.setBackground(new java.awt.Color(185, 197, 31));
        new_data_jb.setText("New");
        new_data_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        new_data_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                new_data_jbMouseClicked(evt);
            }
        });
        new_data_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                new_data_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 15, 0);
        jPanel2.add(new_data_jb, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(jPanel2, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel1.setText("Dish Name :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 0, 0);
        jPanel1.add(jLabel1, gridBagConstraints);

        dishname_jcb.setEditable(true);
        dishname_jcb.setPreferredSize(new java.awt.Dimension(250, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 2, 0);
        jPanel1.add(dishname_jcb, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel2.setText("Portion :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 0, 0);
        jPanel1.add(jLabel2, gridBagConstraints);

        portion_jcb.setPreferredSize(new java.awt.Dimension(200, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(portion_jcb, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel3.setText("Price :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel3, gridBagConstraints);

        price_jtf.setEditable(false);
        price_jtf.setBackground(new java.awt.Color(242, 242, 255));
        price_jtf.setFocusable(false);
        price_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(price_jtf, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel4.setText("Quantity :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel4, gridBagConstraints);

        quantity_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        quantity_jtf.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyTyped(java.awt.event.KeyEvent evt)
            {
                quantity_jtfKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(quantity_jtf, gridBagConstraints);

        apply_jb.setBackground(new java.awt.Color(185, 197, 31));
        apply_jb.setText("Apply >>");
        apply_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        apply_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                apply_jbMouseClicked(evt);
            }
        });
        apply_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                apply_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel1.add(apply_jb, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel7.setText("Bill No :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(30, 5, 0, 0);
        jPanel1.add(jLabel7, gridBagConstraints);

        billno_jtf.setEditable(false);
        billno_jtf.setBackground(new java.awt.Color(255, 204, 51));
        billno_jtf.setNextFocusableComponent(billdate_jdc);
        billno_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(30, 0, 0, 0);
        jPanel1.add(billno_jtf, gridBagConstraints);

        jLabel8.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel8.setText("Bill Date :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel8, gridBagConstraints);

        billdate_jdc.setBackground(new java.awt.Color(242, 242, 255));
        billdate_jdc.setDateFormatString("dd-MMM-yyyy");
        billdate_jdc.setPreferredSize(new java.awt.Dimension(140, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(billdate_jdc, gridBagConstraints);

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setPreferredSize(new java.awt.Dimension(803, 470));

        items_table_jt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        items_table_jt.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        items_table_jt.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "SNo", "Category", "DishName", "Portion", "Rate", "Qnty", "Amount", "ItemCode"
            }
        )
        {
            boolean[] canEdit = new boolean []
            {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        items_table_jt.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        items_table_jt.setFillsViewportHeight(true);
        items_table_jt.setRowHeight(23);
        items_table_jt.setSelectionBackground(new java.awt.Color(86, 132, 191));
        items_table_jt.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                items_table_jtKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(items_table_jt);
        if (items_table_jt.getColumnModel().getColumnCount() > 0)
        {
            items_table_jt.getColumnModel().getColumn(0).setMinWidth(50);
            items_table_jt.getColumnModel().getColumn(0).setPreferredWidth(50);
            items_table_jt.getColumnModel().getColumn(1).setMinWidth(150);
            items_table_jt.getColumnModel().getColumn(1).setPreferredWidth(150);
            items_table_jt.getColumnModel().getColumn(2).setMinWidth(200);
            items_table_jt.getColumnModel().getColumn(2).setPreferredWidth(200);
            items_table_jt.getColumnModel().getColumn(3).setMinWidth(120);
            items_table_jt.getColumnModel().getColumn(3).setPreferredWidth(120);
            items_table_jt.getColumnModel().getColumn(4).setMinWidth(90);
            items_table_jt.getColumnModel().getColumn(4).setPreferredWidth(90);
            items_table_jt.getColumnModel().getColumn(5).setMinWidth(70);
            items_table_jt.getColumnModel().getColumn(5).setPreferredWidth(70);
            items_table_jt.getColumnModel().getColumn(6).setMinWidth(100);
            items_table_jt.getColumnModel().getColumn(6).setPreferredWidth(100);
            items_table_jt.getColumnModel().getColumn(7).setMinWidth(0);
            items_table_jt.getColumnModel().getColumn(7).setPreferredWidth(0);
            items_table_jt.getColumnModel().getColumn(7).setMaxWidth(0);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 15;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel1.add(jScrollPane1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(15, 5, 15, 2);
        jPanel1.add(jSeparator1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(18, 5, 15, 2);
        jPanel1.add(jSeparator2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(15, 5, 0, 2);
        jPanel1.add(jSeparator3, gridBagConstraints);

        jPanel3.setBackground(new java.awt.Color(242, 242, 255));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabel9.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel9.setText("Total No :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel3.add(jLabel9, gridBagConstraints);

        net_total_jtf.setEditable(false);
        net_total_jtf.setBackground(new java.awt.Color(255, 204, 51));
        net_total_jtf.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        net_total_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel3.add(net_total_jtf, gridBagConstraints);

        jLabel10.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel10.setText("Net Total :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 180, 0, 0);
        jPanel3.add(jLabel10, gridBagConstraints);

        totalno_jtf.setEditable(false);
        totalno_jtf.setBackground(new java.awt.Color(242, 242, 255));
        totalno_jtf.setFocusable(false);
        totalno_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel3.add(totalno_jtf, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel5.setText("Tender :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel3.add(jLabel5, gridBagConstraints);

        tender_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        tender_jtf.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                tender_jtfKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                tender_jtfKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt)
            {
                tender_jtfKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel3.add(tender_jtf, gridBagConstraints);

        jLabel6.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel6.setText("Balance :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel3.add(jLabel6, gridBagConstraints);

        balance_jtf.setEditable(false);
        balance_jtf.setBackground(new java.awt.Color(255, 204, 51));
        balance_jtf.setFocusable(false);
        balance_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel3.add(balance_jtf, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 8, 5);
        jPanel1.add(jPanel3, gridBagConstraints);

        jButton1.setBackground(new java.awt.Color(185, 197, 31));
        jButton1.setForeground(new java.awt.Color(255, 51, 51));
        jButton1.setText("<<Remove");
        jButton1.setPreferredSize(new java.awt.Dimension(100, 27));
        jButton1.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                jButton1KeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        jPanel1.add(jButton1, gridBagConstraints);

        jLabel12.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel12.setText("Dish Category :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel12, gridBagConstraints);

        dishCategory_jcb.setEditable(true);
        dishCategory_jcb.setPreferredSize(new java.awt.Dimension(200, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 2, 0);
        jPanel1.add(dishCategory_jcb, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        setBounds(0, 0, 1060, 590);
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:

        Dimension desktopSize = NewMDIApplication.desktopbg_jlbl.getSize();
        Dimension jInternalFrameSize = this.getSize();
        this.setLocation((desktopSize.width - jInternalFrameSize.width)/2,(desktopSize.height- jInternalFrameSize.height)/2);

        //--------------------------------------------------------------------------------
        
        get_billno();
        billdate_jdc.setDate(new Date());
        
        load_dishCategory_jcb();
        AutoCompleteDecorator.decorate(dishCategory_jcb);
        
        dishCategory_jcb.addActionListener(dishCategory_AL_obj);
      
        //AutoCompleteDecorator.decorate(portion_jcb);
        
        dishname_jcb.addActionListener(dishname_jcb_AL_obj);
        
        portion_jcb.addActionListener(portion_jcb_AL_obj);
        
        items_table_jt.setFocusTraversalKeysEnabled(false);
        
        new_data_jb.setFocusTraversalKeysEnabled(false);
        
        tender_jtf.setFocusTraversalKeysEnabled(false);
        
    }//GEN-LAST:event_formInternalFrameOpened
  
    private void load_dishCategory_jcb()
    {
        
        Connection con = DatabaseConnection.createConnection();
        PreparedStatement prepstate = null;
        ResultSet rs = null;
        
        try
        {
            
            String sql = "SELECT DISTINCT category FROM dishes";
            prepstate = con.prepareStatement(sql);
            rs = prepstate.executeQuery();
            
            while(rs.next())
            {
                
                String dishCategory = rs.getString("category");
                dishCategory_jcb.addItem(dishCategory);
               
            }
            
            dishCategory_jcb.setSelectedItem("");
           
        }
        catch(Exception e)
        {
            
            JOptionPane.showMessageDialog(this, "load_dishCategory_jcb() :"+e);
            
        }
        
        finally
        {
            
            try
            {
  
                rs.close();
                prepstate.close();
                con.close();
        
            }
            catch(Exception e)
            {
                
                JOptionPane.showMessageDialog(this, e);
                
            }
            
        }
        
    }
    
    class AL_dishCategory_jcb implements ActionListener
    {

        @Override
        public void actionPerformed(ActionEvent ae) {
            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        
            getDishNames();
        
        }
        
    }
    
    private void getDishNames()
    {
        
        Connection con = DatabaseConnection.createConnection();
        PreparedStatement prepstate = null;
        ResultSet rs = null;
        
        try
        {
            
            dishname_jcb.removeAllItems();

            String dishCategory = dishCategory_jcb.getSelectedItem().toString();

            String sql = "SELECT DISTINCT item_name,item_code FROM dishes WHERE category=?";
            prepstate = con.prepareStatement(sql);
            prepstate.setString(1, dishCategory);
            rs = prepstate.executeQuery();

            while(rs.next())
            {

                String dishname = rs.getString("item_name");
                String dishcode = rs.getString("item_code");

                dishname_jcb.addItem(dishname+" | "+dishcode);

            }

            dishname_jcb.setSelectedItem("");
           
        }
        catch(Exception e)
        {
            
            JOptionPane.showMessageDialog(this, "load_dishname_jcb() :"+e);
            
        }
        
        finally
        {
            
            try
            {
  
                rs.close();
                prepstate.close();
                con.close();
        
            }
            catch(Exception e)
            {
                
                JOptionPane.showMessageDialog(this, e);
                
            }
            
        }
        
    }
    
    private void get_billno()
    {
        
        Connection con = DatabaseConnection.createConnection();
        Statement stmt = null;
        ResultSet rs = null;
         
        try
        {
            boolean stat = false;
            ArrayList<Integer> arr = new ArrayList<Integer>();
            
            stmt = con.createStatement();
            rs = stmt.executeQuery("SELECT bill_no FROM billing ");
            
            while(rs.next())
            {

                stat = true;

                int receipt_no = Integer.parseInt(rs.getString("bill_no"));
                arr.add(receipt_no);
                

            }    
          
            if(stat == true)
            {
                
                int newreceipt_no = Collections.max(arr);
                billno_jtf.setText(Integer.toString(newreceipt_no+1));
                
            }
            
            if(stat==false)
            {
                
                billno_jtf.setText("1");
                
            }
          
             
        }
        catch(Exception e)
        {
             
            JOptionPane.showMessageDialog(null, e);
             
        }
        finally
        {

            try 
            {
                
                rs.close();
                stmt.close();
                con.close();

            } catch (SQLException ex) 
            {
                JOptionPane.showMessageDialog(null, ex);
            }

        }
        
    }
    
    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        // TODO add your handling code here:
       
       form_instance = null;
        
    }//GEN-LAST:event_formInternalFrameClosed

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        // TODO add your handling code here:
        
        form_instance = null;
        
    }//GEN-LAST:event_formInternalFrameClosing

    private void apply_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_apply_jbMouseClicked
        // TODO add your handling code here:
        
        if(apply_jb.isEnabled() == true)
        {
            if(validation_on_apply() == true)
            {

                apply_data();

            }
        }
            
        
    }//GEN-LAST:event_apply_jbMouseClicked

    void print_bill()
    {
        
        try 
        {
            
            DefaultTableModel model = (DefaultTableModel)items_table_jt.getModel();
            SimpleDateFormat sdf1 = new SimpleDateFormat("dd-MM-yyyy",Locale.getDefault());
            //DateFormat dateFormat = new SimpleDateFormat("hh:mm a");
            SimpleDateFormat sdf2 = new SimpleDateFormat("hh:mm a",Locale.getDefault());
            
            String source = "bill_print.jasper";
           
            InputStream is = getClass().getResourceAsStream(source);

            Map parameters = new HashMap();
            parameters.put("bill_no", billno_jtf.getText());
            parameters.put("date", sdf1.format(billdate_jdc.getDate()));
            parameters.put("sub_total", net_total_jtf.getText());
            parameters.put("tender", tender_jtf.getText());
            parameters.put("balance", balance_jtf.getText());
            parameters.put("time", sdf2.format(new Date()));
            parameters.put("LOGO", getClass().getResourceAsStream("ch_logo.png"));
            
           // parameters.put("logo", getClass().getResourceAsStream("ideal_emblem_2.png"));
           
            PrintRequestAttributeSet printRequestAttributes = new HashPrintRequestAttributeSet();
            printRequestAttributes.add(new Copies(2));
           
            JasperPrint print = JasperFillManager.fillReport(is, parameters, new JRTableModelDataSource(model));
            
            JasperViewer.viewReport(print,false);
            
            //JasperPrintManager.printReport(print,false); // Print directly
            
            
        } catch (Exception ex) 
        {
            
            
            JOptionPane.showMessageDialog(null, ex);
            
        }
        
    }
    
    boolean validation_on_save()
    {
        
        boolean valid = true;
        
        if(billdate_jdc.getDate() == null)
        {
            
            JOptionPane.showMessageDialog(this, "Enter A Valid Bill Date.", "Error", JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        else if(items_table_jt.getRowCount() == 0)
        {
            
            JOptionPane.showMessageDialog(this, "No Data Displayed.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        else if(tender_jtf.getText().equals(""))
        {
            
            JOptionPane.showMessageDialog(this, "Specify The Tender Amount.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        else if(new BigDecimal(net_total_jtf.getText()).compareTo(new BigDecimal(tender_jtf.getText())) == 1)
        {
            
            JOptionPane.showMessageDialog(this, "Tender Amount Specified is Less Than Amount To Pay.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
       
        return valid;
        
    }
    
    private void apply_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_apply_jbKeyPressed
        // TODO add your handling code here:
        
        if(apply_jb.isEnabled() == true)
        {
            if(evt.getKeyCode() == KeyEvent.VK_ENTER)
            {

                if(validation_on_apply() == true)
                {

                    apply_data();

                }

            }
        }
        
    }//GEN-LAST:event_apply_jbKeyPressed

    private void items_table_jtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_items_table_jtKeyPressed
        // TODO add your handling code here:

        if(evt.getKeyCode() == KeyEvent.VK_TAB)
        {

            dishname_jcb.requestFocusInWindow();

        }

    }//GEN-LAST:event_items_table_jtKeyPressed

    private void new_data_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_new_data_jbKeyPressed
        // TODO add your handling code here:

        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {

            new_data();

        }
        else if(evt.getKeyCode() == KeyEvent.VK_TAB)
        {

            tender_jtf.requestFocusInWindow();

        }

    }//GEN-LAST:event_new_data_jbKeyPressed

    private void new_data_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_new_data_jbMouseClicked
        // TODO add your handling code here:

        new_data();

    }//GEN-LAST:event_new_data_jbMouseClicked

    private void saveonly_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_saveonly_jbKeyPressed
        // TODO add your handling code here:

        if(saveonly_jb.isEnabled() == true)
        {
            if(evt.getKeyCode() == KeyEvent.VK_ENTER)
            {
                
                if(validation_on_save() == true)
                {
                 
                    save_only();
                
                }

            }
        }

    }//GEN-LAST:event_saveonly_jbKeyPressed

    private void saveonly_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveonly_jbMouseClicked
        // TODO add your handling code here:

        if(saveonly_jb.isEnabled() == true)
        {
            if(validation_on_save() == true)
            {

                if(validation_on_save() == true)
                {
                    
                    save_only();
                    
                }

            }

        }

    }//GEN-LAST:event_saveonly_jbMouseClicked

    private void save_print_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_save_print_jbKeyPressed
        // TODO add your handling code here:

        if(save_print_jb.isEnabled() == true)
        {

            if(evt.getKeyCode() == KeyEvent.VK_ENTER)
            {

                if(validation_on_save() == true)
                {
                    
                    save_and_print();

                }

            }

        }

    }//GEN-LAST:event_save_print_jbKeyPressed

    private void save_print_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_save_print_jbMouseClicked
        // TODO add your handling code here:

        if(save_print_jb.isEnabled() == true)
        {
            if(validation_on_save() == true)
            {

                save_and_print();

            }

        }

    }//GEN-LAST:event_save_print_jbMouseClicked

    private void jButton4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton4KeyPressed
        // TODO add your handling code here:

        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {

            this.dispose();

        }

    }//GEN-LAST:event_jButton4KeyPressed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:

        this.dispose();

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
        // TODO add your handling code here:

        this.dispose();

    }//GEN-LAST:event_jButton4MouseClicked

    private void quantity_jtfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_quantity_jtfKeyTyped
        // TODO add your handling code here:
        
        String qnty = quantity_jtf.getText();
        int lastindex = qnty.lastIndexOf(".");
        
       //System.out.println(lastindex);
       
        char c = evt.getKeyChar();

        if(!(Character.isDigit(c)||(c==KeyEvent.VK_BACK_SPACE)||c==KeyEvent.VK_DELETE||evt.getKeyChar() == '.'))
        {
            //  evt.getKeyChar() == '.' does accept point when jtextfield accepts decimal number
            evt.consume();
            getToolkit().beep();
        
        }
        else if(lastindex >= 0 && !Character.isDigit(c))
        {
            
             evt.consume();
            
        }
        
    }//GEN-LAST:event_quantity_jtfKeyTyped

    private void tender_jtfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tender_jtfKeyTyped
        // TODO add your handling code here:
        
        String tender = tender_jtf.getText();
        int lastindex = tender.lastIndexOf(".");
        
       //System.out.println(lastindex);
       
        char c = evt.getKeyChar();

        if(!(Character.isDigit(c)||(c==KeyEvent.VK_BACK_SPACE)||c==KeyEvent.VK_DELETE||evt.getKeyChar() == '.'))
        {
            //  evt.getKeyChar() == '.' does accept point when jtextfield accepts decimal number
            evt.consume();
            getToolkit().beep();
        
        }
        else if(lastindex >= 0 && !Character.isDigit(c))
        {
            
             evt.consume();
            
        }
        
    }//GEN-LAST:event_tender_jtfKeyTyped

    private void tender_jtfKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tender_jtfKeyReleased
        // TODO add your handling code here:
        
         get_balance();
        
        
    }//GEN-LAST:event_tender_jtfKeyReleased

    private void tender_jtfKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tender_jtfKeyPressed
        // TODO add your handling code here:
        
        if(evt.getKeyCode() == KeyEvent.VK_TAB)
        {
            
            save_print_jb.requestFocusInWindow();
            
        }
        
    }//GEN-LAST:event_tender_jtfKeyPressed

    private void jButton1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton1KeyPressed
        // TODO add your handling code here:
        
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            
            if(items_table_jt.getSelectedRowCount() ==  0)
            {

                JOptionPane.showMessageDialog(this, "No Rows Are Selected.","Error",JOptionPane.ERROR_MESSAGE);

            }
            else
            {

                DefaultTableModel dtm = (DefaultTableModel)items_table_jt.getModel();
                int selectrows[] = items_table_jt.getSelectedRows();

                for(int i = selectrows.length-1; i >= 0; i--)
                {

                    dtm.removeRow(selectrows[i]);

                }

            }
            
        }
        
    }//GEN-LAST:event_jButton1KeyPressed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        
        if(items_table_jt.getSelectedRowCount() ==  0)
        {

            JOptionPane.showMessageDialog(this, "No Rows Are Selected.","Error",JOptionPane.ERROR_MESSAGE);

        }
        else
        {

            DefaultTableModel dtm = (DefaultTableModel)items_table_jt.getModel();
            int selectrows[] = items_table_jt.getSelectedRows();

            for(int i = selectrows.length-1; i >= 0; i--)
            {

                dtm.removeRow(selectrows[i]);

            }

        }
        
    }//GEN-LAST:event_jButton1MouseClicked

    void save_only()
    {
        
        boolean error = false;
        boolean proc_complete = false;
        
        Connection con = DatabaseConnection.createConnection();
        PreparedStatement prepstate = null;
        
        try
        {
            
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd",Locale.getDefault());
            
            String bill_no = billno_jtf.getText();
            String bill_date = sdf.format(billdate_jdc.getDate());
            String paymode = "NA";
            
            int row_count = items_table_jt.getRowCount();
            
            for(int i = 0 ; i < row_count ; i ++)
            {
                
                String dish_name = items_table_jt.getValueAt(i, 2).toString();
                String dish_code = items_table_jt.getValueAt(i, 7).toString();
                String portion = items_table_jt.getValueAt(i, 3).toString();
                String rate = items_table_jt.getValueAt(i, 4).toString();
                String qnty = items_table_jt.getValueAt(i, 5).toString();
                String amount = items_table_jt.getValueAt(i, 6).toString();
                String net_amt = net_total_jtf.getText();
                String category = items_table_jt.getValueAt(i, 1).toString();
                
                String sql = "INSERT INTO billing(bill_no,bill_date,item_name,item_code,portion,price,quantity,amount,status,net_amount,pay_mode,item_category) VALUES(?,?,?,?,?,?,?,?,?,?,?,?)";
                prepstate = con.prepareStatement(sql);
                prepstate.setString(1, bill_no);
                prepstate.setString(2, bill_date);
                prepstate.setString(3, dish_name);
                prepstate.setString(4, dish_code);
                prepstate.setString(5, portion);
                prepstate.setString(6, rate);
                prepstate.setString(7, qnty);
                prepstate.setString(8, amount);
                prepstate.setString(9, "billed");
                prepstate.setString(10, net_amt);
                prepstate.setString(11, paymode);
                prepstate.setString(12, category);
                prepstate.execute();
                
                proc_complete = true;
                
            }
            
        }
        catch(Exception e)
        {
            
            JOptionPane.showMessageDialog(this, "save_data() :"+e);
            error = true;
            
        }
         finally
        {
            
            try
            {
               
                
                if(con != null)
                {
                    
                    con.close();
                    
                }
                if(prepstate != null)
                {
                    
                    prepstate.close();
                    
                }
                
            }
            catch(Exception e)
            {
                
                JOptionPane.showMessageDialog(this, e);
                
            }
            
        }
        
        if(error == false && proc_complete == true)
        {
            
            JOptionPane.showMessageDialog(this,"Operation Successful.","Success",JOptionPane.INFORMATION_MESSAGE);
            saveonly_jb.setEnabled(false);
            new_data_jb.requestFocusInWindow();
            
        }
        
        
    }
    
    void new_data()
    {
        
        dishname_jcb.removeActionListener(dishname_jcb_AL_obj);
        dishname_jcb.setSelectedItem("");
        dishname_jcb.addActionListener(dishname_jcb_AL_obj);
        
        portion_jcb.removeActionListener(portion_jcb_AL_obj);
        portion_jcb.addItem("");
        portion_jcb.setSelectedItem("");
        portion_jcb.addActionListener(portion_jcb_AL_obj);
        
        price_jtf.setText("");
        quantity_jtf.setText("");
        apply_jb.setEnabled(true);
        dishCategory_jcb.requestFocusInWindow();
        
        if(save_print_jb.isEnabled() == false)
        {
            
            clear_all();
            
        }
        
        if(saveonly_jb.isEnabled() == false)
        {
            
            clear_all();
            
        }
        
        get_billno();
        
    }
    
    void clear_all()
    {
        
        dishname_jcb.removeActionListener(dishname_jcb_AL_obj);
        dishname_jcb.setSelectedItem("");
        dishname_jcb.addActionListener(dishname_jcb_AL_obj);
        
        portion_jcb.removeActionListener(portion_jcb_AL_obj);
        portion_jcb.addItem("");
        portion_jcb.setSelectedItem("");
        portion_jcb.addActionListener(portion_jcb_AL_obj);
        
        price_jtf.setText("");
        quantity_jtf.setText("");
        apply_jb.setEnabled(true);
        dishname_jcb.requestFocusInWindow();
        
        totalno_jtf.setText("");
        net_total_jtf.setText("");
        tender_jtf.setText("");
        balance_jtf.setText("");
        
        ((DefaultTableModel)items_table_jt.getModel()).setRowCount(0);
        
    }
    
    void save_and_print()
    {
        
        boolean error = false;
        boolean proc_complete = false;
        
        Connection con = DatabaseConnection.createConnection();
        PreparedStatement prepstate = null;
        
        try
        {
            
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd",Locale.getDefault());
            
            String bill_no = billno_jtf.getText();
            String bill_date = sdf.format(billdate_jdc.getDate());
            String paymode = "NA";
            
            int row_count = items_table_jt.getRowCount();
            
            for(int i = 0 ; i < row_count ; i ++)
            {
                
                String dish_name = items_table_jt.getValueAt(i, 2).toString();
                String dish_code = items_table_jt.getValueAt(i, 7).toString();
                String portion = items_table_jt.getValueAt(i, 3).toString();
                String rate = items_table_jt.getValueAt(i, 4).toString();
                String qnty = items_table_jt.getValueAt(i, 5).toString();
                String amount = items_table_jt.getValueAt(i, 6).toString();
                String net_amt = net_total_jtf.getText();
                String category = items_table_jt.getValueAt(i, 1).toString();
                
                String sql = "INSERT INTO billing(bill_no,bill_date,item_name,item_code,portion,price,quantity,amount,status,net_amount,pay_mode,item_category) VALUES(?,?,?,?,?,?,?,?,?,?,?,?)";
                prepstate = con.prepareStatement(sql);
                prepstate.setString(1, bill_no);
                prepstate.setString(2, bill_date);
                prepstate.setString(3, dish_name);
                prepstate.setString(4, dish_code);
                prepstate.setString(5, portion);
                prepstate.setString(6, rate);
                prepstate.setString(7, qnty);
                prepstate.setString(8, amount);
                prepstate.setString(9, "billed");
                prepstate.setString(10, net_amt);
                prepstate.setString(11, paymode);
                prepstate.setString(12, category);
                prepstate.execute();
                
                proc_complete = true;
                
            }
            
        }
        catch(Exception e)
        {
            
            JOptionPane.showMessageDialog(this, "save_data() :"+e);
            error = true;
            
        }
         finally
        {
            
            try
            {
               
                
                if(con != null)
                {
                    
                    con.close();
                    
                }
                if(prepstate != null)
                {
                    
                    prepstate.close();
                    
                }
                
            }
            catch(Exception e)
            {
                
                JOptionPane.showMessageDialog(this, e);
                
            }
            
        }
        
        if(error == false && proc_complete == true)
        {
            
            JOptionPane.showMessageDialog(this,"Operation Successful.","Success",JOptionPane.INFORMATION_MESSAGE);
            save_print_jb.setEnabled(false);
            new_data_jb.requestFocusInWindow();
            print_bill();
            
            
        }
        
        
    }
    
    boolean validation_on_apply()
    {
        
        boolean valid = true;
        
        if(billdate_jdc.getDate() == null)
        {
            
            JOptionPane.showMessageDialog(this, "Enter A Valid Bill Date.", "Error", JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        else if(dishCategory_jcb.getSelectedIndex() == -1 || dishCategory_jcb.getSelectedItem() == null || dishCategory_jcb.getSelectedItem().toString().equals(""))
        {
            
            JOptionPane.showMessageDialog(this, "Select a valid Dish Category.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        else if(dishname_jcb.getSelectedIndex() == -1 || dishname_jcb.getSelectedItem() == null || dishname_jcb.getSelectedItem().toString().equals(""))
        {
            
            JOptionPane.showMessageDialog(this, "Select A Valid Dish.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        else if(portion_jcb.getSelectedIndex() == -1 || portion_jcb.getSelectedItem() == null || portion_jcb.getSelectedItem().toString().equals(""))
        {
            
            JOptionPane.showMessageDialog(this, "Select a Valid Portion.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        else if(quantity_jtf.getText().equals(""))
        {
            
            JOptionPane.showMessageDialog(this, "Specify Quantity.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        
        return valid;
        
    }
    
    void apply_data()
    {
        
        try
        {
            
            DefaultTableModel dtm = (DefaultTableModel)items_table_jt.getModel();
            
            String dishname_code = dishname_jcb.getSelectedItem().toString();
            String dish_code = (dishname_code.substring(dishname_code.lastIndexOf("|")+1,dishname_code.length())).trim();
            String dishname = (dishname_code.substring(0, dishname_code.lastIndexOf("|"))).trim();
            String category  = dishCategory_jcb.getSelectedItem().toString();
            String portion = portion_jcb.getSelectedItem().toString();
            String rate = price_jtf.getText();
            String qnty = quantity_jtf.getText();
            BigDecimal amount = new BigDecimal(rate).multiply(new BigDecimal(qnty)).setScale(2, RoundingMode.HALF_UP);
            String amount_str =  amount.toString();
            
            String[] arr = new String[]{Integer.toString(items_table_jt.getRowCount()+1),category,dishname,portion,rate,qnty,amount_str,dish_code};
            dtm.addRow(arr);
            
            get_totals();
            new_data_jb.requestFocusInWindow();
            apply_jb.setEnabled(false);
            
            if(save_print_jb.isEnabled() == false)
            {
                
                save_print_jb.setEnabled(true);
                
            }
            if(saveonly_jb.isEnabled() == false)
            {
                
                saveonly_jb.setEnabled(true);
                
            }
            
        }
        catch(Exception e)
        {
            
            JOptionPane.showMessageDialog(this,"apply_data() :"+e);
            
        }
    }
    
    void get_totals()
    {
        
        BigDecimal tot_amount = new BigDecimal("0");
        BigDecimal tot_amount_temp = new BigDecimal("0");
        
        int row_count = items_table_jt.getRowCount();
        
        for(int i = 0 ; i < row_count ; i ++)
        {
            
            tot_amount = new BigDecimal(items_table_jt.getValueAt(i, 6).toString()).add(tot_amount_temp);
            tot_amount_temp = tot_amount;
            
        }
        
        totalno_jtf.setText(Integer.toString(row_count));
        net_total_jtf.setText(tot_amount.toString());
        tender_jtf.setText(tot_amount.toString());
        
        get_balance();
        
    }
    
     void get_balance()
    {
        
        if(!net_total_jtf.getText().equals("") && !tender_jtf.getText().equals(".") && !tender_jtf.getText().equals(""))
        {

            BigDecimal netamt = new BigDecimal(net_total_jtf.getText());
            BigDecimal amtpaid = new BigDecimal(tender_jtf.getText());
            BigDecimal balance = netamt.subtract(amtpaid);

            balance_jtf.setText(balance.toString().replace("-","").trim());


        }
        else if(tender_jtf.getText().equals(""))
        {
            
             balance_jtf.setText("");
            
        }
        
    }
    
    class AL_dishname_jcb implements ActionListener
    {

        @Override
        public void actionPerformed(ActionEvent e) {
            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            
            Connection con = DatabaseConnection.createConnection();
            PreparedStatement prepstate = null;
            ResultSet rs = null;
            try
            {
              
                if(dishname_jcb.getSelectedItem() != null)
                {
                    portion_jcb.removeAllItems();

                    String dishname_code = dishname_jcb.getSelectedItem().toString();

                    String dish_code = (dishname_code.substring(dishname_code.lastIndexOf("|")+1,dishname_code.length())).trim();

                    //System.out.println(dish_code);

                    String sql = "SELECT portion FROM dishes WHERE item_code=? ";
                    prepstate = con.prepareStatement(sql);
                    prepstate.setString(1, dish_code);
                    rs = prepstate.executeQuery();
                    while(rs.next())
                    {

                        String portions = rs.getString("portion");
                        portion_jcb.addItem(portions);

                    }

                    portion_jcb.setSelectedItem("");
                    
                }
                
            }
            catch(Exception ex)
            {
                
                JOptionPane.showMessageDialog(null, ex);
                
            }
            finally
            {
                
                try
                {
                    
                    if(rs != null)
                    {
                        
                        rs.close();
                        
                    }
                    if(prepstate != null)
                    {
                        
                        prepstate.close();
                        
                    }
                    if(con != null)
                    {
                        
                        con.close();
                        
                    }
                    
                }
                catch(Exception exx)
                {
                    
                    JOptionPane.showMessageDialog(null, exx);
                    
                }
                
            }
            
            
        }
         
    }
    
    class AL_portion_jcb implements ActionListener
    {

        @Override
        public void actionPerformed(ActionEvent e) {
            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            
            Connection con = DatabaseConnection.createConnection();
            PreparedStatement prepstate = null;
            ResultSet rs = null;
            price_jtf.setText("");
            
            try
            {
             
                if(dishname_jcb.getSelectedItem() != null && portion_jcb.getSelectedItem() != null)
                {
                    String dishname_code = dishname_jcb.getSelectedItem().toString();

                    String dish_code = (dishname_code.substring(dishname_code.lastIndexOf("|")+1,dishname_code.length())).trim();

                    String portion = portion_jcb.getSelectedItem().toString();
    
                    String sql = "SELECT price FROM dishes WHERE item_code=? AND portion=? ";
                    prepstate = con.prepareStatement(sql);
                    prepstate.setString(1, dish_code);
                    prepstate.setString(2, portion);
                    rs = prepstate.executeQuery();
                    while(rs.next())
                    {
    
                        String price = rs.getString("price");
                        price_jtf.setText(price);
    
                    }
                }
               
            }
            catch(Exception ex)
            {
                
                JOptionPane.showMessageDialog(null, ex);
                
            }
            finally
            {
                
                try
                {
                    
                    if(rs != null)
                    {
                        
                        rs.close();
                        
                    }
                    if(prepstate != null)
                    {
                        
                        prepstate.close();
                        
                    }
                    if(con != null)
                    {
                        
                        con.close();
                        
                    }
                    
                }
                catch(Exception exx)
                {
                    
                    JOptionPane.showMessageDialog(null, exx);
                    
                }
                
            } 
        }
         
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton apply_jb;
    private javax.swing.JTextField balance_jtf;
    private com.toedter.calendar.JDateChooser billdate_jdc;
    private javax.swing.JTextField billno_jtf;
    private javax.swing.JComboBox<String> dishCategory_jcb;
    public static javax.swing.JComboBox dishname_jcb;
    private javax.swing.JTable items_table_jt;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTextField net_total_jtf;
    private javax.swing.JButton new_data_jb;
    private javax.swing.JComboBox portion_jcb;
    private javax.swing.JTextField price_jtf;
    private javax.swing.JTextField quantity_jtf;
    private javax.swing.JButton save_print_jb;
    private javax.swing.JButton saveonly_jb;
    private javax.swing.JTextField tender_jtf;
    private javax.swing.JTextField totalno_jtf;
    // End of variables declaration//GEN-END:variables
}
