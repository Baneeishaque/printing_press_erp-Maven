package DSST007_1_CUS13.pll;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author praveen
 */
public class Restaurant_Billing_Edit extends javax.swing.JInternalFrame {

    private static Restaurant_Billing_Edit form_instance;
    String tableid;
    int save_status = 0;
    AL_dishname_jcb dishname_jcb_AL_obj = new AL_dishname_jcb();
    AL_portion_jcb portion_jcb_AL_obj = new AL_portion_jcb();
    
    LSL_items_table_jt_ items_table_jt_LSL_Obj = new LSL_items_table_jt_();
    AL_dishCategory_jcb dishCategory_AL_Obj = new AL_dishCategory_jcb();
    
    public Restaurant_Billing_Edit() {
        initComponents();
    }

    public static Restaurant_Billing_Edit getInstance()
    {
        
        if (form_instance == null)
            form_instance = new Restaurant_Billing_Edit();

        return form_instance;
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        close_jb = new javax.swing.JButton();
        print_jb = new javax.swing.JButton();
        update_jb = new javax.swing.JButton();
        edit_jb = new javax.swing.JButton();
        cancelbill_jb = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        dishname_jcb = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        portion_jcb = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        price_jtf = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        quantity_jtf = new javax.swing.JTextField();
        apply_jb = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        billdate_jdc = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        items_table_jt = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        net_total_jtf = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        totalno_jtf = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        tender_jtf = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        balance_jtf = new javax.swing.JTextField();
        remove_jb = new javax.swing.JButton();
        showbilldetails_jb = new javax.swing.JButton();
        billno_jcb = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        status_jl = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        billno_jtf = new javax.swing.JTextField();
        newDish_jchkbx = new javax.swing.JCheckBox();
        jLabel14 = new javax.swing.JLabel();
        dishCategory_jcb = new javax.swing.JComboBox<>();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255)));
        setClosable(true);
        setIconifiable(true);
        setTitle("View/Edit - > Bills");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/DSST007_1_CUS13/InstabizTrader Logo Final 35x35.png"))); // NOI18N
        addInternalFrameListener(new javax.swing.event.InternalFrameListener()
        {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt)
            {
                formInternalFrameOpened(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt)
            {
                formInternalFrameClosing(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt)
            {
                formInternalFrameClosed(evt);
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt)
            {
            }
        });

        jPanel1.setBackground(new java.awt.Color(242, 242, 255));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel2.setBackground(new java.awt.Color(242, 242, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new java.awt.GridBagLayout());

        close_jb.setBackground(new java.awt.Color(86, 132, 191));
        close_jb.setMnemonic('s');
        close_jb.setText("Close");
        close_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        close_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                close_jbMouseClicked(evt);
            }
        });
        close_jb.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                close_jbActionPerformed(evt);
            }
        });
        close_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                close_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 15, 0);
        jPanel2.add(close_jb, gridBagConstraints);

        print_jb.setBackground(new java.awt.Color(185, 197, 31));
        print_jb.setText("Print");
        print_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        print_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                print_jbMouseClicked(evt);
            }
        });
        print_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                print_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 15, 0);
        jPanel2.add(print_jb, gridBagConstraints);

        update_jb.setBackground(new java.awt.Color(185, 197, 31));
        update_jb.setText("Update");
        update_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        update_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                update_jbMouseClicked(evt);
            }
        });
        update_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                update_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 15, 0);
        jPanel2.add(update_jb, gridBagConstraints);

        edit_jb.setBackground(new java.awt.Color(185, 197, 31));
        edit_jb.setText("Edit");
        edit_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        edit_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                edit_jbMouseClicked(evt);
            }
        });
        edit_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                edit_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 15, 0);
        jPanel2.add(edit_jb, gridBagConstraints);

        cancelbill_jb.setBackground(new java.awt.Color(185, 197, 31));
        cancelbill_jb.setForeground(new java.awt.Color(255, 51, 51));
        cancelbill_jb.setText("Cancel Bill");
        cancelbill_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        cancelbill_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                cancelbill_jbMouseClicked(evt);
            }
        });
        cancelbill_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                cancelbill_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 15, 0);
        jPanel2.add(cancelbill_jb, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 18;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(jPanel2, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel1.setText("Dish Name :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 0, 0);
        jPanel1.add(jLabel1, gridBagConstraints);

        dishname_jcb.setEditable(true);
        dishname_jcb.setPreferredSize(new java.awt.Dimension(250, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 3, 0);
        jPanel1.add(dishname_jcb, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel2.setText("Portion :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 0, 0);
        jPanel1.add(jLabel2, gridBagConstraints);

        portion_jcb.setPreferredSize(new java.awt.Dimension(200, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 7, 0);
        jPanel1.add(portion_jcb, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel3.setText("Price :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 0, 0);
        jPanel1.add(jLabel3, gridBagConstraints);

        price_jtf.setEditable(false);
        price_jtf.setBackground(new java.awt.Color(242, 242, 255));
        price_jtf.setFocusable(false);
        price_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(price_jtf, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel4.setText("Quantity :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 7, 0);
        jPanel1.add(jLabel4, gridBagConstraints);

        quantity_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        quantity_jtf.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyTyped(java.awt.event.KeyEvent evt)
            {
                quantity_jtfKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 7, 0);
        jPanel1.add(quantity_jtf, gridBagConstraints);

        apply_jb.setBackground(new java.awt.Color(185, 197, 31));
        apply_jb.setText("Apply >>");
        apply_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        apply_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                apply_jbMouseClicked(evt);
            }
        });
        apply_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                apply_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel1.add(apply_jb, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel7.setText("Bill No :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 7, 0, 0);
        jPanel1.add(jLabel7, gridBagConstraints);

        jLabel8.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel8.setText("Bill Date :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 0, 0);
        jPanel1.add(jLabel8, gridBagConstraints);

        billdate_jdc.setBackground(new java.awt.Color(242, 242, 255));
        billdate_jdc.setDateFormatString("dd-MMM-yyyy");
        billdate_jdc.setPreferredSize(new java.awt.Dimension(140, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 3, 0);
        jPanel1.add(billdate_jdc, gridBagConstraints);

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setPreferredSize(new java.awt.Dimension(803, 420));

        items_table_jt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        items_table_jt.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        items_table_jt.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "SNo", "Category", "DishName", "Portion", "Rate", "Qnty", "Amount", "ItemCode", "Id"
            }
        )
        {
            boolean[] canEdit = new boolean []
            {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        items_table_jt.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        items_table_jt.setFillsViewportHeight(true);
        items_table_jt.setRowHeight(23);
        items_table_jt.setSelectionBackground(new java.awt.Color(86, 132, 191));
        items_table_jt.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        items_table_jt.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                items_table_jtFocusLost(evt);
            }
            public void focusGained(java.awt.event.FocusEvent evt)
            {
                items_table_jtFocusGained(evt);
            }
        });
        items_table_jt.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                items_table_jtKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(items_table_jt);
        if (items_table_jt.getColumnModel().getColumnCount() > 0)
        {
            items_table_jt.getColumnModel().getColumn(0).setMinWidth(50);
            items_table_jt.getColumnModel().getColumn(0).setPreferredWidth(50);
            items_table_jt.getColumnModel().getColumn(1).setMinWidth(150);
            items_table_jt.getColumnModel().getColumn(1).setPreferredWidth(150);
            items_table_jt.getColumnModel().getColumn(2).setMinWidth(200);
            items_table_jt.getColumnModel().getColumn(2).setPreferredWidth(200);
            items_table_jt.getColumnModel().getColumn(3).setMinWidth(120);
            items_table_jt.getColumnModel().getColumn(3).setPreferredWidth(120);
            items_table_jt.getColumnModel().getColumn(4).setMinWidth(90);
            items_table_jt.getColumnModel().getColumn(4).setPreferredWidth(90);
            items_table_jt.getColumnModel().getColumn(5).setMinWidth(70);
            items_table_jt.getColumnModel().getColumn(5).setPreferredWidth(70);
            items_table_jt.getColumnModel().getColumn(6).setMinWidth(100);
            items_table_jt.getColumnModel().getColumn(6).setPreferredWidth(100);
            items_table_jt.getColumnModel().getColumn(7).setMinWidth(0);
            items_table_jt.getColumnModel().getColumn(7).setPreferredWidth(0);
            items_table_jt.getColumnModel().getColumn(7).setMaxWidth(0);
            items_table_jt.getColumnModel().getColumn(8).setMinWidth(0);
            items_table_jt.getColumnModel().getColumn(8).setPreferredWidth(0);
            items_table_jt.getColumnModel().getColumn(8).setMaxWidth(0);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 17;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel1.add(jScrollPane1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 15, 2);
        jPanel1.add(jSeparator1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 0, 2);
        jPanel1.add(jSeparator3, gridBagConstraints);

        jPanel3.setBackground(new java.awt.Color(242, 242, 255));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabel9.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel9.setText("Total No :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel3.add(jLabel9, gridBagConstraints);

        net_total_jtf.setEditable(false);
        net_total_jtf.setBackground(new java.awt.Color(255, 204, 51));
        net_total_jtf.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        net_total_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel3.add(net_total_jtf, gridBagConstraints);

        jLabel10.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel10.setText("Net Total :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 183, 0, 0);
        jPanel3.add(jLabel10, gridBagConstraints);

        totalno_jtf.setEditable(false);
        totalno_jtf.setBackground(new java.awt.Color(242, 242, 255));
        totalno_jtf.setFocusable(false);
        totalno_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel3.add(totalno_jtf, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel5.setText("Tender :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel3.add(jLabel5, gridBagConstraints);

        tender_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        tender_jtf.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                tender_jtfKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                tender_jtfKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt)
            {
                tender_jtfKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel3.add(tender_jtf, gridBagConstraints);

        jLabel6.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel6.setText("Balance :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel3.add(jLabel6, gridBagConstraints);

        balance_jtf.setEditable(false);
        balance_jtf.setBackground(new java.awt.Color(255, 204, 51));
        balance_jtf.setFocusable(false);
        balance_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel3.add(balance_jtf, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 8, 5);
        jPanel1.add(jPanel3, gridBagConstraints);

        remove_jb.setBackground(new java.awt.Color(185, 197, 31));
        remove_jb.setForeground(new java.awt.Color(255, 51, 51));
        remove_jb.setText("<<Remove");
        remove_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        remove_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                remove_jbMouseClicked(evt);
            }
        });
        remove_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                remove_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        jPanel1.add(remove_jb, gridBagConstraints);

        showbilldetails_jb.setBackground(new java.awt.Color(185, 197, 31));
        showbilldetails_jb.setText("Show >>");
        showbilldetails_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        showbilldetails_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                showbilldetails_jbMouseClicked(evt);
            }
        });
        showbilldetails_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                showbilldetails_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(showbilldetails_jb, gridBagConstraints);

        billno_jcb.setEditable(true);
        billno_jcb.setPreferredSize(new java.awt.Dimension(140, 25));
        billno_jcb.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                billno_jcbActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(billno_jcb, gridBagConstraints);

        jLabel12.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel12.setText("Status :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 7, 0, 0);
        jPanel1.add(jLabel12, gridBagConstraints);

        status_jl.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        status_jl.setText("--");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(status_jl, gridBagConstraints);

        jLabel13.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel13.setText("Bill No :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        jPanel1.add(jLabel13, gridBagConstraints);

        billno_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        billno_jtf.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyTyped(java.awt.event.KeyEvent evt)
            {
                billno_jtfKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(billno_jtf, gridBagConstraints);

        newDish_jchkbx.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        newDish_jchkbx.setForeground(new java.awt.Color(204, 51, 0));
        newDish_jchkbx.setText("New Dish >>");
        newDish_jchkbx.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                newDish_jchkbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 0);
        jPanel1.add(newDish_jchkbx, gridBagConstraints);

        jLabel14.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel14.setText("Category :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 0, 0);
        jPanel1.add(jLabel14, gridBagConstraints);

        dishCategory_jcb.setEditable(true);
        dishCategory_jcb.setPreferredSize(new java.awt.Dimension(200, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 3, 0);
        jPanel1.add(dishCategory_jcb, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:

        Dimension desktopSize = NewMDIApplication.desktopbg_jlbl.getSize();
        Dimension jInternalFrameSize = this.getSize();
        this.setLocation((desktopSize.width - jInternalFrameSize.width)/2,(desktopSize.height- jInternalFrameSize.height)/2);

        //--------------------------------------------------------------------------------
        
        get_billno();
        AutoCompleteDecorator.decorate(billno_jcb);
        
        load_dishCategory_jcb();
        AutoCompleteDecorator.decorate(dishCategory_jcb);
       
        AutoCompleteDecorator.decorate(dishname_jcb);
        
        dishCategory_jcb.addActionListener(dishCategory_AL_Obj);

        dishname_jcb.addActionListener(dishname_jcb_AL_obj);
        
        portion_jcb.addActionListener(portion_jcb_AL_obj);

        items_table_jt.setFocusTraversalKeysEnabled(false);
        
        edit_jb.setFocusTraversalKeysEnabled(false);
        
        tender_jtf.setFocusTraversalKeysEnabled(false);
        
        disable_editable_fields();
        
        showbilldetails_jb.setFocusTraversalKeysEnabled(false);
        
        close_jb.setFocusTraversalKeysEnabled(false);
        
    }//GEN-LAST:event_formInternalFrameOpened
  
     private void load_dishCategory_jcb()
    {
        
        Connection con = DatabaseConnection.createConnection();
        PreparedStatement prepstate = null;
        ResultSet rs = null;
        
        try
        {
            
            String sql = "SELECT DISTINCT category FROM dishes";
            prepstate = con.prepareStatement(sql);
            rs = prepstate.executeQuery();
            
            while(rs.next())
            {
                
                String dishCategory = rs.getString("category");
                dishCategory_jcb.addItem(dishCategory);
               
            }
            
            dishCategory_jcb.setSelectedItem("");
           
        }
        catch(Exception e)
        {
            
            JOptionPane.showMessageDialog(this, "load_dishCategory_jcb() :"+e);
            
        }
        
        finally
        {
            
            try
            {
  
                rs.close();
                prepstate.close();
                con.close();
        
            }
            catch(Exception e)
            {
                
                JOptionPane.showMessageDialog(this, e);
                
            }
            
        }
        
    }
    
    class AL_dishCategory_jcb implements ActionListener
    {

        @Override
        public void actionPerformed(ActionEvent ae) {
            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        
            getDishNames();
        
        }
        
    }
    
    private void getDishNames()
    {
        
        Connection con = DatabaseConnection.createConnection();
        PreparedStatement prepstate = null;
        ResultSet rs = null;
        
        try
        {
            
            dishname_jcb.removeAllItems();
            
            if(dishCategory_jcb.getSelectedItem() != null)
            {

                String dishCategory = dishCategory_jcb.getSelectedItem().toString();

                String sql = "SELECT DISTINCT item_name,item_code FROM dishes WHERE category=?";
                prepstate = con.prepareStatement(sql);
                prepstate.setString(1, dishCategory);
                rs = prepstate.executeQuery();

                while(rs.next())
                {

                    String dishname = rs.getString("item_name");
                    String dishcode = rs.getString("item_code");

                    String dishnameCode = dishname+" | "+dishcode;

                    dishname_jcb.addItem(dishnameCode);

                }
            }

            dishname_jcb.setSelectedItem("");
           
        }
        catch(Exception e)
        {
            
            JOptionPane.showMessageDialog(this, "getDishNames() :"+e);
            
        }
        
        finally
        {
            
            try
            {
  
                rs.close();
                prepstate.close();
                con.close();
        
            }
            catch(Exception e)
            {
                
                JOptionPane.showMessageDialog(this, e);
                
            }
            
        }
        
    }
     
    void disable_editable_fields()
    {
        
        billdate_jdc.setEnabled(false);
        billno_jtf.setEnabled(false);
        dishname_jcb.setEnabled(false);
        dishCategory_jcb.setEnabled(false);
        portion_jcb.setEnabled(false);
        price_jtf.setEnabled(false);
        quantity_jtf.setEnabled(false);
        apply_jb.setEnabled(false);
        remove_jb.setEnabled(false);
        print_jb.setEnabled(false);
        update_jb.setEnabled(false);
        edit_jb.setEnabled(true);
        cancelbill_jb.setEnabled(false);
         
    }
    
    void enable_editable_fields()
    {
        
        billdate_jdc.setEnabled(true);
        ((JTextField)billdate_jdc.getDateEditor().getUiComponent()).setBackground(Color.white);
        billno_jtf.setEnabled(true);
        dishname_jcb.setEnabled(true);
        dishCategory_jcb.setEnabled(true);
        portion_jcb.setEnabled(true);
        price_jtf.setEnabled(true);
        quantity_jtf.setEnabled(true);
        apply_jb.setEnabled(true);
        remove_jb.setEnabled(true);
        print_jb.setEnabled(true);
        update_jb.setEnabled(true);
        edit_jb.setEnabled(false);
        cancelbill_jb.setEnabled(true);
        
    }
    
    void load_portion_jcb()
    {
        
        Connection con = DatabaseConnection.createConnection();
        PreparedStatement prepstate = null;
        ResultSet rs = null;
        
        try
        {
            
            portion_jcb.removeAllItems();
            
            String dishname_code = dishname_jcb.getSelectedItem().toString();
            String dish_code = (dishname_code.substring(dishname_code.lastIndexOf("|")+1,dishname_code.length())).trim();
            
            String sql = "SELECT DISTINCT portion FROM dishes WHERE item_code = '"+dish_code+"'";
            prepstate = con.prepareStatement(sql);
            rs = prepstate.executeQuery();
            
            while(rs.next())
            {
                
                String portionname = rs.getString("portion");
                
                portion_jcb.addItem(portionname);
              
            }
            
            portion_jcb.setSelectedItem("");
            
        }
        catch(Exception e)
        {
            
            JOptionPane.showMessageDialog(this, "load_portion_jcb() :"+e);
            
        }
        
        finally
        {
            
            try
            {
               
                
                if(con != null)
                {
                    
                    con.close();
                    
                }
                if(prepstate != null)
                {
                    
                    prepstate.close();
                    
                }
                if(rs != null)
                {
                    
                    rs.close();
                    
                }
                
            }
            catch(Exception e)
            {
                
                JOptionPane.showMessageDialog(this, e);
                
            }
            
        }
        
    }
    
    void load_dishname_jcb()
    {
        
        Connection con = DatabaseConnection.createConnection();
        PreparedStatement prepstate = null;
        ResultSet rs = null;
        
        try
        {
            
            String sql = "SELECT DISTINCT item_name,item_code FROM dishes";
            prepstate = con.prepareStatement(sql);
            rs = prepstate.executeQuery();
            
            while(rs.next())
            {
                
                String dishname = rs.getString("item_name");
                String dishcode = rs.getString("item_code");
               
                dishname_jcb.addItem(dishname+" | "+dishcode);
               
            }
            
            dishname_jcb.setSelectedItem("");
           
        }
        catch(Exception e)
        {
            
            JOptionPane.showMessageDialog(this, "load_dishname_jcb() :"+e);
            
        }
        
        finally
        {
            
            try
            {
  
                rs.close();
                prepstate.close();
                con.close();
        
            }
            catch(Exception e)
            {
                
                JOptionPane.showMessageDialog(this, e);
                
            }
            
        }
        
    }
    
    private void get_billno()
    {
        
        Connection con = DatabaseConnection.createConnection();
        Statement stmt = null;
        ResultSet rs = null;
         
        try
        {
           
            billno_jcb.removeAllItems();
            
            stmt = con.createStatement();
            rs = stmt.executeQuery("SELECT DISTINCT bill_no FROM billing ");
            
            while(rs.next())
            {
                
                String billno = rs.getString("bill_no");
                
                billno_jcb.addItem(billno);

            }    
         
            billno_jcb.setSelectedItem("");
             
        }
        catch(Exception e)
        {
             
            JOptionPane.showMessageDialog(this,"get_billno(): "+e);
             
        }
        finally
        {

            try 
            {
                
                rs.close();
                stmt.close();
                con.close();

            } catch (SQLException ex) 
            {
                JOptionPane.showMessageDialog(null, ex);
            }

        }
        
    }
    
    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        // TODO add your handling code here:
       
       form_instance = null;
        
    }//GEN-LAST:event_formInternalFrameClosed

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        // TODO add your handling code here:
        
        form_instance = null;
        
    }//GEN-LAST:event_formInternalFrameClosing

    private void apply_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_apply_jbMouseClicked
        // TODO add your handling code here:
        
        if(apply_jb.isEnabled() == true)
        {

            if(newDish_jchkbx.isSelected() == true)
            {
                if(validation_on_newApply() == true)
                {
                    applyNewData();
                }

            }
            else
            {
                if(validation_on_apply() == true)
                {
                    apply_data();
                }

            }

        }
            
        
    }//GEN-LAST:event_apply_jbMouseClicked

    private void applyNewData()
    {
        
        try
        {
            
            DefaultTableModel dtm = (DefaultTableModel)items_table_jt.getModel();
            
            String dishname_code = dishname_jcb.getSelectedItem().toString();
            String dish_code = (dishname_code.substring(dishname_code.lastIndexOf("|")+1,dishname_code.length())).trim();
            String dishname = (dishname_code.substring(0, dishname_code.lastIndexOf("|"))).trim();
            String category = dishCategory_jcb.getSelectedItem().toString();
            String portion = portion_jcb.getSelectedItem().toString();
            String rate = price_jtf.getText();
            String qnty = quantity_jtf.getText();
            BigDecimal amount = new BigDecimal(rate).multiply(new BigDecimal(qnty)).setScale(2, RoundingMode.HALF_UP);
            String amount_str =  amount.toString();
           
            String[] newRowStrArr = new String[]{Integer.toString(dtm.getRowCount()+1),category,dishname,portion,rate,qnty,amount_str,dish_code};
            dtm.addRow(newRowStrArr);
            
            get_totals();
            items_table_jt.requestFocusInWindow();
          
        }
        catch(Exception e)
        {
            
            JOptionPane.showMessageDialog(this,"apply_data() :"+e);
            
        }
        
    }
    
    void print_bill()
    {
        
        try 
        {
            
            DefaultTableModel model = (DefaultTableModel)items_table_jt.getModel();
            SimpleDateFormat sdf1 = new SimpleDateFormat("dd-MM-yyyy",Locale.getDefault());
            //DateFormat dateFormat = new SimpleDateFormat("hh:mm a");
            SimpleDateFormat sdf2 = new SimpleDateFormat("hh:mm a",Locale.getDefault());
            
            String source = "bill_print.jasper";
           
            InputStream is = getClass().getResourceAsStream(source);

            Map parameters = new HashMap();
            parameters.put("bill_no", billno_jcb.getSelectedItem().toString());
            parameters.put("date", sdf1.format(billdate_jdc.getDate()));
            parameters.put("sub_total", net_total_jtf.getText());
            parameters.put("tender", tender_jtf.getText());
            parameters.put("balance", balance_jtf.getText());
            parameters.put("time", sdf2.format(new Date()));
            parameters.put("LOGO", getClass().getResourceAsStream("ch_logo.png"));
           // parameters.put("logo", getClass().getResourceAsStream("ideal_emblem_2.png"));
           
            JasperPrint print = JasperFillManager.fillReport(is, parameters, new JRTableModelDataSource(model));
            
            JasperViewer.viewReport(print,false);
            
            //JasperPrintManager.printReport(print,false); // Print directly
            
            
        } catch (Exception ex) 
        {
            
            
            JOptionPane.showMessageDialog(this,"print_bill(): "+ex);
            
        }
        
    }
    
    boolean validation_on_save()
    {
        
        boolean valid = true;
        
        if(items_table_jt.getRowCount() == 0)
        {
            
            JOptionPane.showMessageDialog(this, "No Data Displayed.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        else if(billdate_jdc.getDate() == null)
        {
            
            JOptionPane.showMessageDialog(this, "Enter A Valid Bill Date.", "Error", JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        else if(billno_jtf.getText().equals(""))
        {
            
            JOptionPane.showMessageDialog(this, "Enter a Valid Bill No.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        else if(quantity_jtf.getText().equals(""))
        {
            
            JOptionPane.showMessageDialog(this, "Enter a Valid Quantity.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        else if(tender_jtf.getText().equals(""))
        {
            
            JOptionPane.showMessageDialog(this, "Specify The Tender Amount.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        else if(new BigDecimal(net_total_jtf.getText()).compareTo(new BigDecimal(tender_jtf.getText())) == 1)
        {
            
            JOptionPane.showMessageDialog(this, "Tender Amount Specified is Less Than Amount To Pay.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        
        return valid;
        
    }
    
    private void apply_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_apply_jbKeyPressed
        // TODO add your handling code here:
        
        if(apply_jb.isEnabled() == true)
        {
            if(evt.getKeyCode() == KeyEvent.VK_ENTER)
            {

                if(newDish_jchkbx.isSelected() == true)
                {
                    if(validation_on_newApply() == true)
                    {
                        applyNewData();
                    }

                }
                else
                {
                    if(validation_on_apply() == true)
                    {
                        apply_data();
                    }

                }

            }
            
        }
        
    }//GEN-LAST:event_apply_jbKeyPressed

    private void items_table_jtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_items_table_jtKeyPressed
        // TODO add your handling code here:

        if(evt.getKeyCode() == KeyEvent.VK_TAB)
        {
            if(edit_jb.isEnabled() == true)
            {
                
                edit_jb.requestFocusInWindow();
                
            }
            else
            {
                
                print_jb.requestFocusInWindow();
                
            }

        }

    }//GEN-LAST:event_items_table_jtKeyPressed

    private void edit_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edit_jbKeyPressed
        // TODO add your handling code here:

        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            if(validation_on_edit() == true)
            {
                edit_mode();
            }

        }
        else if(evt.getKeyCode() == KeyEvent.VK_TAB)
        {

            tender_jtf.requestFocusInWindow();

        }

    }//GEN-LAST:event_edit_jbKeyPressed

    private void edit_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_edit_jbMouseClicked
        // TODO add your handling code here:

        if(validation_on_edit() == true)
        {
            edit_mode();
        }

    }//GEN-LAST:event_edit_jbMouseClicked

    private void update_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_update_jbKeyPressed
        // TODO add your handling code here:

        if(update_jb.isEnabled() == true)
        {
            if(evt.getKeyCode() == KeyEvent.VK_ENTER)
            {
                
                if(validation_on_save() == true)
                {
                 
                    save_only();
                
                }

            }
        }

    }//GEN-LAST:event_update_jbKeyPressed

    private void update_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_update_jbMouseClicked
        // TODO add your handling code here:

        if(update_jb.isEnabled() == true)
        {
            if(validation_on_save() == true)
            {

                if(validation_on_save() == true)
                {
                    
                    save_only();
                    
                }

            }

        }

    }//GEN-LAST:event_update_jbMouseClicked

    private void print_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_print_jbKeyPressed
        // TODO add your handling code here:

        if(print_jb.isEnabled() == true)
        {

            if(evt.getKeyCode() == KeyEvent.VK_ENTER)
            {
                    
                print_bill();

            }

        }

    }//GEN-LAST:event_print_jbKeyPressed

    private void print_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_print_jbMouseClicked
        // TODO add your handling code here:

        if(print_jb.isEnabled() == true)
        {
          
            print_bill();

        }

    }//GEN-LAST:event_print_jbMouseClicked

    private void close_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_close_jbKeyPressed
        // TODO add your handling code here:

        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {

            this.dispose();

        }
        else if(evt.getKeyCode() == KeyEvent.VK_TAB)
        {
            
            billno_jcb.requestFocusInWindow();
            
        }

    }//GEN-LAST:event_close_jbKeyPressed

    private void close_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_close_jbActionPerformed
        // TODO add your handling code here:

        this.dispose();

    }//GEN-LAST:event_close_jbActionPerformed

    private void close_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_close_jbMouseClicked
        // TODO add your handling code here:

        this.dispose();

    }//GEN-LAST:event_close_jbMouseClicked

    private void quantity_jtfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_quantity_jtfKeyTyped
        // TODO add your handling code here:
        
        String qnty = quantity_jtf.getText();
        int lastindex = qnty.lastIndexOf(".");
        
       //System.out.println(lastindex);
       
        char c = evt.getKeyChar();

        if(!(Character.isDigit(c)||(c==KeyEvent.VK_BACK_SPACE)||c==KeyEvent.VK_DELETE||evt.getKeyChar() == '.'))
        {
            //  evt.getKeyChar() == '.' does accept point when jtextfield accepts decimal number
            evt.consume();
            getToolkit().beep();
        
        }
        else if(lastindex >= 0 && !Character.isDigit(c))
        {
            
             evt.consume();
            
        }
        
    }//GEN-LAST:event_quantity_jtfKeyTyped

    private void tender_jtfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tender_jtfKeyTyped
        // TODO add your handling code here:
        
        String tender = tender_jtf.getText();
        int lastindex = tender.lastIndexOf(".");
        
       //System.out.println(lastindex);
       
        char c = evt.getKeyChar();

        if(!(Character.isDigit(c)||(c==KeyEvent.VK_BACK_SPACE)||c==KeyEvent.VK_DELETE||evt.getKeyChar() == '.'))
        {
            //  evt.getKeyChar() == '.' does accept point when jtextfield accepts decimal number
            evt.consume();
            getToolkit().beep();
        
        }
        else if(lastindex >= 0 && !Character.isDigit(c))
        {
            
             evt.consume();
            
        }
        
    }//GEN-LAST:event_tender_jtfKeyTyped

    private void tender_jtfKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tender_jtfKeyReleased
        // TODO add your handling code here:
        
        get_balance();      
        
    }//GEN-LAST:event_tender_jtfKeyReleased

    void get_balance()
    {
        
        try
        {
            if(!net_total_jtf.getText().equals("") && !tender_jtf.getText().equals(".") && !tender_jtf.getText().equals(""))
            {

                BigDecimal netamt = new BigDecimal(net_total_jtf.getText());
                BigDecimal amtpaid = new BigDecimal(tender_jtf.getText());
                BigDecimal balance = netamt.subtract(amtpaid);

                balance_jtf.setText(balance.toString().replace("-","").trim());


            }
            else if(tender_jtf.getText().equals(""))
            {

                 balance_jtf.setText("");

            }
            
        }catch(Exception e)
        {
            
            JOptionPane.showMessageDialog(this, "get_balance(): "+e);
            
        }
        
        
    }
    
    private void tender_jtfKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tender_jtfKeyPressed
        // TODO add your handling code here:
        
        if(evt.getKeyCode() == KeyEvent.VK_TAB && print_jb.isEnabled() == true)
        {
            
            print_jb.requestFocusInWindow();
            
        }
        else
        {
            
            close_jb.requestFocusInWindow();
            
        }
        
    }//GEN-LAST:event_tender_jtfKeyPressed

    private void remove_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_remove_jbKeyPressed
        // TODO add your handling code here:
        
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            
            if(items_table_jt.getSelectedRowCount() ==  0)
            {

                JOptionPane.showMessageDialog(this, "No Rows Are Selected.","Error",JOptionPane.ERROR_MESSAGE);

            }
            else
            {

                DefaultTableModel dtm = (DefaultTableModel)items_table_jt.getModel();
                int selectrows[] = items_table_jt.getSelectedRows();

                for(int i = selectrows.length-1; i >= 0; i--)
                {

                    dtm.removeRow(selectrows[i]);

                }

            }
            
        }
        
    }//GEN-LAST:event_remove_jbKeyPressed

    private void remove_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_remove_jbMouseClicked
        // TODO add your handling code here:
        
        if(items_table_jt.getSelectedRowCount() ==  0)
        {

            JOptionPane.showMessageDialog(this, "No Rows Are Selected.","Error",JOptionPane.ERROR_MESSAGE);

        }
        else
        {

            DefaultTableModel dtm = (DefaultTableModel)items_table_jt.getModel();
            int selectrows[] = items_table_jt.getSelectedRows();

            for(int i = selectrows.length-1; i >= 0; i--)
            {

                dtm.removeRow(selectrows[i]);

            }

        }
        
    }//GEN-LAST:event_remove_jbMouseClicked

    private void showbilldetails_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showbilldetails_jbMouseClicked
        // TODO add your handling code here:
        
        if(billno_jcb.getSelectedItem() == null || billno_jcb.getSelectedItem().toString().equals(""))
        {
            
             JOptionPane.showMessageDialog(this, "Enter a Valid Bill Number.","Error",JOptionPane.ERROR_MESSAGE);
            
        }
        else
        {
            
            getbilldetails();
        
        }
        
    }//GEN-LAST:event_showbilldetails_jbMouseClicked

    private void items_table_jtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_items_table_jtFocusGained
        // TODO add your handling code here:
        
        if(items_table_jt.getRowCount() > 0)
        {
        
            items_table_jt.getSelectionModel().addListSelectionListener(items_table_jt_LSL_Obj);
           
            portion_jcb.addActionListener(portion_jcb_AL_obj);
            
        }
        
    }//GEN-LAST:event_items_table_jtFocusGained

    private void items_table_jtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_items_table_jtFocusLost
        // TODO add your handling code here:
        
         items_table_jt.getSelectionModel().removeListSelectionListener(items_table_jt_LSL_Obj);
        
    }//GEN-LAST:event_items_table_jtFocusLost

    private void showbilldetails_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_showbilldetails_jbKeyPressed
        // TODO add your handling code here:
        
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            
            if(billno_jcb.getSelectedItem() == null || billno_jcb.getSelectedItem().toString().equals(""))
            {

                 JOptionPane.showMessageDialog(this, "Enter a Valid Bill Number.","Error",JOptionPane.ERROR_MESSAGE);

            }
            else
            {

                getbilldetails();

            }
            
        }
        else if(evt.getKeyCode() == KeyEvent.VK_TAB)
        {
            
            items_table_jt.requestFocusInWindow();
            
        }
        
    }//GEN-LAST:event_showbilldetails_jbKeyPressed

    private void cancelbill_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelbill_jbMouseClicked
        // TODO add your handling code here:
        
        if(update_jb.isEnabled() == true)
        {
            if(validation_on_save() == true)
            {

                if(validation_on_save() == true)
                {
                    
                    cancel_bill();
                    
                }

            }

        }
        
    }//GEN-LAST:event_cancelbill_jbMouseClicked

    private void cancelbill_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cancelbill_jbKeyPressed
        // TODO add your handling code here:
        
        if(cancelbill_jb.isEnabled() == true)
        {
            if(evt.getKeyCode() == KeyEvent.VK_ENTER)
            {
                
                if(validation_on_save() == true)
                {
                 
                    cancel_bill();
                
                }

            }
        }
        
    }//GEN-LAST:event_cancelbill_jbKeyPressed

    private void billno_jcbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_billno_jcbActionPerformed
        // TODO add your handling code here:
        
       clear_all();
        
    }//GEN-LAST:event_billno_jcbActionPerformed

    private void billno_jtfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_billno_jtfKeyTyped
        // TODO add your handling code here:
        
        String billNo = billno_jtf.getText();
        int lastindex = billNo.lastIndexOf(".");
        
       //System.out.println(lastindex);
       
        char c = evt.getKeyChar();

        if(!(Character.isDigit(c)||(c==KeyEvent.VK_BACK_SPACE)||c==KeyEvent.VK_DELETE||evt.getKeyChar() == '.'))
        {
            //  evt.getKeyChar() == '.' does accept point when jtextfield accepts decimal number
            evt.consume();
            getToolkit().beep();
        
        }
        else if(lastindex >= 0 && !Character.isDigit(c))
        {
            
             evt.consume();
            
        }
        
    }//GEN-LAST:event_billno_jtfKeyTyped

    private void newDish_jchkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newDish_jchkbxActionPerformed
        // TODO add your handling code here:
        
        newDish_jchkbx_ActionPerformed();
        
    }//GEN-LAST:event_newDish_jchkbxActionPerformed

    private void newDish_jchkbx_ActionPerformed()
    {
        
        dishCategory_jcb.removeActionListener(dishCategory_AL_Obj);
        portion_jcb.removeActionListener(portion_jcb_AL_obj);
        items_table_jt.clearSelection();
        dishCategory_jcb.setSelectedItem("");
        dishname_jcb.setSelectedItem("");
        portion_jcb.setSelectedItem("");
        quantity_jtf.setText("");
        price_jtf.setText("");
        dishCategory_jcb.addActionListener(dishCategory_AL_Obj);
        portion_jcb.addActionListener(portion_jcb_AL_obj);
        
    }
    
    void cancel_bill()
    {
        
          boolean error = false;
        boolean proc_complete = false;
        
        Connection con = DatabaseConnection.createConnection();
        PreparedStatement prepstate = null;
        PreparedStatement prepstate_2 = null;
        
        try
        {
            
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd",Locale.getDefault());
            
            String bill_no_old = billno_jcb.getSelectedItem().toString();
          
            String sql_1 = "UPDATE billing SET status=? WHERE bill_no = ?";
            prepstate_2 = con.prepareStatement(sql_1);
            prepstate_2.setString(1, "cancelled");
            prepstate_2.setString(2, bill_no_old);
            prepstate_2.executeUpdate();
                
            proc_complete = true;
             
        }
        catch(Exception e)
        {
            
            JOptionPane.showMessageDialog(this, "cancel_bill() :"+e);
            error = true;
            
        }
        finally
        {
            
            try
            {
               
                
                if(con != null)
                {
                    
                    con.close();
                    
                }
                if(prepstate != null)
                {
                    
                    prepstate.close();
                    
                }
                
            }
            catch(Exception e)
            {
                
                JOptionPane.showMessageDialog(this, e);
                
            }
            
        }
        
        if(error == false && proc_complete == true)
        {
            
            JOptionPane.showMessageDialog(this,"Operation Successful.","Success",JOptionPane.INFORMATION_MESSAGE);
            disable_editable_fields();
            clear_all();
            get_billno();
            billno_jcb.requestFocusInWindow();
            
        }
        
    }
    
    void getbilldetails()
    {
        
        Connection con = DatabaseConnection.createConnection();
        Statement stmt = null;
        ResultSet rs = null;
         
        try
        {
          
            DefaultTableModel dtm = (DefaultTableModel)items_table_jt.getModel();
            dtm.setRowCount(0);
            
            String billno = billno_jcb.getSelectedItem().toString();
            
            String status = null;
            String nettotal = null;
            Date billdate = null;
            String paymode = null;
            
            stmt = con.createStatement();
            rs = stmt.executeQuery("SELECT * FROM billing WHERE bill_no = '"+billno+"'");
            
            while(rs.next())
            {

                String category = rs.getString("item_category");
                String dishname = rs.getString("item_name");
                String dishcode = rs.getString("item_code");
                String portion = rs.getString("portion");
                String rate = rs.getString("price");
                String qty = rs.getString("quantity");
                String amount = rs.getString("amount");
                nettotal = rs.getString("net_amount");
                status = rs.getString("status");
                String id = rs.getString("id");
                billdate = rs.getDate("bill_date");
                paymode = rs.getString("pay_mode");
                
                String[] arr = new String[]{Integer.toString(items_table_jt.getRowCount()+1),category,dishname,portion,rate,qty,amount,dishcode,id};
                dtm.addRow(arr);
                
            }    
          
            billno_jtf.setText(billno);
            totalno_jtf.setText(Integer.toString(items_table_jt.getRowCount()+1));
            net_total_jtf.setText(nettotal);
            status_jl.setText(status);
            billdate_jdc.setDate(billdate);
            get_totals();
            dishname_jcb.addActionListener(dishname_jcb_AL_obj);
            
        }
        catch(Exception e)
        {
             
            JOptionPane.showMessageDialog(this, "getbilldetails(): "+e);
             
        }
        finally
        {

            try 
            {
                
                rs.close();
                stmt.close();
                con.close();
                
            } catch (SQLException ex) 
            {
                JOptionPane.showMessageDialog(null, ex);
            }

        }
        
    }
    
    void save_only()
    {
        
        boolean error = false;
        boolean proc_complete = false;
        
        Connection con = DatabaseConnection.createConnection();
        PreparedStatement prepstate = null;
        PreparedStatement prepstate_2 = null;
        
        try
        {
            
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd",Locale.getDefault());
            
            String bill_no_old = billno_jcb.getSelectedItem().toString();
            
            String sql_1 = "DELETE FROM billing WHERE bill_no = ?";
            prepstate_2 = con.prepareStatement(sql_1);
            prepstate_2.setString(1, bill_no_old);
            prepstate_2.executeUpdate();
            
            String bill_no_new = billno_jtf.getText();
            String bill_date = sdf.format(billdate_jdc.getDate());
            
            int row_count = items_table_jt.getRowCount();
            
            for(int i = 0 ; i < row_count ; i ++)
            {
                
                String dish_name = items_table_jt.getValueAt(i, 2).toString();
                String dish_code = items_table_jt.getValueAt(i, 7).toString();
                String item_category = items_table_jt.getValueAt(i, 1).toString();
                String portion = items_table_jt.getValueAt(i, 3).toString();
                String rate = items_table_jt.getValueAt(i, 4).toString();
                String qnty = items_table_jt.getValueAt(i, 5).toString();
                String amount = items_table_jt.getValueAt(i, 6).toString();
                String net_amt = net_total_jtf.getText();
                String pay_mode = "NA";
                
                String sql = "INSERT INTO billing(bill_no,bill_date,item_name,item_code,portion,price,quantity,amount,status,net_amount,pay_mode,item_category) VALUES(?,?,?,?,?,?,?,?,?,?,?,?)";
                prepstate = con.prepareStatement(sql);
                prepstate.setString(1, bill_no_new);
                prepstate.setString(2, bill_date);
                prepstate.setString(3, dish_name);
                prepstate.setString(4, dish_code);
                prepstate.setString(5, portion);
                prepstate.setString(6, rate);
                prepstate.setString(7, qnty);
                prepstate.setString(8, amount);
                prepstate.setString(9, status_jl.getText());
                prepstate.setString(10, net_amt);
                prepstate.setString(11, pay_mode);
                prepstate.setString(12, item_category);
                prepstate.execute();
                
                proc_complete = true;
                
            }
            
        }
        catch(Exception e)
        {
            
            JOptionPane.showMessageDialog(this, "save_only() :"+e);
            error = true;
            
        }
        finally
        {
            
            try
            {
               
                
                if(con != null)
                {
                    
                    con.close();
                    
                }
                if(prepstate != null)
                {
                    
                    prepstate.close();
                    
                }
                
            }
            catch(Exception e)
            {
                
                JOptionPane.showMessageDialog(this, e);
                
            }
            
        }
        
        if(error == false && proc_complete == true)
        {
            
            JOptionPane.showMessageDialog(this,"Operation Successful.","Success",JOptionPane.INFORMATION_MESSAGE);
            disable_editable_fields();
            get_billno();
            billno_jcb.requestFocusInWindow();
            
        }
        
        
    }
    
    void edit_mode()
    {
        
        enable_editable_fields();
        dishname_jcb.requestFocusInWindow();
        
    }
    
    void clear_all()
    {
        
        billdate_jdc.setDate(null);
        billno_jtf.setText("");
        
        portion_jcb.removeActionListener(portion_jcb_AL_obj);
        dishname_jcb.removeActionListener(dishname_jcb_AL_obj);
       
        dishname_jcb.setSelectedItem("");

        
        portion_jcb.removeActionListener(portion_jcb_AL_obj);
        portion_jcb.addItem("");
        portion_jcb.setSelectedItem("");

        price_jtf.setText("");
        quantity_jtf.setText("");
       
        totalno_jtf.setText("");
        net_total_jtf.setText("");
        tender_jtf.setText("");
        balance_jtf.setText("");
        status_jl.setText("--");
        
        items_table_jt.getSelectionModel().removeListSelectionListener(items_table_jt_LSL_Obj);
        ((DefaultTableModel)items_table_jt.getModel()).setRowCount(0);
        dishname_jcb.addActionListener(dishname_jcb_AL_obj);
        portion_jcb.addActionListener(portion_jcb_AL_obj);
        
    }
    
    boolean validation_on_apply()
    {
        
        boolean valid = true;
        
        if(billdate_jdc.getDate() == null)
        {
            
            JOptionPane.showMessageDialog(this, "Enter a Valid Bill Date.", "Error", JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        else if(items_table_jt.getSelectedRow() == -1)
        {
            
            JOptionPane.showMessageDialog(this, "Select a row for edit.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        else if(dishCategory_jcb.getSelectedIndex() == -1 || dishCategory_jcb.getSelectedItem() == null || dishCategory_jcb.getSelectedItem().toString().equals(""))
        {
            
            JOptionPane.showMessageDialog(this, "Select a Dish Category.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        else if(dishname_jcb.getSelectedIndex() == -1 || dishname_jcb.getSelectedItem() == null || dishname_jcb.getSelectedItem().toString().equals(""))
        {
            
            JOptionPane.showMessageDialog(this, "Select a Valid Dish.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        else if(portion_jcb.getSelectedIndex() == -1 || portion_jcb.getSelectedItem() == null || portion_jcb.getSelectedItem().toString().equals(""))
        {
            
            JOptionPane.showMessageDialog(this, "Select a Valid Portion.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        else if(quantity_jtf.getText().equals(""))
        {
            
            JOptionPane.showMessageDialog(this, "Specify Quantity.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
       
        return valid;
        
    }
    
    boolean validation_on_newApply()
    {
        
        boolean valid = true;
        
        if(billdate_jdc.getDate() == null)
        {
            
            JOptionPane.showMessageDialog(this, "Enter a Valid Bill Date.", "Error", JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        else if(dishCategory_jcb.getSelectedIndex() == -1 || dishCategory_jcb.getSelectedItem() == null || dishCategory_jcb.getSelectedItem().toString().equals(""))
        {
            
            JOptionPane.showMessageDialog(this, "Select a Dish Category.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        else if(dishname_jcb.getSelectedIndex() == -1 || dishname_jcb.getSelectedItem() == null || dishname_jcb.getSelectedItem().toString().equals(""))
        {
            
            JOptionPane.showMessageDialog(this, "Select a Valid Dish.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        else if(portion_jcb.getSelectedIndex() == -1 || portion_jcb.getSelectedItem() == null || portion_jcb.getSelectedItem().toString().equals(""))
        {
            
            JOptionPane.showMessageDialog(this, "Select a Valid Portion.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        else if(quantity_jtf.getText().equals(""))
        {
            
            JOptionPane.showMessageDialog(this, "Specify Quantity.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
       
        return valid;
        
    }
    
    boolean validation_on_edit()
    {
        
        boolean valid = true;
        
//       if(items_table_jt.getSelectedRow() == -1)
//        {
//            
//            JOptionPane.showMessageDialog(this, "Select a Row.","Error",JOptionPane.ERROR_MESSAGE);
//            valid = false;
//            
//        }
        
        return valid;
        
    }
    
    void apply_data()
    {
        
        try
        {
            
            DefaultTableModel dtm = (DefaultTableModel)items_table_jt.getModel();
            int selectedrow = items_table_jt.getSelectedRow();
            
            String dishname_code = dishname_jcb.getSelectedItem().toString();
            String dish_code = (dishname_code.substring(dishname_code.lastIndexOf("|")+1,dishname_code.length())).trim();
            String dishname = (dishname_code.substring(0, dishname_code.lastIndexOf("|"))).trim();
            items_table_jt.setValueAt(dishname, selectedrow, 2);
            String category = dishCategory_jcb.getSelectedItem().toString();
            items_table_jt.setValueAt(category, selectedrow, 1);
            String portion = portion_jcb.getSelectedItem().toString();
            items_table_jt.setValueAt(portion, selectedrow, 3);
            String rate = price_jtf.getText();
            items_table_jt.setValueAt(rate, selectedrow, 4);
            String qnty = quantity_jtf.getText();
            items_table_jt.setValueAt(qnty, selectedrow, 5);
            BigDecimal amount = new BigDecimal(rate).multiply(new BigDecimal(qnty)).setScale(2, RoundingMode.HALF_UP);
            String amount_str =  amount.toString();
            items_table_jt.setValueAt(amount_str, selectedrow, 6);
            
            get_totals();
            items_table_jt.requestFocusInWindow();
          
        }
        catch(Exception e)
        {
            
            JOptionPane.showMessageDialog(this,"apply_data() :"+e);
            
        }
        
        
    }
    
    void get_totals()
    {
       
        try {
            BigDecimal tot_amount = new BigDecimal("0");
            BigDecimal tot_amount_temp = new BigDecimal("0");
            
            int row_count = items_table_jt.getRowCount();
            
            for (int i = 0; i < row_count; i++) {
                
                tot_amount = new BigDecimal(items_table_jt.getValueAt(i, 6).toString()).add(tot_amount_temp);
                tot_amount_temp = tot_amount;
                
            }
            
            totalno_jtf.setText(Integer.toString(row_count));
            net_total_jtf.setText(tot_amount.toString());
            tender_jtf.setText(tot_amount.toString());
            
            get_balance();            
        } catch (Exception e) 
        {
            
            JOptionPane.showMessageDialog(this, "get_totals(): "+e);
            
        }
            
        
    }
    
    class AL_dishname_jcb implements ActionListener
    {

        @Override
        public void actionPerformed(ActionEvent e) {
            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            
            Connection con = DatabaseConnection.createConnection();
            PreparedStatement prepstate = null;
            ResultSet rs = null;
            try
            {
              
                if(dishname_jcb.getSelectedItem() != null)
                {
                    portion_jcb.removeAllItems();

                    String dishname_code = dishname_jcb.getSelectedItem().toString();
                    String dish_code = (dishname_code.substring(dishname_code.lastIndexOf("|")+1,dishname_code.length())).trim();

                    String sql = "SELECT portion FROM dishes WHERE item_code=? ";
                    prepstate = con.prepareStatement(sql);
                    prepstate.setString(1, dish_code);
                    rs = prepstate.executeQuery();
                    while(rs.next())
                    {

                        String portions = rs.getString("portion");
                        portion_jcb.addItem(portions);

                    }

                    portion_jcb.setSelectedItem("");
                    
                }
                
            }
            catch(Exception ex)
            {
                
                JOptionPane.showMessageDialog(null, ex);
                
            }
            finally
            {
                
                try
                {
                    
                    if(rs != null)
                    {
                        
                        rs.close();
                        
                    }
                    if(prepstate != null)
                    {
                        
                        prepstate.close();
                        
                    }
                    if(con != null)
                    {
                        
                        con.close();
                        
                    }
                    
                }
                catch(Exception exx)
                {
                    
                    JOptionPane.showMessageDialog(null, exx);
                    
                }
                
            }
            
            
        }
         
    }
    
    class AL_portion_jcb implements ActionListener
    {

        @Override
        public void actionPerformed(ActionEvent e) {
            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            
            Connection con = DatabaseConnection.createConnection();
            PreparedStatement prepstate = null;
            ResultSet rs = null;
            price_jtf.setText("");
       
            try
            {
              
                if(dishname_jcb.getSelectedItem() != null && portion_jcb.getSelectedItem() != null)
                {
                    String dishname_code = dishname_jcb.getSelectedItem().toString();
                    String dish_code = (dishname_code.substring(dishname_code.lastIndexOf("|")+1,dishname_code.length())).trim();

                    String portion = portion_jcb.getSelectedItem().toString();
                  
                    String sql = "SELECT price FROM dishes WHERE item_code=? AND portion=? ";
                    prepstate = con.prepareStatement(sql);
                    prepstate.setString(1, dish_code);
                    prepstate.setString(2, portion);
                    rs = prepstate.executeQuery();
                    while(rs.next())
                    {
    
                        String price = rs.getString("price");
                        price_jtf.setText(price);
    
                    }
                }
               
            }
            catch(Exception ex)
            {
                
                JOptionPane.showMessageDialog(null,"Class AL_portion_jcb: " +ex);
                
            }
            finally
            {
                
                try
                {
                    
                    if(rs != null)
                    {
                        
                        rs.close();
                        
                    }
                    if(prepstate != null)
                    {
                        
                        prepstate.close();
                        
                    }
                    if(con != null)
                    {
                        
                        con.close();
                        
                    }
                    
                }
                catch(Exception exx)
                {
                    
                    JOptionPane.showMessageDialog(null, exx);
                    
                }
                
            } 
        }
         
    }
    
    class LSL_items_table_jt_ implements ListSelectionListener
    {

        @Override
        public void valueChanged(ListSelectionEvent e) {
            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            
            try {
                int selrow = items_table_jt.getSelectedRow();

                String dishname = items_table_jt.getValueAt(selrow, 2).toString();
                String category = items_table_jt.getValueAt(selrow, 1).toString();
                String dishcode = items_table_jt.getValueAt(selrow, 7).toString();
                String dishname_code = dishname + " | " + dishcode;
                String portion = items_table_jt.getValueAt(selrow, 3).toString();
                String price = items_table_jt.getValueAt(selrow, 4).toString();
                //String id = items_table_jt.getValueAt(selrow, 8).toString();
                String qnty = items_table_jt.getValueAt(selrow, 5).toString();

                dishCategory_jcb.setSelectedItem(category);
                dishname_jcb.setSelectedItem(dishname_code);                
                load_portion_jcb();
                portion_jcb.setSelectedItem(portion);
                price_jtf.setText(price);
                quantity_jtf.setText(qnty);

            } catch (Exception ex) 
            {
                JOptionPane.showMessageDialog(null,"Class LSL_items_table_jt_: " +ex);

            }
            
        }
         
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton apply_jb;
    private javax.swing.JTextField balance_jtf;
    private com.toedter.calendar.JDateChooser billdate_jdc;
    public static javax.swing.JComboBox billno_jcb;
    private javax.swing.JTextField billno_jtf;
    private javax.swing.JButton cancelbill_jb;
    private javax.swing.JButton close_jb;
    private javax.swing.JComboBox<String> dishCategory_jcb;
    public static javax.swing.JComboBox dishname_jcb;
    private javax.swing.JButton edit_jb;
    private javax.swing.JTable items_table_jt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTextField net_total_jtf;
    private javax.swing.JCheckBox newDish_jchkbx;
    private javax.swing.JComboBox portion_jcb;
    private javax.swing.JTextField price_jtf;
    private javax.swing.JButton print_jb;
    private javax.swing.JTextField quantity_jtf;
    private javax.swing.JButton remove_jb;
    private javax.swing.JButton showbilldetails_jb;
    private javax.swing.JLabel status_jl;
    private javax.swing.JTextField tender_jtf;
    private javax.swing.JTextField totalno_jtf;
    private javax.swing.JButton update_jb;
    // End of variables declaration//GEN-END:variables
}
