package DSST007_1_CUS13.pll;

import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author praveen
 */
public class Create_Dishes extends javax.swing.JInternalFrame {

    private static Create_Dishes form_instance;
    String tableid;
    int save_status = 0;
 
    price_table_jt_LSL price_table_jt_LSL_obj = new price_table_jt_LSL();
    
    AL_dishname_jcb dishname_jcb_AL_Obj = new AL_dishname_jcb();
    
    public Create_Dishes() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        dishname_jcb = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        dishcode_jcb = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        dish_desc_jtf = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        dish_details_jt = new javax.swing.JTable();
        remove_jb = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        portion_jcb = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        price_jtf = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        close_jb = new javax.swing.JButton();
        newdata_jb = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        dishCategory_jcb = new javax.swing.JComboBox<>();
        jPanel9 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        save_jb = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        price_table_jt = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel10 = new javax.swing.JLabel();
        dishname_2_jcb = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        portionname_2_jcb = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        price_2_jtf = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        dishcode_2_jcb = new javax.swing.JComboBox();
        jPanel8 = new javax.swing.JPanel();
        editfields_jb = new javax.swing.JButton();
        delete_jb = new javax.swing.JButton();
        update_jb = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        desc_jta = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();
        dishCategory2_jcb = new javax.swing.JComboBox<>();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255)));
        setClosable(true);
        setIconifiable(true);
        setResizable(true);
        setTitle("Set Up - > Dishes");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/DSST007_1_CUS13/InstabizTrader Logo Final 35x35.png"))); // NOI18N
        addInternalFrameListener(new javax.swing.event.InternalFrameListener()
        {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt)
            {
                formInternalFrameOpened(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt)
            {
                formInternalFrameClosing(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt)
            {
                formInternalFrameClosed(evt);
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt)
            {
            }
        });

        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                jTabbedPane1StateChanged(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(242, 242, 255));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel1.setText("Dish Name :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel1.add(jLabel1, gridBagConstraints);

        dishname_jcb.setEditable(true);
        dishname_jcb.setPreferredSize(new java.awt.Dimension(250, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel1.add(dishname_jcb, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel2.setText("Code :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 2, 0, 0);
        jPanel1.add(jLabel2, gridBagConstraints);

        dishcode_jcb.setEditable(true);
        dishcode_jcb.setPreferredSize(new java.awt.Dimension(224, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        jPanel1.add(dishcode_jcb, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel3.setText("Description :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel3, gridBagConstraints);

        dish_desc_jtf.setPreferredSize(new java.awt.Dimension(412, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(dish_desc_jtf, gridBagConstraints);

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setPreferredSize(new java.awt.Dimension(790, 380));

        dish_details_jt.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        dish_details_jt.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "SNo", "DishName", "DishCode", "Portion", "Price", "Id", "Description", "Category"
            }
        )
        {
            boolean[] canEdit = new boolean []
            {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        dish_details_jt.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        dish_details_jt.setFillsViewportHeight(true);
        dish_details_jt.setRowHeight(23);
        dish_details_jt.setSelectionBackground(new java.awt.Color(86, 132, 191));
        dish_details_jt.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                dish_details_jtKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(dish_details_jt);
        if (dish_details_jt.getColumnModel().getColumnCount() > 0)
        {
            dish_details_jt.getColumnModel().getColumn(0).setMinWidth(50);
            dish_details_jt.getColumnModel().getColumn(0).setPreferredWidth(50);
            dish_details_jt.getColumnModel().getColumn(0).setMaxWidth(50);
            dish_details_jt.getColumnModel().getColumn(1).setMinWidth(200);
            dish_details_jt.getColumnModel().getColumn(1).setPreferredWidth(200);
            dish_details_jt.getColumnModel().getColumn(2).setMinWidth(200);
            dish_details_jt.getColumnModel().getColumn(2).setPreferredWidth(200);
            dish_details_jt.getColumnModel().getColumn(3).setMinWidth(145);
            dish_details_jt.getColumnModel().getColumn(3).setPreferredWidth(145);
            dish_details_jt.getColumnModel().getColumn(4).setMinWidth(100);
            dish_details_jt.getColumnModel().getColumn(4).setPreferredWidth(100);
            dish_details_jt.getColumnModel().getColumn(5).setMinWidth(0);
            dish_details_jt.getColumnModel().getColumn(5).setPreferredWidth(0);
            dish_details_jt.getColumnModel().getColumn(5).setMaxWidth(0);
            dish_details_jt.getColumnModel().getColumn(6).setMinWidth(400);
            dish_details_jt.getColumnModel().getColumn(6).setPreferredWidth(400);
            dish_details_jt.getColumnModel().getColumn(7).setMinWidth(150);
            dish_details_jt.getColumnModel().getColumn(7).setPreferredWidth(150);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 10;
        jPanel1.add(jScrollPane1, gridBagConstraints);

        remove_jb.setBackground(new java.awt.Color(86, 132, 191));
        remove_jb.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        remove_jb.setText("Remove");
        remove_jb.setPreferredSize(new java.awt.Dimension(125, 20));
        remove_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                remove_jbMouseClicked(evt);
            }
        });
        remove_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                remove_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(remove_jb, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel5.setText("Portion :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 4, 0);
        jPanel1.add(jLabel5, gridBagConstraints);

        portion_jcb.setEditable(true);
        portion_jcb.setPreferredSize(new java.awt.Dimension(200, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 4, 0);
        jPanel1.add(portion_jcb, gridBagConstraints);

        jLabel6.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel6.setText("Price :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 4, 0);
        jPanel1.add(jLabel6, gridBagConstraints);

        price_jtf.setPreferredSize(new java.awt.Dimension(124, 27));
        price_jtf.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyTyped(java.awt.event.KeyEvent evt)
            {
                price_jtfKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 4, 0);
        jPanel1.add(price_jtf, gridBagConstraints);

        jPanel2.setBackground(new java.awt.Color(242, 242, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new java.awt.GridBagLayout());

        close_jb.setBackground(new java.awt.Color(86, 132, 191));
        close_jb.setMnemonic('s');
        close_jb.setText("Close");
        close_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        close_jb.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                close_jbActionPerformed(evt);
            }
        });
        close_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                close_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 15, 0);
        jPanel2.add(close_jb, gridBagConstraints);

        newdata_jb.setBackground(new java.awt.Color(185, 197, 31));
        newdata_jb.setText("New");
        newdata_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        newdata_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                newdata_jbMouseClicked(evt);
            }
        });
        newdata_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                newdata_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 15, 0);
        jPanel2.add(newdata_jb, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(jPanel2, gridBagConstraints);

        jLabel8.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel8.setText("Category :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel1.add(jLabel8, gridBagConstraints);

        dishCategory_jcb.setEditable(true);
        dishCategory_jcb.setPreferredSize(new java.awt.Dimension(200, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(dishCategory_jcb, gridBagConstraints);

        jPanel9.setBackground(new java.awt.Color(242, 242, 255));
        jPanel9.setLayout(new java.awt.GridBagLayout());

        jButton2.setBackground(new java.awt.Color(185, 197, 31));
        jButton2.setText("Refresh");
        jButton2.setPreferredSize(new java.awt.Dimension(100, 27));
        jButton2.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                jButton2MouseClicked(evt);
            }
        });
        jButton2.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                jButton2KeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 4, 0);
        jPanel9.add(jButton2, gridBagConstraints);

        save_jb.setBackground(new java.awt.Color(185, 197, 31));
        save_jb.setText("Save");
        save_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        save_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                save_jbMouseClicked(evt);
            }
        });
        save_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                save_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 4, 0);
        jPanel9.add(save_jb, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel1.add(jPanel9, gridBagConstraints);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createSequentialGroup()
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Create Dishes", jPanel5);

        jPanel4.setBackground(new java.awt.Color(242, 242, 255));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setPreferredSize(new java.awt.Dimension(573, 430));

        price_table_jt.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        price_table_jt.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "SNo", "Dish Name", "PortionName", "Price", "id", "DishCode", "Description", "Category"
            }
        )
        {
            boolean[] canEdit = new boolean []
            {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        price_table_jt.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        price_table_jt.setFillsViewportHeight(true);
        price_table_jt.setRowHeight(23);
        price_table_jt.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        price_table_jt.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusGained(java.awt.event.FocusEvent evt)
            {
                price_table_jtFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                price_table_jtFocusLost(evt);
            }
        });
        jScrollPane2.setViewportView(price_table_jt);
        if (price_table_jt.getColumnModel().getColumnCount() > 0)
        {
            price_table_jt.getColumnModel().getColumn(0).setMinWidth(50);
            price_table_jt.getColumnModel().getColumn(0).setPreferredWidth(50);
            price_table_jt.getColumnModel().getColumn(1).setMinWidth(250);
            price_table_jt.getColumnModel().getColumn(1).setPreferredWidth(250);
            price_table_jt.getColumnModel().getColumn(2).setMinWidth(150);
            price_table_jt.getColumnModel().getColumn(2).setPreferredWidth(150);
            price_table_jt.getColumnModel().getColumn(3).setMinWidth(100);
            price_table_jt.getColumnModel().getColumn(3).setPreferredWidth(100);
            price_table_jt.getColumnModel().getColumn(4).setMinWidth(0);
            price_table_jt.getColumnModel().getColumn(4).setPreferredWidth(0);
            price_table_jt.getColumnModel().getColumn(4).setMaxWidth(0);
            price_table_jt.getColumnModel().getColumn(5).setMinWidth(0);
            price_table_jt.getColumnModel().getColumn(5).setPreferredWidth(0);
            price_table_jt.getColumnModel().getColumn(5).setMaxWidth(0);
            price_table_jt.getColumnModel().getColumn(6).setMinWidth(0);
            price_table_jt.getColumnModel().getColumn(6).setPreferredWidth(0);
            price_table_jt.getColumnModel().getColumn(6).setMaxWidth(0);
            price_table_jt.getColumnModel().getColumn(7).setMinWidth(0);
            price_table_jt.getColumnModel().getColumn(7).setPreferredWidth(0);
            price_table_jt.getColumnModel().getColumn(7).setMaxWidth(0);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 16;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel4.add(jScrollPane2, gridBagConstraints);

        jButton1.setBackground(new java.awt.Color(185, 197, 31));
        jButton1.setText("<< Refresh");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                jButton1MouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel4.add(jButton1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 2, 0, 2);
        jPanel4.add(jSeparator2, gridBagConstraints);

        jLabel10.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel10.setText("Dish Name :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel4.add(jLabel10, gridBagConstraints);

        dishname_2_jcb.setEditable(true);
        dishname_2_jcb.setPreferredSize(new java.awt.Dimension(250, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 2);
        jPanel4.add(dishname_2_jcb, gridBagConstraints);

        jLabel11.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel11.setText("Portion Name :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel4.add(jLabel11, gridBagConstraints);

        portionname_2_jcb.setEditable(true);
        portionname_2_jcb.setPreferredSize(new java.awt.Dimension(200, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel4.add(portionname_2_jcb, gridBagConstraints);

        jLabel12.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel12.setText("Edit Portions");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 5, 0);
        jPanel4.add(jLabel12, gridBagConstraints);

        jLabel13.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel13.setText("Price :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel4.add(jLabel13, gridBagConstraints);

        price_2_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        price_2_jtf.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyTyped(java.awt.event.KeyEvent evt)
            {
                price_2_jtfKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel4.add(price_2_jtf, gridBagConstraints);

        jPanel7.setBackground(new java.awt.Color(242, 242, 255));
        jPanel7.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel7.setLayout(new java.awt.GridBagLayout());

        jButton4.setBackground(new java.awt.Color(86, 132, 191));
        jButton4.setMnemonic('s');
        jButton4.setText("Close");
        jButton4.setPreferredSize(new java.awt.Dimension(100, 27));
        jButton4.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                jButton4MouseClicked(evt);
            }
        });
        jButton4.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton4ActionPerformed(evt);
            }
        });
        jButton4.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                jButton4KeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 15, 0);
        jPanel7.add(jButton4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel4.add(jPanel7, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel4.setText("Dish Code :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel4.add(jLabel4, gridBagConstraints);

        dishcode_2_jcb.setEditable(true);
        dishcode_2_jcb.setPreferredSize(new java.awt.Dimension(200, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel4.add(dishcode_2_jcb, gridBagConstraints);

        jPanel8.setBackground(new java.awt.Color(242, 242, 255));
        jPanel8.setLayout(new java.awt.GridBagLayout());

        editfields_jb.setBackground(new java.awt.Color(185, 197, 31));
        editfields_jb.setText("Edit");
        editfields_jb.setPreferredSize(new java.awt.Dimension(80, 27));
        editfields_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                editfields_jbMouseClicked(evt);
            }
        });
        editfields_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                editfields_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel8.add(editfields_jb, gridBagConstraints);

        delete_jb.setBackground(new java.awt.Color(185, 197, 31));
        delete_jb.setText("Delete");
        delete_jb.setPreferredSize(new java.awt.Dimension(80, 27));
        delete_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                delete_jbMouseClicked(evt);
            }
        });
        delete_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                delete_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel8.add(delete_jb, gridBagConstraints);

        update_jb.setBackground(new java.awt.Color(185, 197, 31));
        update_jb.setText("Update");
        update_jb.setPreferredSize(new java.awt.Dimension(80, 27));
        update_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                update_jbMouseClicked(evt);
            }
        });
        update_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                update_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel8.add(update_jb, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel4.add(jPanel8, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel7.setText("Description :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel4.add(jLabel7, gridBagConstraints);

        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane3.setPreferredSize(new java.awt.Dimension(250, 93));

        desc_jta.setColumns(20);
        desc_jta.setLineWrap(true);
        desc_jta.setRows(5);
        jScrollPane3.setViewportView(desc_jta);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 10, 0);
        jPanel4.add(jScrollPane3, gridBagConstraints);

        jLabel9.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel9.setText("Category :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel4.add(jLabel9, gridBagConstraints);

        dishCategory2_jcb.setEditable(true);
        dishCategory2_jcb.setPreferredSize(new java.awt.Dimension(200, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel4.add(dishCategory2_jcb, gridBagConstraints);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        jTabbedPane1.addTab("Edit Dish Properties", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        setBounds(0, 0, 792, 597);
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:

        //this.setSize(720, 597);
         this.setSize(792, 597);
        
        Dimension desktopSize = NewMDIApplication.desktopbg_jlbl.getSize();
        Dimension jInternalFrameSize = this.getSize();
        this.setLocation((desktopSize.width - jInternalFrameSize.width)/2,(desktopSize.height- jInternalFrameSize.height)/2);

        load_dishname_jcb();
        AutoCompleteDecorator.decorate(dishname_jcb);
        
        load_dishcode_jcb();
        AutoCompleteDecorator.decorate(dishcode_jcb);
        
        load_dishCategory_jcb();
        AutoCompleteDecorator.decorate(dishCategory_jcb);
        
        load_dishCategory2_jcb();
        AutoCompleteDecorator.decorate(dishCategory2_jcb);
        
        dish_details_jt.setFocusTraversalKeysEnabled(false);
        
        load_portion_jcb();
        AutoCompleteDecorator.decorate(portion_jcb);
    
        load_dishname_2_jcb();
        AutoCompleteDecorator.decorate(dishname_2_jcb);
        
        load_dishcode_2_jcb();
        AutoCompleteDecorator.decorate(dishcode_2_jcb);
        
        load_portionname_2_jcb();
        AutoCompleteDecorator.decorate(portionname_2_jcb);        
        
        disable_editable_fields();
        
        dishname_jcb.addActionListener(dishname_jcb_AL_Obj);
        
    }//GEN-LAST:event_formInternalFrameOpened

    void disable_editable_fields()
    {
        
        dishname_2_jcb.setEnabled(false);
        dishcode_2_jcb.setEnabled(false);
        portionname_2_jcb.setEnabled(false);
        dishCategory2_jcb.setEnabled(false);
        price_2_jtf.setEnabled(false);
        desc_jta.setEnabled(false);
        update_jb.setEnabled(false);
        delete_jb.setEnabled(false);
        editfields_jb.setEnabled(true);
        
    }
    
    void enable_editable_fields()
    {
        
        if(price_table_jt.getSelectedRowCount() == 0)
        {
        
            JOptionPane.showMessageDialog(this, "Select An Item In The Table .","Error",JOptionPane.ERROR_MESSAGE);
            
        }
        else
        {
            dishname_2_jcb.setEnabled(true);
            dishcode_2_jcb.setEnabled(true);
            portionname_2_jcb.setEnabled(true);
            dishCategory2_jcb.setEnabled(true);
            price_2_jtf.setEnabled(true);
            desc_jta.setEnabled(true);
            update_jb.setEnabled(true);
            delete_jb.setEnabled(true);
            editfields_jb.setEnabled(false);
        }
        
    }
    
    void load_dishname_jcb()
    {
        
        Connection con = DatabaseConnection.createConnection();
        PreparedStatement prepstate = null;
        ResultSet rs = null;
        
        try
        {
            
            dishname_jcb.removeAllItems();
            
            String sql = "SELECT DISTINCT item_name,item_code FROM dishes";
            prepstate = con.prepareStatement(sql);
            rs = prepstate.executeQuery();
            
            while(rs.next())
            {
                
                String dishname = rs.getString("item_name");
                String itemcode = rs.getString("item_code");
                dishname_jcb.addItem(dishname+" | "+itemcode);
                
            }
            
            dishname_jcb.setSelectedItem("");
            
        }
        catch(Exception e)
        {
            
            JOptionPane.showMessageDialog(this, "load_dishname_jcb() :"+e);
            
        }
        
        finally
        {
            
            try
            {
               
                
                if(con != null)
                {
                    
                    con.close();
                    
                }
                if(prepstate != null)
                {
                    
                    prepstate.close();
                    
                }
                if(rs != null)
                {
                    
                    rs.close();
                    
                }
                
            }
            catch(Exception e)
            {
                
                JOptionPane.showMessageDialog(this, e);
                
            }
            
        }
        
    }
    
    void load_dishcode_jcb()
    {
        
        Connection con = DatabaseConnection.createConnection();
        PreparedStatement prepstate = null;
        ResultSet rs = null;
        
        try
        {
            
            dishcode_jcb.removeAllItems();
            
            String sql = "SELECT DISTINCT item_code FROM dishes";
            prepstate = con.prepareStatement(sql);
            rs = prepstate.executeQuery();
            
            while(rs.next())
            {
                
                String dishcode = rs.getString("item_code");
                dishcode_jcb.addItem(dishcode);
                
            }
            
            dishcode_jcb.setSelectedItem("");
            
        }
        catch(Exception e)
        {
            
            JOptionPane.showMessageDialog(this, "load_dishcode_jcb() :"+e);
            
        }
        
        finally
        {
            
            try
            {
               
                
                if(con != null)
                {
                    
                    con.close();
                    
                }
                if(prepstate != null)
                {
                    
                    prepstate.close();
                    
                }
                if(rs != null)
                {
                    
                    rs.close();
                    
                }
                
            }
            catch(Exception e)
            {
                
                JOptionPane.showMessageDialog(this, e);
                
            }
            
        }
        
    }
    
    void load_dishCategory_jcb()
    {
        
        Connection con = DatabaseConnection.createConnection();
        PreparedStatement prepstate = null;
        ResultSet rs = null;
        
        try
        {
            
            dishCategory_jcb.removeAllItems();
            
            String sql = "SELECT DISTINCT category FROM dishes";
            prepstate = con.prepareStatement(sql);
            rs = prepstate.executeQuery();
            
            while(rs.next())
            {
                if(rs.getString("category") != null && !rs.getString("category").equals(""))
                {
                    
                    String category = rs.getString("category");
                    dishCategory_jcb.addItem(category);
                    
                }
            }
            
            dishCategory_jcb.setSelectedItem("");
            
        }
        catch(Exception e)
        {
            
            JOptionPane.showMessageDialog(this, "load_dishCategory_jcb() :"+e);
            
        }
        
        finally
        {
            
            try
            {   
                if(con != null)
                {
                    
                    con.close();
                    
                }
                if(prepstate != null)
                {
                    
                    prepstate.close();
                    
                }
                if(rs != null)
                {
                    
                    rs.close();
                    
                }
                
            }
            catch(Exception e)
            {
                
                JOptionPane.showMessageDialog(this, e);
                
            }
            
        }
        
    }
    
    void load_dishCategory2_jcb()
    {
        
        Connection con = DatabaseConnection.createConnection();
        PreparedStatement prepstate = null;
        ResultSet rs = null;
        
        try
        {
            
            dishCategory2_jcb.removeAllItems();
            
            String sql = "SELECT DISTINCT category FROM dishes";
            prepstate = con.prepareStatement(sql);
            rs = prepstate.executeQuery();
            
            while(rs.next())
            {
                if(rs.getString("category") != null && !rs.getString("category").equals(""))
                {
                    
                    String category = rs.getString("category");
                    dishCategory2_jcb.addItem(category);
                    
                }
            }
            
            dishCategory2_jcb.setSelectedItem("");
            
        }
        catch(Exception e)
        {
            
            JOptionPane.showMessageDialog(this, "load_dishCategory2_jcb() :"+e);
            
        }
        
        finally
        {
            
            try
            {   
                if(con != null)
                {
                    
                    con.close();
                    
                }
                if(prepstate != null)
                {
                    
                    prepstate.close();
                    
                }
                if(rs != null)
                {
                    
                    rs.close();
                    
                }
                
            }
            catch(Exception e)
            {
                
                JOptionPane.showMessageDialog(this, e);
                
            }
            
        }
        
    }
    
    public static Create_Dishes getInstance()
    {
        
        if (form_instance == null)
            form_instance = new Create_Dishes();

        return form_instance;
        
    }
    
    
    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        // TODO add your handling code here:
       
       form_instance = null;
        
    }//GEN-LAST:event_formInternalFrameClosed

    private void close_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_close_jbActionPerformed
        // TODO add your handling code here:
        
         this.dispose();
        
    }//GEN-LAST:event_close_jbActionPerformed

    private void newdata_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newdata_jbMouseClicked
        // TODO add your handling code here:
        
        if(save_status == 1)
        {
            
            clear_all();
            
        }
        else
        {
            
            newdata();
            
        }
           
        
    }//GEN-LAST:event_newdata_jbMouseClicked

    private void newdata_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_newdata_jbKeyPressed
        // TODO add your handling code here:
        
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            
            if(save_status == 1)
            {

                clear_all();

            }
            else
            {

                newdata();

            }
            
        }
        
    }//GEN-LAST:event_newdata_jbKeyPressed

    private void close_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_close_jbKeyPressed
        // TODO add your handling code here:
        
        if(save_jb.isEnabled() == true)
        {
             
            if(evt.getKeyCode()==KeyEvent.VK_ENTER)
            {

                this.dispose();

            }
             
             
        }
        
    }//GEN-LAST:event_close_jbKeyPressed

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        // TODO add your handling code here:
        
        form_instance = null;
        
    }//GEN-LAST:event_formInternalFrameClosing

    private void price_table_jtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_price_table_jtFocusGained
        // TODO add your handling code here:

        price_table_jt.getSelectionModel().addListSelectionListener(price_table_jt_LSL_obj);

    }//GEN-LAST:event_price_table_jtFocusGained

    private void price_table_jtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_price_table_jtFocusLost
        // TODO add your handling code here:

        price_table_jt.getSelectionModel().removeListSelectionListener(price_table_jt_LSL_obj);

    }//GEN-LAST:event_price_table_jtFocusLost

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:

        get_price_details();

    }//GEN-LAST:event_jButton1MouseClicked

    void get_price_details()
    {
        
        Connection con = DatabaseConnection.createConnection();
        PreparedStatement prepstate = null;
        ResultSet rs = null;
        
        try
        {
            
             DefaultTableModel dtm = (DefaultTableModel)price_table_jt.getModel();
             dtm.setRowCount(0);
            
            String sql = "SELECT item_name,item_code,portion,price,id,description,category FROM dishes";
            prepstate = con.prepareStatement(sql);
            rs = prepstate.executeQuery();
            
            while(rs.next())
            {
                
                String dishname = rs.getString("item_name");
                String dishcode = rs.getString("item_code");
                String portionname = rs.getString("portion");
                String price = rs.getString("price");
                String id = rs.getString("id");
                String desc = rs.getString("description");
                String category = rs.getString("category");
                
                String[] arr = new String[]{Integer.toString(dtm.getRowCount()+1),dishname,portionname,price,id,dishcode,desc,category};
                dtm.addRow(arr);
                
            }
            
          
            
        }
        catch(Exception e)
        {
            
            JOptionPane.showMessageDialog(this, "load_dishname_jcb() :"+e);
            
        }
        
        finally
        {
            
            try
            {
               
                
                if(con != null)
                {
                    
                    con.close();
                    
                }
                if(prepstate != null)
                {
                    
                    prepstate.close();
                    
                }
                if(rs != null)
                {
                    
                    rs.close();
                    
                }
                
            }
            catch(Exception e)
            {
                
                JOptionPane.showMessageDialog(this, e);
                
            }
            
        }
        
    }
    
    private void price_2_jtfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_price_2_jtfKeyTyped
        // TODO add your handling code here:

        String price = price_2_jtf.getText();
        int lastindex = price.lastIndexOf(".");

        //System.out.println(lastindex);

        char c = evt.getKeyChar();

        if(!(Character.isDigit(c)||(c==KeyEvent.VK_BACK_SPACE)||c==KeyEvent.VK_DELETE||evt.getKeyChar() == '.'))
        {
            //  evt.getKeyChar() == '.' does accept point when jtextfield accepts decimal number
            evt.consume();
            getToolkit().beep();

        }
        else if(lastindex >= 0 && !Character.isDigit(c))
        {

            evt.consume();

        }

    }//GEN-LAST:event_price_2_jtfKeyTyped

    private void editfields_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editfields_jbMouseClicked
        // TODO add your handling code here:

        enable_editable_fields();

    }//GEN-LAST:event_editfields_jbMouseClicked

    private void editfields_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_editfields_jbKeyPressed
        // TODO add your handling code here:

        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {

            enable_editable_fields();

        }

    }//GEN-LAST:event_editfields_jbKeyPressed

    private void delete_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_delete_jbMouseClicked
        // TODO add your handling code here:

        if(delete_jb.isEnabled() == true)
        {

            if(price_table_jt.getSelectedRowCount() == 0)
            {

                JOptionPane.showMessageDialog(this, "Select A Row From The Table.","Error",JOptionPane.ERROR_MESSAGE);

            }
            else
            {

                delete_data();

            }

        }

    }//GEN-LAST:event_delete_jbMouseClicked

    void delete_data()
    {
        
        boolean error = false;
        boolean proc_complete = true;
        
        Connection con = DatabaseConnection.createConnection();
        PreparedStatement prepstat = null;
        
        try
        {
            
            int selrow = price_table_jt.getSelectedRow();
            String id = price_table_jt.getValueAt(selrow, 4).toString();
          
            String sql = "DELETE FROM dishes WHERE id=?";
            prepstat = con.prepareStatement(sql);
            prepstat.setString(1, id);
            
            prepstat.execute();
       
            
            proc_complete = true;
            
        }
        catch(Exception e)
        {
            
            JOptionPane.showMessageDialog(null,"delete_data() :"+e);
            error = true;
            
        }
        
        finally
        {
            
            try
            {
               
                
                if(con != null)
                {
                    
                    con.close();
                    
                }
                if(prepstat != null)
                {
                    
                    prepstat.close();
                    
                }
                
            }
            catch(Exception e)
            {
                
                JOptionPane.showMessageDialog(this, e);
                
            }
            
        }
        
        if(error == false && proc_complete == true)
        {
            
            JOptionPane.showMessageDialog(this,"Operation Successful.","Success",JOptionPane.INFORMATION_MESSAGE);
            disable_editable_fields();
            get_price_details();
            load_dishname_2_jcb();
            load_dishcode_2_jcb();
            load_portionname_2_jcb();
            price_2_jtf.setText("");
            desc_jta.setText("");
             clear_all();
            
        }
        
        
    }

    void load_dishname_2_jcb()
    {
        
        dishname_2_jcb.removeAllItems();
        
        Connection con = DatabaseConnection.createConnection();
        PreparedStatement prepstate = null;
        ResultSet rs = null;
        
        try
        {
            
            String sql = "SELECT DISTINCT item_name FROM dishes";
            prepstate = con.prepareStatement(sql);
            rs = prepstate.executeQuery();
            
            while(rs.next())
            {
                
                String dishname = rs.getString("item_name");
            
                dishname_2_jcb.addItem(dishname);
                
            }
           
            dishname_2_jcb.setSelectedItem("");
            
        }
        catch(Exception e)
        {
            
            JOptionPane.showMessageDialog(this, "load_dishname_1_jcb() :"+e);
            
        }
        
        finally
        {
            
            try
            {
               
                
                if(con != null)
                {
                    
                    con.close();
                    
                }
                if(prepstate != null)
                {
                    
                    prepstate.close();
                    
                }
                if(rs != null)
                {
                    
                    rs.close();
                    
                }
                
            }
            catch(Exception e)
            {
                
                JOptionPane.showMessageDialog(this, e);
                
            }
            
        }
        
    }
    
    void load_dishcode_2_jcb()
    {
        
        dishcode_2_jcb.removeAllItems();
        
        Connection con = DatabaseConnection.createConnection();
        PreparedStatement prepstate = null;
        ResultSet rs = null;
        
        try
        {
            
            String sql = "SELECT DISTINCT item_code FROM dishes";
            prepstate = con.prepareStatement(sql);
            rs = prepstate.executeQuery();
            
            while(rs.next())
            {
              
                String dishcode = rs.getString("item_code");
              
                dishcode_2_jcb.addItem(dishcode);
                
            }
           
            dishcode_2_jcb.setSelectedItem("");
            
        }
        catch(Exception e)
        {
            
            JOptionPane.showMessageDialog(this, "load_dishname_1_jcb() :"+e);
            
        }
        
        finally
        {
            
            try
            {
               
                
                if(con != null)
                {
                    
                    con.close();
                    
                }
                if(prepstate != null)
                {
                    
                    prepstate.close();
                    
                }
                if(rs != null)
                {
                    
                    rs.close();
                    
                }
                
            }
            catch(Exception e)
            {
                
                JOptionPane.showMessageDialog(this, e);
                
            }
            
        }
        
    }
    
    void load_portionname_2_jcb()
    {
        
        portionname_2_jcb.removeAllItems();
        
        Connection con = DatabaseConnection.createConnection();
        PreparedStatement prepstate = null;
        ResultSet rs = null;
        
        try
        {
            
            String sql = "SELECT DISTINCT portion FROM dishes";
            prepstate = con.prepareStatement(sql);
            rs = prepstate.executeQuery();
            
            while(rs.next())
            {
                
                String portionname = rs.getString("portion");
            
                portionname_2_jcb.addItem(portionname);
                
            }
         
            portionname_2_jcb.setSelectedItem("");
            
        }
        catch(Exception e)
        {
            
            JOptionPane.showMessageDialog(this, "load_portionname_2_jcb() :"+e);
            
        }
        
        finally
        {
            
            try
            {
               
                
                if(con != null)
                {
                    
                    con.close();
                    
                }
                if(prepstate != null)
                {
                    
                    prepstate.close();
                    
                }
                if(rs != null)
                {
                    
                    rs.close();
                    
                }
                
            }
            catch(Exception e)
            {
                
                JOptionPane.showMessageDialog(this, e);
                
            }
            
        }
        
    }
    
    private void delete_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_delete_jbKeyPressed
        // TODO add your handling code here:

        if(delete_jb.isEnabled() == true)
        {

            if(evt.getKeyCode() == KeyEvent.VK_ENTER)
            {
                if(price_table_jt.getSelectedRowCount() == 0)
                {

                    JOptionPane.showMessageDialog(this, "Select A Row From The Table.","Error",JOptionPane.ERROR_MESSAGE);

                }
                else
                {

                    delete_data();

                }
            }

        }

    }//GEN-LAST:event_delete_jbKeyPressed

    private void update_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_update_jbMouseClicked
        // TODO add your handling code here:

        if(update_jb.isEnabled() == true)
        {
            if(validation_before_udpate() == true)
            {

                update_data();

            }
        }

    }//GEN-LAST:event_update_jbMouseClicked

    boolean validation_before_udpate()
    {
        
        boolean valid = true;
        
        if(price_table_jt.getSelectedRowCount() == 0)
        {
            
            JOptionPane.showMessageDialog(this, "Select An Item In The Table .","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        else if(portionname_2_jcb.getSelectedItem() == null || portionname_2_jcb.getSelectedItem().toString().equals(""))
        {
            
            JOptionPane.showMessageDialog(this, "Specify a Portion Name.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        else if(price_2_jtf.getText().equals(""))
        {
            
            JOptionPane.showMessageDialog(this, "Enter The Price For The Portion.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        
        return valid;
        
        
    }
    
    private void update_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_update_jbKeyPressed
        // TODO add your handling code here:

        if(update_jb.isEnabled() == true)
        {
            if(evt.getKeyCode() == KeyEvent.VK_ENTER)
            {
                if(validation_before_udpate() == true)
                {

                    update_data();

                }
            }
        }

    }//GEN-LAST:event_update_jbKeyPressed

    void update_data()
    {
        
        boolean error = false;
        boolean proc_complete = true;
        
        Connection con = DatabaseConnection.createConnection();
        PreparedStatement prepstat = null;
        
        try
        {
            
            String dishname = dishname_2_jcb.getSelectedItem().toString();
            String dishcode = dishcode_2_jcb.getSelectedItem().toString();
            String portionname = portionname_2_jcb.getSelectedItem().toString();
            String category = dishCategory2_jcb.getSelectedItem().toString();
            String desc = desc_jta.getText();
            String price = price_2_jtf.getText();
            int selrow = price_table_jt.getSelectedRow();
            String id = price_table_jt.getValueAt(selrow, 4).toString();
          
            String sql = "UPDATE dishes SET item_name=?, item_code = ?, portion=?, price=?, description=?, category=? WHERE id=?";
            prepstat = con.prepareStatement(sql);
            prepstat.setString(1, dishname);
            prepstat.setString(2, dishcode);
            prepstat.setString(3, portionname);
            prepstat.setString(4, price);
            prepstat.setString(5, desc);
            prepstat.setString(6, category);
            prepstat.setString(7, id);
            
            prepstat.execute();
       
            proc_complete = true;
            
        }
        catch(Exception e)
        {
            
            JOptionPane.showMessageDialog(null,"update_data() :"+e);
            error = true;
            
        }
        
        finally
        {
            
            try
            {
               
                
                if(con != null)
                {
                    
                    con.close();
                    
                }
                if(prepstat != null)
                {
                    
                    prepstat.close();
                    
                }
                
            }
            catch(Exception e)
            {
                
                JOptionPane.showMessageDialog(this, e);
                
            }
            
        }
        
        if(error == false && proc_complete == true)
        {
            
            JOptionPane.showMessageDialog(this,"Operation Successful.","Success",JOptionPane.INFORMATION_MESSAGE);
            disable_editable_fields();
            get_price_details();
            load_dishname_2_jcb();
            load_dishcode_2_jcb();
            load_dishCategory2_jcb();
            load_portionname_2_jcb();
            price_2_jtf.setText("");
            desc_jta.setText("");
            clear_all();
            
        }
        
        
    }
    
    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        // TODO add your handling code here:
        
         int index = jTabbedPane1.getSelectedIndex();
       
        if(index == 0)
        {
         
            //this.setSize(720, 597);
            this.setSize(792, 597);
            
            Dimension desktopSize = NewMDIApplication.desktopbg_jlbl.getSize();
            Dimension jInternalFrameSize = this.getSize();
            this.setLocation((desktopSize.width - jInternalFrameSize.width)/2,(desktopSize.height- jInternalFrameSize.height)/2);
            
        }
        else if(index == 1)
        {
            
            this.setSize(829, 543);
            
            load_dishname_2_jcb();
            load_dishcode_2_jcb();
            load_portionname_2_jcb();
            price_2_jtf.setText("");
            
            get_price_details();
            
            Dimension desktopSize = NewMDIApplication.desktopbg_jlbl.getSize();
            Dimension jInternalFrameSize = this.getSize();
            this.setLocation((desktopSize.width - jInternalFrameSize.width)/2,(desktopSize.height- jInternalFrameSize.height)/2);
            
        }
        
    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void remove_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_remove_jbKeyPressed
        // TODO add your handling code here:

        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {

            if(dish_details_jt.getSelectedRowCount() ==  0)
            {

                JOptionPane.showMessageDialog(this, "No Rows Are Selected.","Error",JOptionPane.ERROR_MESSAGE);

            }
            else
            {

                DefaultTableModel dtm = (DefaultTableModel)dish_details_jt.getModel();
                int selectrows[] = dish_details_jt.getSelectedRows();

                for(int i = selectrows.length-1; i >= 0; i--)
                {

                    dtm.removeRow(selectrows[i]);

                }

            }

        }

    }//GEN-LAST:event_remove_jbKeyPressed

    private void remove_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_remove_jbMouseClicked
        // TODO add your handling code here:

        if(dish_details_jt.getSelectedRowCount() ==  0)
        {

            JOptionPane.showMessageDialog(this, "No Rows Are Selected.","Error",JOptionPane.ERROR_MESSAGE);

        }
        else
        {

            DefaultTableModel dtm = (DefaultTableModel)dish_details_jt.getModel();
            int selectrows[] = dish_details_jt.getSelectedRows();

            for(int i = selectrows.length-1; i >= 0; i--)
            {

                dtm.removeRow(selectrows[i]);

            }

        }

    }//GEN-LAST:event_remove_jbMouseClicked

    private void dish_details_jtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dish_details_jtKeyPressed
        // TODO add your handling code here:

        if(evt.getKeyCode() == KeyEvent.VK_TAB)
        {

            remove_jb.requestFocusInWindow();

        }

    }//GEN-LAST:event_dish_details_jtKeyPressed

    private void save_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_save_jbKeyPressed
        // TODO add your handling code here:

        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {

            if(save_jb.isEnabled() == true)
            {
                if(validation_on_save() == true)
                {

                    save_dish_details();

                }
            }

        }

    }//GEN-LAST:event_save_jbKeyPressed

    private void save_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_save_jbMouseClicked
        // TODO add your handling code here:

        if(save_jb.isEnabled() == true)
        {
            if(validation_on_save() == true)
            {

                save_dish_details();

            }
        }

    }//GEN-LAST:event_save_jbMouseClicked

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
        // TODO add your handling code here:

        this.dispose();

    }//GEN-LAST:event_jButton4MouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:

        this.dispose();

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton4KeyPressed
        // TODO add your handling code here:

        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {

            this.dispose();

        }

    }//GEN-LAST:event_jButton4KeyPressed

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:
        
        get_dish_details();
        
    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton2KeyPressed
        // TODO add your handling code here:
        
        if(evt.getKeyCode() == KeyEvent.VK_TAB)
        {
            
            get_dish_details();
            
        }
        
    }//GEN-LAST:event_jButton2KeyPressed

    private void price_jtfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_price_jtfKeyTyped
        // TODO add your handling code here:
        
        String text = price_jtf.getText();
        int lastindex = text.lastIndexOf(".");
        
        char c = evt.getKeyChar();

        if(!(Character.isDigit(c)||(c==KeyEvent.VK_BACK_SPACE)||c==KeyEvent.VK_DELETE||evt.getKeyChar() == '.'))
        {
            //  evt.getKeyChar() == '.' does accept point when jtextfield accepts decimal number
            evt.consume();
            getToolkit().beep();
        
        }
        else if(lastindex >= 0 && !Character.isDigit(c))
        {
            
             evt.consume();
            
        }
        
        
    }//GEN-LAST:event_price_jtfKeyTyped
 
    void newdata()
    {
        
        dishname_jcb.setSelectedItem("");
        dishcode_jcb.setSelectedItem("");
        dish_desc_jtf.setText("");
        dishCategory_jcb.setSelectedItem("");
        dishname_jcb.requestFocusInWindow();
        portion_jcb.setSelectedItem("");
        price_jtf.setText("");
        
        save_jb.setEnabled(true);
        
    }
    
    void clear_all()
    {
        
        dishname_jcb.setSelectedItem("");
        dishcode_jcb.setSelectedItem("");
        dish_desc_jtf.setText("");
        dishCategory_jcb.setSelectedItem("");
        ((DefaultTableModel)dish_details_jt.getModel()).setRowCount(0);
        dishname_jcb.requestFocusInWindow();
        save_jb.setEnabled(true);
        save_jb.setEnabled(true);
        price_jtf.setText("");
       
        load_dishcode_jcb();
        load_dishname_jcb();
        load_dishCategory_jcb();
        load_portion_jcb();
        
    }
  
    void load_portion_jcb()
    {
        
        portion_jcb.removeAllItems();
        
        Connection con = DatabaseConnection.createConnection();
        PreparedStatement prepstate = null;
        ResultSet rs = null;
        
        try
        {
            
            String sql = "SELECT DISTINCT portion FROM dishes";
            prepstate = con.prepareStatement(sql);
            rs = prepstate.executeQuery();
            
            while(rs.next())
            {
                
                String portionname = rs.getString("portion");
                
                portion_jcb.addItem(portionname);
              
            }
            
            portion_jcb.setSelectedItem("");
            
        }
        catch(Exception e)
        {
            
            JOptionPane.showMessageDialog(this, "load_portion_jcb() :"+e);
            
        }
        
        finally
        {
            
            try
            {
               
                
                if(con != null)
                {
                    
                    con.close();
                    
                }
                if(prepstate != null)
                {
                    
                    prepstate.close();
                    
                }
                if(rs != null)
                {
                    
                    rs.close();
                    
                }
                
            }
            catch(Exception e)
            {
                
                JOptionPane.showMessageDialog(this, e);
                
            }
            
        }
        
    }
    
    void save_dish_details()
    {
        
        boolean error = false;
        boolean proc_complete = true;
        
        Connection con = DatabaseConnection.createConnection();
        PreparedStatement prepstat_1 = null;
  
        try
        {
            
            DefaultTableModel dtm = (DefaultTableModel)dish_details_jt.getModel();
            int row_count = dtm.getRowCount();
               
            String dish_name_code = null;
            String dishname = null;
            
            if(dishname_jcb.getSelectedIndex() == -1)
            {
                
                dishname = dishname_jcb.getSelectedItem().toString();
               
                if(dishname.contains("|"))
                {
                    
                    dishname = (dishname.substring(0, dishname.lastIndexOf("|"))).trim();
                    
                }
                
            }
            else if(dishname_jcb.getSelectedIndex() != -1)
            {
                
                dish_name_code = dishname_jcb.getSelectedItem().toString();
                dishname = (dish_name_code.substring(0, dish_name_code.lastIndexOf("|"))).trim();
                
            }
            
            String dishcode = dishcode_jcb.getSelectedItem().toString();
            String desc = dish_desc_jtf.getText();
            String portion = portion_jcb.getSelectedItem().toString();
            String price = price_jtf.getText();
            String category = dishCategory_jcb.getSelectedItem().toString();

            String sql_1 = "INSERT INTO dishes(item_name,item_code,description,portion,price,category) VALUES(?,?,?,?,?,?)";
            prepstat_1 = con.prepareStatement(sql_1);
            prepstat_1.setString(1, dishname);
            prepstat_1.setString(2, dishcode);
            prepstat_1.setString(3, desc);
            prepstat_1.setString(4, portion);
            prepstat_1.setString(5, price);
            prepstat_1.setString(6, category);
            prepstat_1.execute();

            proc_complete = true;
            
        }
        catch(Exception e)
        {
            
            JOptionPane.showMessageDialog(null,"save_dish_details() :"+e);
            error = true;
            
        }
        
        finally
        {
            
            try
            {
               
                
                if(con != null)
                {
                    
                    con.close();
                    
                }
                if(prepstat_1 != null)
                {
                    
                    prepstat_1.close();
                    
                }
         
                
            }
            catch(Exception e)
            {
                
                JOptionPane.showMessageDialog(this, e);
                
            }
            
        }
        
        if(error == false && proc_complete == true)
        {
            
            JOptionPane.showMessageDialog(this,"Operation Successful.","Success",JOptionPane.INFORMATION_MESSAGE);
            get_dish_details();
            save_jb.setEnabled(false);
            newdata_jb.requestFocusInWindow();
            save_status = 1;
        
            
        }
        
        
    }
    
    void get_dish_details()
    {
        
        Connection con = DatabaseConnection.createConnection();
        PreparedStatement prepstate = null;
        ResultSet rs = null;
        
        try
        {
            
             DefaultTableModel dtm = (DefaultTableModel)dish_details_jt.getModel();
             dtm.setRowCount(0);
            
            String sql = "SELECT item_name,item_code,portion,price,id,description,category FROM dishes";
            prepstate = con.prepareStatement(sql);
            rs = prepstate.executeQuery();
            
            while(rs.next())
            {
                
                String dishname = rs.getString("item_name");
                String dishcode = rs.getString("item_code");
                String portionname = rs.getString("portion");
                String price = rs.getString("price");
                String id = rs.getString("id");
                String desc = rs.getString("description");
                String category = rs.getString("category");
                
                String[] arr = new String[]{Integer.toString(dtm.getRowCount()+1),dishname,dishcode,portionname,price,id,desc,category};
                dtm.addRow(arr);
                
            }
              
        }
        catch(Exception e)
        {
            
            JOptionPane.showMessageDialog(this, "load_dishname_jcb() :"+e);
            
        }
        
        finally
        {
            
            try
            {
               
                
                if(con != null)
                {
                    
                    con.close();
                    
                }
                if(prepstate != null)
                {
                    
                    prepstate.close();
                    
                }
                if(rs != null)
                {
                    
                    rs.close();
                    
                }
                
            }
            catch(Exception e)
            {
                
                JOptionPane.showMessageDialog(this, e);
                
            }
            
        }
        
    }
    
    boolean validation_on_save()
    {
        
        boolean valid = true;
        
       
        if(dishname_jcb.getSelectedItem() == null || dishname_jcb.getSelectedItem().toString().equals(""))
        {
            
            JOptionPane.showMessageDialog(this, "Enter a Valid Dish Name.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        else if(dishcode_jcb.getSelectedItem() == null || dishcode_jcb.getSelectedItem().toString().equals(""))
        {
            
            JOptionPane.showMessageDialog(this, "Enter a Valid Dish Code.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        else if(dishname_jcb.getSelectedIndex() == -1 && dishcode_jcb.getSelectedIndex() != -1)
        {
            
            JOptionPane.showMessageDialog(this, "Dish Code Already Used.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }      
        else if(portion_jcb.getSelectedItem() == null || portion_jcb.getSelectedItem().toString().equals(""))
        {
            
            JOptionPane.showMessageDialog(this, "Enter a Valid Portion.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        else if(price_jtf.getText().equals(""))
        {
            
            JOptionPane.showMessageDialog(this, "Enter a Valid Price.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        
        return valid;
        
    }
    
    class price_table_jt_LSL implements ListSelectionListener
    {

        @Override
        public void valueChanged(ListSelectionEvent e) {
            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            
            int selrow = price_table_jt.getSelectedRow();
            
            String dishname = price_table_jt.getValueAt(selrow, 1).toString();
            String portion = price_table_jt.getValueAt(selrow, 2).toString();
            String price = price_table_jt.getValueAt(selrow, 3).toString();
            String id = price_table_jt.getValueAt(selrow, 4).toString();
            String dishcode = price_table_jt.getValueAt(selrow, 5).toString();
            String desc = price_table_jt.getValueAt(selrow, 6).toString();
            String category = price_table_jt.getValueAt(selrow, 7).toString();
            
            dishname_2_jcb.setSelectedItem(dishname);
            dishcode_2_jcb.setSelectedItem(dishcode);
            portionname_2_jcb.setSelectedItem(portion);
            dishCategory2_jcb.setSelectedItem(category);
            price_2_jtf.setText(price);
            desc_jta.setText(desc);
            
        }
        
    }
    
    class AL_dishname_jcb implements ActionListener
    {

        @Override
        public void actionPerformed(ActionEvent e) {
            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            
            if(dishname_jcb.getSelectedIndex() != -1)
            {
                String dish_name_code = dishname_jcb.getSelectedItem().toString();
                String dish_code = (dish_name_code.substring(dish_name_code.lastIndexOf("|")+1, dish_name_code.length())).trim();

                dishcode_jcb.setSelectedItem(dish_code);
                
                dishcode_jcb.setEnabled(false);
                
            }
            else
            {
                
                dishcode_jcb.setSelectedItem("");
                
                dishcode_jcb.setEnabled(true);
                
            }
            
        }
          
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton close_jb;
    private javax.swing.JButton delete_jb;
    private javax.swing.JTextArea desc_jta;
    private javax.swing.JComboBox<String> dishCategory2_jcb;
    private javax.swing.JComboBox<String> dishCategory_jcb;
    private javax.swing.JTextField dish_desc_jtf;
    private javax.swing.JTable dish_details_jt;
    private javax.swing.JComboBox dishcode_2_jcb;
    private javax.swing.JComboBox dishcode_jcb;
    private javax.swing.JComboBox dishname_2_jcb;
    private javax.swing.JComboBox dishname_jcb;
    private javax.swing.JButton editfields_jb;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton newdata_jb;
    private javax.swing.JComboBox portion_jcb;
    private javax.swing.JComboBox portionname_2_jcb;
    private javax.swing.JTextField price_2_jtf;
    private javax.swing.JTextField price_jtf;
    private javax.swing.JTable price_table_jt;
    private javax.swing.JButton remove_jb;
    private javax.swing.JButton save_jb;
    private javax.swing.JButton update_jb;
    // End of variables declaration//GEN-END:variables
}
