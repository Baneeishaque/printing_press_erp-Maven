package DSST007_1_CUS13.pll;

import DSST007_1_CUS13.bll.CutWorkOrder;
import DSST007_1_CUS13.dal.CutWorkOrderEntry_DAL;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.math.BigDecimal;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author praveen
 */
public class CutWorkOrderEntry extends javax.swing.JInternalFrame {

    private static CutWorkOrderEntry MyInstance;
    
    public CutWorkOrderEntry() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        customer_jcb = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        workOrder_jl = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        workOrderDate_jdc = new com.toedter.calendar.JDateChooser();
        jLabel5 = new javax.swing.JLabel();
        deliveryDate_jdc = new com.toedter.calendar.JDateChooser();
        jLabel6 = new javax.swing.JLabel();
        workName_jcb = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        sideLenght_jtf = new javax.swing.JTextField();
        sideBreadth_jtf = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        rolls_jtf = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        beadingLength_jtf = new javax.swing.JTextField();
        beadingBreadth_jtf = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        rate_jtf = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        stringLength_jtf = new javax.swing.JTextField();
        stringBreadth_jtf = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        colour_jcb = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        supplier_jcb = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        mfr_jcb = new javax.swing.JComboBox<>();
        centimeter_jrb = new javax.swing.JRadioButton();
        inches_jrb = new javax.swing.JRadioButton();
        jLabel16 = new javax.swing.JLabel();
        cutterNote_jtf = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel3 = new javax.swing.JPanel();
        save_jb = new javax.swing.JButton();
        new_jb = new javax.swing.JButton();
        close_jb = new javax.swing.JButton();
        gsm_jcb = new javax.swing.JComboBox<>();
        jSeparator2 = new javax.swing.JSeparator();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255)));
        setClosable(true);
        setTitle("Transactions > Cut Work Order");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/DSST007_1_CUS13/InstabizTrader Logo Final 35x35.png"))); // NOI18N
        addInternalFrameListener(new javax.swing.event.InternalFrameListener()
        {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt)
            {
                formInternalFrameOpened(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt)
            {
                formInternalFrameClosed(evt);
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt)
            {
            }
        });

        jPanel1.setBackground(new java.awt.Color(242, 242, 255));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel1.setText("Customer :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel1.add(jLabel1, gridBagConstraints);

        customer_jcb.setEditable(true);
        customer_jcb.setPreferredSize(new java.awt.Dimension(250, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel1.add(customer_jcb, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel2.setText("Work Order :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel1.add(jLabel2, gridBagConstraints);

        workOrder_jl.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        workOrder_jl.setText("--");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        jPanel1.add(workOrder_jl, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel4.setText("Order Date :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel4, gridBagConstraints);

        workOrderDate_jdc.setBackground(new java.awt.Color(242, 242, 255));
        workOrderDate_jdc.setDateFormatString("dd-MMM-yyyy");
        workOrderDate_jdc.setPreferredSize(new java.awt.Dimension(140, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(workOrderDate_jdc, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel5.setText("Delivery Date :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel5, gridBagConstraints);

        deliveryDate_jdc.setBackground(new java.awt.Color(242, 242, 255));
        deliveryDate_jdc.setDateFormatString("dd-MMM-yyyy");
        deliveryDate_jdc.setPreferredSize(new java.awt.Dimension(140, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel1.add(deliveryDate_jdc, gridBagConstraints);

        jLabel6.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel6.setText("Job Name :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel6, gridBagConstraints);

        workName_jcb.setEditable(true);
        workName_jcb.setPreferredSize(new java.awt.Dimension(300, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(workName_jcb, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel7.setText("GSM :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel7, gridBagConstraints);

        jPanel2.setBackground(new java.awt.Color(242, 242, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Measurement"));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel8.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel8.setText("Side :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel2.add(jLabel8, gridBagConstraints);

        sideLenght_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel2.add(sideLenght_jtf, gridBagConstraints);

        sideBreadth_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel2.add(sideBreadth_jtf, gridBagConstraints);

        jLabel9.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel9.setText("Rolls :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 0);
        jPanel2.add(jLabel9, gridBagConstraints);

        rolls_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel2.add(rolls_jtf, gridBagConstraints);

        jLabel10.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel10.setText("Beading :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        jPanel2.add(jLabel10, gridBagConstraints);

        beadingLength_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        jPanel2.add(beadingLength_jtf, gridBagConstraints);

        beadingBreadth_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        jPanel2.add(beadingBreadth_jtf, gridBagConstraints);

        jLabel11.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel11.setText("Rate :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 0);
        jPanel2.add(jLabel11, gridBagConstraints);

        rate_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        jPanel2.add(rate_jtf, gridBagConstraints);

        jLabel12.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel12.setText("String :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(jLabel12, gridBagConstraints);

        stringLength_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(stringLength_jtf, gridBagConstraints);

        stringBreadth_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(stringBreadth_jtf, gridBagConstraints);

        jLabel13.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel13.setText("Colour :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel2.add(jLabel13, gridBagConstraints);

        jLabel17.setText("X");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel2.add(jLabel17, gridBagConstraints);

        jLabel18.setText("X");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        jPanel2.add(jLabel18, gridBagConstraints);

        jLabel19.setText("X");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        jPanel2.add(jLabel19, gridBagConstraints);

        colour_jcb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Select-", "Violet", "Indigo", "Blue", "Green", "Yellow", "Orange", "Red" }));
        colour_jcb.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(colour_jcb, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel1.add(jPanel2, gridBagConstraints);

        jLabel14.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel14.setText("Supplier :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel14, gridBagConstraints);

        supplier_jcb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Select-", "Regal", "Party" }));
        supplier_jcb.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(supplier_jcb, gridBagConstraints);

        jLabel15.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel15.setText("Manufacturer :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel15, gridBagConstraints);

        mfr_jcb.setEditable(true);
        mfr_jcb.setPreferredSize(new java.awt.Dimension(250, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(mfr_jcb, gridBagConstraints);

        centimeter_jrb.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        centimeter_jrb.setText("Centimeter");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel1.add(centimeter_jrb, gridBagConstraints);

        inches_jrb.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        inches_jrb.setText("Inches");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel1.add(inches_jrb, gridBagConstraints);

        jLabel16.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel16.setText("Cutter Note :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel16, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel1.add(cutterNote_jtf, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel1.add(jSeparator1, gridBagConstraints);

        jPanel3.setBackground(new java.awt.Color(242, 242, 255));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        save_jb.setBackground(new java.awt.Color(185, 197, 31));
        save_jb.setText("Save");
        save_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        save_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                save_jbMouseClicked(evt);
            }
        });
        save_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                save_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel3.add(save_jb, gridBagConstraints);

        new_jb.setBackground(new java.awt.Color(86, 132, 191));
        new_jb.setText("New");
        new_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        new_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                new_jbMouseClicked(evt);
            }
        });
        new_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                new_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel3.add(new_jb, gridBagConstraints);

        close_jb.setBackground(new java.awt.Color(86, 132, 191));
        close_jb.setMnemonic('c');
        close_jb.setText("Close");
        close_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        close_jb.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                close_jbActionPerformed(evt);
            }
        });
        close_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                close_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        jPanel3.add(close_jb, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 15, 0);
        jPanel1.add(jPanel3, gridBagConstraints);

        gsm_jcb.setEditable(true);
        gsm_jcb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "110" }));
        gsm_jcb.setPreferredSize(new java.awt.Dimension(100, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel1.add(gsm_jcb, gridBagConstraints);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel1.add(jSeparator2, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setBounds(0, 0, 612, 366);
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:
 
        formInternalFrame_Opened();
        
    }//GEN-LAST:event_formInternalFrameOpened

    private void formInternalFrame_Opened()
    {
       
        Dimension desktopSize = NewMDIApplication.desktopbg_jlbl.getSize();
        Dimension jInternalFrameSize = this.getSize();
        this.setLocation((desktopSize.width - jInternalFrameSize.width)/2,(desktopSize.height- jInternalFrameSize.height)/2);
        //----------------------------
        
        generateWorkorderId();
        load_customer_jcb();
        SearchableCombobox searchableCombobox_1 = new SearchableCombobox(customer_jcb);
        ((JTextField)customer_jcb.getEditor().getEditorComponent()).addKeyListener(searchableCombobox_1); 
        load_manufacturer_jcb();
        SearchableCombobox searchableCombobox_2 = new SearchableCombobox(mfr_jcb);
        ((JTextField)mfr_jcb.getEditor().getEditorComponent()).addKeyListener(searchableCombobox_2); 
        load_workName_jcb();
        SearchableCombobox searchableCombobox_3 = new SearchableCombobox(workName_jcb);
        ((JTextField)workName_jcb.getEditor().getEditorComponent()).addKeyListener(searchableCombobox_3);
    }
    
    private void load_customer_jcb()
    {
        
        try
        {
            customer_jcb.removeAllItems();
            
            CutWorkOrder cutWorkOrder = new CutWorkOrder();
            ArrayList<String> custNameArray = cutWorkOrder.getCustomerNames();
            
            for(int i = 0 ; i < custNameArray.size() ; i ++)
            {
                String customers = custNameArray.get(i);
                customer_jcb.addItem(customers);
            }
            
            customer_jcb.setSelectedItem("");
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, "load_customer_jcb() : "+e);
        }
    }
    
    private void load_manufacturer_jcb()
    {
        try
        {
            mfr_jcb.removeAllItems();
            
            CutWorkOrder cutWorkOrder = new CutWorkOrder();
            List<String> mfrList = cutWorkOrder.getMfrList();
            
            for(int i = 0 ; i < mfrList.size() ; i ++)
            {
                String mfrname = mfrList.get(i);
                mfr_jcb.addItem(mfrname);
            }
          
            mfr_jcb.setSelectedItem("");
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, "load_manufacturer_jcb() : "+e);
        }
    }
    
    private void load_workName_jcb()
    {
        try
        {
            workName_jcb.removeAllItems();
            
            CutWorkOrder cutWorkOrder = new CutWorkOrder();
            List<String> jobNameList = cutWorkOrder.getJobNames();
            
            for(int i = 0 ; i < jobNameList.size() ; i ++)
            {
                String mfrname = jobNameList.get(i);
                workName_jcb.addItem(mfrname);
            }
          
            workName_jcb.setSelectedItem("");
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, "load_workName_jcb() : "+e);
        }
    }
    
    private void generateWorkorderId()
    {
        try
        {
            Date date = new Date();
            SimpleDateFormat sdf = new SimpleDateFormat("MMM-yy");
            String date_str = sdf.format(date).toUpperCase();
            CutWorkOrderEntry_DAL cutWorkOrderEntry_DAL = new CutWorkOrderEntry_DAL();
            CutWorkOrderEntry_DAL.GetWorkOrderNo getWorkOrderNo = cutWorkOrderEntry_DAL.new GetWorkOrderNo();
            getWorkOrderNo.setWorkOrderNo();
            
            String newWorkOrderid;
            
            if(getWorkOrderNo.getWorkOrderNoExistStatus() == false)
            {
                newWorkOrderid = date_str +"-"+ 1;
            }
            else
            {
                String oldWorkId = getWorkOrderNo.getWorkOrderNo();
                String workOrderNo_str = oldWorkId.substring(oldWorkId.lastIndexOf("-")+1, oldWorkId.length()).trim();
                int newWorkOrderNo = Integer.parseInt(workOrderNo_str) + 1;
                newWorkOrderid = (date_str+"-"+Integer.toString(newWorkOrderNo)).toUpperCase();
            }
            
            workOrder_jl.setText(newWorkOrderid);
        }
        catch (SQLException ex)
        {
            JOptionPane.showMessageDialog(this, ex);
        }
    }
    
    public static CutWorkOrderEntry getInstance() // Method
    {
        if (MyInstance == null)
	{
            MyInstance = new CutWorkOrderEntry();
	}
        return MyInstance;
    }

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        // TODO add your handling code here:

        MyInstance = null;

    }//GEN-LAST:event_formInternalFrameClosed

    private void save_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_save_jbMouseClicked
        // TODO add your handling code here:
       if(save_jb.isEnabled() == true)
       {
           save_jb_MouseClicked();
       }
    }//GEN-LAST:event_save_jbMouseClicked

    private void new_jbMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_new_jbMouseClicked
    {//GEN-HEADEREND:event_new_jbMouseClicked
        newData();
    }//GEN-LAST:event_new_jbMouseClicked

    private void close_jbActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_close_jbActionPerformed
    {//GEN-HEADEREND:event_close_jbActionPerformed
        this.dispose();
    }//GEN-LAST:event_close_jbActionPerformed

    private void close_jbKeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_close_jbKeyPressed
    {//GEN-HEADEREND:event_close_jbKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            this.dispose();
        }
    }//GEN-LAST:event_close_jbKeyPressed

    private void new_jbKeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_new_jbKeyPressed
    {//GEN-HEADEREND:event_new_jbKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            newData();
        }
    }//GEN-LAST:event_new_jbKeyPressed

    private void save_jbKeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_save_jbKeyPressed
    {//GEN-HEADEREND:event_save_jbKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            saveWorkOrderDetails();
        }
    }//GEN-LAST:event_save_jbKeyPressed

    private void save_jb_MouseClicked()
    {
        if(save_jb.isEnabled() == true)
        {
            if(validationOnSave() == true)
            {
                saveWorkOrderDetails();
            }
        }
    }

    private boolean validationOnSave()
    {
        
        boolean valid = true;
        
        if(customer_jcb.getSelectedItem() == null || customer_jcb.getSelectedItem().toString().equals("") || customer_jcb.getSelectedIndex() == -1)
        {

            JOptionPane.showMessageDialog(this, "Specify a valid Customer.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;

        }
        else if(workOrderDate_jdc.getDate() == null)
        {

            JOptionPane.showMessageDialog(this, "Specify a valid Work Order Date.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;

        }
        else if(deliveryDate_jdc.getDate() == null)
        {

            JOptionPane.showMessageDialog(this, "Specify a valid Delivery Date.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;

        }
        else if(((JTextField)workName_jcb.getEditor().getEditorComponent()).getText().equals(""))
        {

            JOptionPane.showMessageDialog(this, "Specify a Job Name.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;

        }
        else if(isDigit(gsm_jcb.getSelectedItem().toString()) == false)
        {

            JOptionPane.showMessageDialog(this, "Specify GSM.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;

        }
        else if(isDecimalNumber(sideLenght_jtf.getText()) == false)
        {
            
            JOptionPane.showMessageDialog(this, "Side (Length) not in proper format.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            sideLenght_jtf.requestFocusInWindow();
            
        }
        else if(isDecimalNumber(sideBreadth_jtf.getText()) == false)
        {
            
            JOptionPane.showMessageDialog(this, "Side (Breadth) not in proper format.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            sideBreadth_jtf.requestFocusInWindow();
            
        }
        else if(isDecimalNumber(stringLength_jtf.getText()) == false)
        {
            
            JOptionPane.showMessageDialog(this, "String (Length) not in proper format.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            stringLength_jtf.requestFocusInWindow();
            
        }
        else if(isDecimalNumber(stringBreadth_jtf.getText()) == false)
        {
            
            JOptionPane.showMessageDialog(this, "String (Breadth) not in proper format.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            stringBreadth_jtf.requestFocusInWindow();
            
        }
        else if(isDecimalNumber(beadingLength_jtf.getText()) == false)
        {
            
            JOptionPane.showMessageDialog(this, "Beading (Length) not in proper format.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            beadingLength_jtf.requestFocusInWindow();
            
        }
        else if(isDecimalNumber(beadingBreadth_jtf.getText()) == false)
        {
            
            JOptionPane.showMessageDialog(this, "Beading (Breadth) not in proper format.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            beadingBreadth_jtf.requestFocusInWindow();
            
        }
        else if(isDecimalNumber(rolls_jtf.getText()) == false)
        {
            
            JOptionPane.showMessageDialog(this, "Specify Rolls.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            rolls_jtf.requestFocusInWindow();
            
        }
        else if(colour_jcb.getSelectedItem().toString().equals("-Select-"))
        {

            JOptionPane.showMessageDialog(this, "Specify a valid Colour.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;

        }
        else if(isDecimalNumber(rate_jtf.getText()) == false)
        {
            
            JOptionPane.showMessageDialog(this, "Specify Rate.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            rate_jtf.requestFocusInWindow();
            
        }
        else if(centimeter_jrb.isSelected() == false && inches_jrb.isSelected() == false)
        {

            JOptionPane.showMessageDialog(this, "Specify unit of measurement (Centimeter/Inches).","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;

        }
        else if(supplier_jcb.getSelectedItem().toString().equals("-Select-") )
        {

            JOptionPane.showMessageDialog(this, "Specify a Supplier.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;

        }
        else if(mfr_jcb.getSelectedItem() == null || mfr_jcb.getSelectedItem().toString().equals("") || mfr_jcb.getSelectedIndex() == -1)
        {

            JOptionPane.showMessageDialog(this, "Specify a valid Manufacturer.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;

        }
        
        return valid;
        
    }
    
    public static boolean isDigit( String str )
    {
        boolean valid = true;
        
        try
        {
            Integer.parseInt(str);
        }
        catch (Exception e)
        {
            valid = false;
        }
        
        return valid;
    }
    
    public static boolean isDecimalNumber( String str )
    {
        boolean valid = true;
        
        try
        {
           new BigDecimal(str);
        }
        catch (Exception e)
        {
            valid = false;
        }
        
        return valid;
    }
    
    private void saveWorkOrderDetails()
    {
        boolean error = false;
        
        try
        {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
            
            CutWorkOrder cutWorkOrder = new CutWorkOrder();
            cutWorkOrder.setCustomer(((JTextField)customer_jcb.getEditor().getEditorComponent()).getText());
            cutWorkOrder.setWork_order_id(workOrder_jl.getText());
            cutWorkOrder.setOrder_date(sdf.format(workOrderDate_jdc.getDate()));
            cutWorkOrder.setDelivery_date(sdf.format(deliveryDate_jdc.getDate()));
            cutWorkOrder.setWork_name(((JTextField)workName_jcb.getEditor().getEditorComponent()).getText());
            cutWorkOrder.setGsm(((JTextField)gsm_jcb.getEditor().getEditorComponent()).getText());
            cutWorkOrder.setSide_length(sideLenght_jtf.getText());
            cutWorkOrder.setSide_breadth(sideBreadth_jtf.getText());
            cutWorkOrder.setString_length(stringLength_jtf.getText());
            cutWorkOrder.setString_breadth(stringBreadth_jtf.getText());
            cutWorkOrder.setBeading_breadth(beadingBreadth_jtf.getText());
            cutWorkOrder.setBeading_length(beadingLength_jtf.getText());
            cutWorkOrder.setRolls(rolls_jtf.getText());
            cutWorkOrder.setColour(colour_jcb.getSelectedItem().toString());
            cutWorkOrder.setRate(rate_jtf.getText());
            cutWorkOrder.setSupplier(supplier_jcb.getSelectedItem().toString());
            cutWorkOrder.setManufacturer(((JTextField)mfr_jcb.getEditor().getEditorComponent()).getText());
            //get uom
            String uom = null;
            if(centimeter_jrb.isSelected() == true)
            {
                uom = "centimeter";
            }
            else if(inches_jrb.isSelected() == true)
            {
                uom = "inch";
            }
            cutWorkOrder.setU_o_m(uom);
            cutWorkOrder.setCutter_note(cutterNote_jtf.getText());
           
            cutWorkOrder.insertWorkOrderDetailsToDB(cutWorkOrder);
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, "saveWorkOrderDetails() : "+e);
            error = true;
        }
        
        if(error == false)
        {
            JOptionPane.showMessageDialog(this, "Operation Successful.", "Success", JOptionPane.INFORMATION_MESSAGE);
            save_jb.setEnabled(false);
            new_jb.requestFocusInWindow();
        }
    }
    
    private void newData()
    {
        customer_jcb.setSelectedItem("");
        generateWorkorderId();
        workOrderDate_jdc.setDate(null);
        deliveryDate_jdc.setDate(null);
        load_workName_jcb();
        gsm_jcb.setSelectedItem("");
        sideLenght_jtf.setText("");
        sideBreadth_jtf.setText("");
        stringLength_jtf.setText("");
        stringBreadth_jtf.setText("");
        beadingLength_jtf.setText("");
        beadingBreadth_jtf.setText("");
        rolls_jtf.setText("");
        colour_jcb.setSelectedItem("-Select-");
        rate_jtf.setText("");
        supplier_jcb.setSelectedItem("-Select-");
        centimeter_jrb.setSelected(false);
        inches_jrb.setSelected(false);
        mfr_jcb.setSelectedItem("");
        cutterNote_jtf.setText("");
        customer_jcb.requestFocusInWindow();
        save_jb.setEnabled(true);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField beadingBreadth_jtf;
    private javax.swing.JTextField beadingLength_jtf;
    private javax.swing.JRadioButton centimeter_jrb;
    private javax.swing.JButton close_jb;
    private javax.swing.JComboBox<String> colour_jcb;
    private javax.swing.JComboBox<String> customer_jcb;
    private javax.swing.JTextField cutterNote_jtf;
    private com.toedter.calendar.JDateChooser deliveryDate_jdc;
    private javax.swing.JComboBox<String> gsm_jcb;
    private javax.swing.JRadioButton inches_jrb;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JComboBox<String> mfr_jcb;
    private javax.swing.JButton new_jb;
    private javax.swing.JTextField rate_jtf;
    private javax.swing.JTextField rolls_jtf;
    private javax.swing.JButton save_jb;
    private javax.swing.JTextField sideBreadth_jtf;
    private javax.swing.JTextField sideLenght_jtf;
    private javax.swing.JTextField stringBreadth_jtf;
    private javax.swing.JTextField stringLength_jtf;
    private javax.swing.JComboBox<String> supplier_jcb;
    private javax.swing.JComboBox<String> workName_jcb;
    private com.toedter.calendar.JDateChooser workOrderDate_jdc;
    private javax.swing.JLabel workOrder_jl;
    // End of variables declaration//GEN-END:variables
}
