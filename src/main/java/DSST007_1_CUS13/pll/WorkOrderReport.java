package DSST007_1_CUS13.pll;

import DSST007_1_CUS13.bll.WorkOrderStatement;
import DSST007_1_CUS13.dal.WorkOrderStatement_DAL;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.text.JTextComponent;
import ndk.printing_press.bll.CustomerBLL;
import ndk.printing_press.dal.CustomerDAL;
import ndk.printing_press.model.CustomerModal;
import ndk.to_java_utils.BigDecimalUtils;

public class WorkOrderReport extends javax.swing.JInternalFrame {

    private static WorkOrderReport myInstance;

    public WorkOrderReport() {

        initComponents();

        if (!WorkOrderEntry.customerId.isEmpty()) {

            fromdate_jdc.setEnabled(false);
            todate_jdc.setEnabled(false);
            search_jb.setEnabled(false);
            writetoexcel_jb.setEnabled(false);
            populateCustomerWorkOrders(WorkOrderEntry.customerId);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        totalcount_jtf = new javax.swing.JTextField();
        jLabelBalance = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        searchresults_jt = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        fromdate_jdc = new com.toedter.calendar.JDateChooser();
        jLabel9 = new javax.swing.JLabel();
        todate_jdc = new com.toedter.calendar.JDateChooser();
        search_jb = new javax.swing.JButton();
        jComboBoxCustomer = new javax.swing.JComboBox<>();
        writetoexcel_jb = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255)));
        setClosable(true);
        setTitle("Reports > Print Work Order");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/DSST007_1_CUS13/InstabizTrader Logo Final 35x35.png"))); // NOI18N
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(242, 242, 255));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel3.setBackground(new java.awt.Color(242, 242, 255));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabel2.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        jLabel2.setText("Total Count :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel3.add(jLabel2, gridBagConstraints);

        totalcount_jtf.setEditable(false);
        totalcount_jtf.setBackground(new java.awt.Color(255, 255, 153));
        totalcount_jtf.setPreferredSize(new java.awt.Dimension(130, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
        jPanel3.add(totalcount_jtf, gridBagConstraints);

        jLabelBalance.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabelBalance.setText("Balance : 0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 2, 0);
        jPanel3.add(jLabelBalance, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 5);
        jPanel1.add(jPanel3, gridBagConstraints);

        jPanel4.setBackground(new java.awt.Color(242, 242, 255));
        jPanel4.setFocusable(false);
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setPreferredSize(new java.awt.Dimension(962, 400));
        jScrollPane2.setRequestFocusEnabled(false);

        searchresults_jt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        searchresults_jt.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        searchresults_jt.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SNo", "WorkOrderID", "JobName", "OrderDate", "Customer", "DelDate", "DelTime", "Demi", "Sheets", "Plate", "Design", "ColourPlate", "DelStatus"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        searchresults_jt.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        searchresults_jt.setFillsViewportHeight(true);
        searchresults_jt.setRowHeight(23);
        searchresults_jt.setSelectionBackground(new java.awt.Color(86, 132, 191));
        jScrollPane2.setViewportView(searchresults_jt);
        if (searchresults_jt.getColumnModel().getColumnCount() > 0) {
            searchresults_jt.getColumnModel().getColumn(0).setMinWidth(50);
            searchresults_jt.getColumnModel().getColumn(0).setPreferredWidth(50);
            searchresults_jt.getColumnModel().getColumn(1).setMinWidth(130);
            searchresults_jt.getColumnModel().getColumn(1).setPreferredWidth(130);
            searchresults_jt.getColumnModel().getColumn(2).setMinWidth(130);
            searchresults_jt.getColumnModel().getColumn(2).setPreferredWidth(130);
            searchresults_jt.getColumnModel().getColumn(3).setMinWidth(100);
            searchresults_jt.getColumnModel().getColumn(3).setPreferredWidth(100);
            searchresults_jt.getColumnModel().getColumn(4).setMinWidth(130);
            searchresults_jt.getColumnModel().getColumn(4).setPreferredWidth(130);
            searchresults_jt.getColumnModel().getColumn(5).setMinWidth(100);
            searchresults_jt.getColumnModel().getColumn(5).setPreferredWidth(100);
            searchresults_jt.getColumnModel().getColumn(6).setMinWidth(100);
            searchresults_jt.getColumnModel().getColumn(6).setPreferredWidth(100);
            searchresults_jt.getColumnModel().getColumn(7).setMinWidth(100);
            searchresults_jt.getColumnModel().getColumn(7).setPreferredWidth(100);
            searchresults_jt.getColumnModel().getColumn(8).setMinWidth(100);
            searchresults_jt.getColumnModel().getColumn(8).setPreferredWidth(100);
            searchresults_jt.getColumnModel().getColumn(9).setMinWidth(100);
            searchresults_jt.getColumnModel().getColumn(9).setPreferredWidth(100);
            searchresults_jt.getColumnModel().getColumn(10).setMinWidth(100);
            searchresults_jt.getColumnModel().getColumn(10).setPreferredWidth(100);
            searchresults_jt.getColumnModel().getColumn(11).setMinWidth(100);
            searchresults_jt.getColumnModel().getColumn(11).setPreferredWidth(100);
            searchresults_jt.getColumnModel().getColumn(12).setMinWidth(100);
            searchresults_jt.getColumnModel().getColumn(12).setPreferredWidth(100);
        }
        searchresults_jt.getAccessibleContext().setAccessibleName("");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 6;
        jPanel4.add(jScrollPane2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(jPanel4, gridBagConstraints);

        jPanel5.setBackground(new java.awt.Color(242, 242, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel5.setNextFocusableComponent(fromdate_jdc);
        jPanel5.setLayout(new java.awt.GridBagLayout());

        fromdate_jdc.setBackground(new java.awt.Color(242, 242, 255));
        fromdate_jdc.setDateFormatString("d-MMM-yyyy");
        fromdate_jdc.setPreferredSize(new java.awt.Dimension(140, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 2, 0);
        jPanel5.add(fromdate_jdc, gridBagConstraints);

        jLabel9.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel9.setText("From :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 2, 0);
        jPanel5.add(jLabel9, gridBagConstraints);

        todate_jdc.setBackground(new java.awt.Color(242, 242, 255));
        todate_jdc.setDateFormatString("d-MMM-yyyy");
        todate_jdc.setPreferredSize(new java.awt.Dimension(140, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 2, 0);
        jPanel5.add(todate_jdc, gridBagConstraints);

        search_jb.setBackground(new java.awt.Color(185, 197, 31));
        search_jb.setText("Search");
        search_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        search_jb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                search_jbMouseClicked(evt);
            }
        });
        search_jb.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                search_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 2, 0);
        jPanel5.add(search_jb, gridBagConstraints);

        jComboBoxCustomer.setEditable(true);
        jComboBoxCustomer.setPreferredSize(new java.awt.Dimension(170, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel5.add(jComboBoxCustomer, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(jPanel5, gridBagConstraints);

        writetoexcel_jb.setBackground(new java.awt.Color(86, 132, 191));
        writetoexcel_jb.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        writetoexcel_jb.setText("Export");
        writetoexcel_jb.setPreferredSize(new java.awt.Dimension(125, 20));
        writetoexcel_jb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                writetoexcel_jbMousePressed(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                writetoexcel_jbMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                writetoexcel_jbMouseEntered(evt);
            }
        });
        writetoexcel_jb.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                writetoexcel_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 2, 0);
        jPanel1.add(writetoexcel_jb, gridBagConstraints);

        jPanel2.setBackground(new java.awt.Color(242, 242, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jButton3.setBackground(new java.awt.Color(86, 132, 191));
        jButton3.setMnemonic('s');
        jButton3.setText("Close");
        jButton3.setPreferredSize(new java.awt.Dimension(100, 27));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jButton3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton3KeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 15, 0);
        jPanel2.add(jButton3, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        setBounds(0, 0, 964, 562);
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened

        this.setLocation(218, 2);
        ((JTextComponent) fromdate_jdc.getDateEditor().getUiComponent()).setEditable(false);
        jScrollPane2.getVerticalScrollBar().setUnitIncrement(12);
        getfirstDate();
        todate_jdc.setDate(new Date());

        fromdate_jdc.setEnabled(false);
        todate_jdc.setEnabled(false);

        loadCustomers();
    }//GEN-LAST:event_formInternalFrameOpened

    public static WorkOrderReport getInstance() {

        if (myInstance == null) {

            myInstance = new WorkOrderReport();
        }
        return myInstance;
    }

    private void getfirstDate() {

        Connection con = DatabaseConnection.createConnection();

        try {
            SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
            SimpleDateFormat sdf2 = new SimpleDateFormat("dd-MM-yyyy", Locale.getDefault());

            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * FROM customer_registration");

            if (rs.first()) {

                Date regdate = sdf2.parse(sdf2.format(sdf1.parse(rs.getString("regdate"))));
                fromdate_jdc.setDate(regdate);
            }

        } catch (SQLException | ParseException e) {

            JOptionPane.showMessageDialog(null, e);

        } finally {

            if (con != null) {

                try {

                    con.close();

                } catch (SQLException ex) {

                    JOptionPane.showMessageDialog(null, ex);
                }
            }
        }
    }

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed

        myInstance = null;
    }//GEN-LAST:event_formInternalFrameClosed

    private void writeToExcel() {

        try {
            if (searchresults_jt.getRowCount() == 0) {

                JOptionPane.showMessageDialog(this, "There are no table data to export.", "Error", JOptionPane.ERROR_MESSAGE);

            } else {

                SimpleDateFormat sdf1 = new SimpleDateFormat("dd-MMM-yyyy", Locale.getDefault());
                String filename = "Customers_Report-From_" + sdf1.format(fromdate_jdc.getDate()) + "_To_" + sdf1.format(todate_jdc.getDate());

                JFileChooser fileChooser = new JFileChooser();
                fileChooser.setSelectedFile(new File(filename + ".xls"));
                FileNameExtensionFilter filter = new FileNameExtensionFilter("Microsoft Excel", ".xls");
                fileChooser.addChoosableFileFilter(filter);

                FileWriter fw = null;

                fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));

                int result = fileChooser.showSaveDialog(this);
                if (result == JFileChooser.APPROVE_OPTION) {
                    File path = fileChooser.getSelectedFile();

                    if (path != null) {

                        fw = new FileWriter(path);
                        fw.write("\n");

                        TableModel tm = searchresults_jt.getModel();
                        for (int i = 0; i < tm.getColumnCount(); i++) {
                            fw.write(tm.getColumnName(i) + "\t");
                        }
                        fw.write("\n");

                        for (int i = 0; i < tm.getRowCount(); i++) {

                            for (int j = 0; j < tm.getColumnCount(); j++) {

                                String cellValue;
                                if (tm.getValueAt(i, j) != null) {

                                    cellValue = tm.getValueAt(i, j).toString();

                                } else {

                                    cellValue = "";
                                }
                                fw.write(cellValue + "\t");
                            }
                            fw.write("\n");
                        }
                    }
                    fw.close();
                }
            }

        } catch (HeadlessException | IOException e) {

            JOptionPane.showMessageDialog(null, e);
        }
    }

    private void searchResults() {

        Connection con = DatabaseConnection.createConnection();

        try {

            if (((JTextComponent) fromdate_jdc.getDateEditor().getUiComponent()).getText().isEmpty()) {

                JOptionPane.showMessageDialog(this, "Please specify From Date.", "Error", JOptionPane.ERROR_MESSAGE);

            } else if (((JTextComponent) todate_jdc.getDateEditor().getUiComponent()).getText().isEmpty()) {

                JOptionPane.showMessageDialog(this, "Please specify To Date.", "Error", JOptionPane.ERROR_MESSAGE);

            } else if (todate_jdc.getDate().compareTo(fromdate_jdc.getDate()) == -1) {

                JOptionPane.showMessageDialog(this, "'From Date' should be lower than 'To Date'.", "Error", JOptionPane.ERROR_MESSAGE);

            } else {

                SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
                SimpleDateFormat sdf2 = new SimpleDateFormat("dd-MM-yyyy", Locale.getDefault());
                DefaultTableModel jTableModel1 = (DefaultTableModel) searchresults_jt.getModel();

                jTableModel1.setRowCount(0);

                String fromdate = sdf1.format(fromdate_jdc.getDate());
                String todate = sdf1.format(todate_jdc.getDate());

                String[] strarr;

                Statement stmt = con.createStatement();
                ResultSet rs = stmt.executeQuery("SELECT * FROM print_work_order WHERE orderdate BETWEEN '" + fromdate + "' AND '" + todate + "'  ");

                while (rs.next()) {

                    String workorderid = rs.getString("workorderid");
                    String desc = rs.getString("description");
                    String orderdate = sdf2.format(sdf1.parse(rs.getString("orderdate")));
                    String customer = rs.getString("customer");
                    String deldate = sdf2.format(sdf1.parse(rs.getString("delivery_date")));
                    String deltime = rs.getString("deliverytime") + rs.getString("am_pm");
                    String demitype = rs.getString("demitype");
                    String sheets = rs.getString("sheets");
                    String plate = rs.getString("plate");
                    String design = rs.getString("design");
                    String colour_plate = rs.getString("colour_plate");
                    String status = rs.getString("status");

                    int rowcnt = searchresults_jt.getRowCount();

                    strarr = new String[]{Integer.toString(rowcnt + 1), workorderid, desc, orderdate, customer, deldate, deltime, demitype, sheets, plate, design, colour_plate, status};

                    jTableModel1.addRow(strarr);

                    String itemcount = Integer.toString(rowcnt + 1);
                    totalcount_jtf.setText(itemcount);
                }
            }
        } catch (HeadlessException | SQLException | ParseException e) {

            JOptionPane.showMessageDialog(null, e);

        } finally {

            if (con != null) {
                try {

                    con.close();

                } catch (SQLException ex) {

                    JOptionPane.showMessageDialog(null, ex);
                }
            }
        }
    }

    private void searchForCustomerWorkOrders() {

        if (jComboBoxCustomer.getSelectedIndex() == -1) {

            JOptionPane.showMessageDialog(this, "Please specify Customer...", "Error", JOptionPane.ERROR_MESSAGE);

        } else {

            populateCustomerWorkOrders(jComboBoxCustomer.getSelectedItem().toString());
        }
    }

    private void jButton3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton3KeyPressed

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            this.dispose();
        }
    }//GEN-LAST:event_jButton3KeyPressed

    private void writetoexcel_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_writetoexcel_jbKeyPressed

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            writeToExcel();
        }
    }//GEN-LAST:event_writetoexcel_jbKeyPressed

    private void writetoexcel_jbMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_writetoexcel_jbMousePressed

        writeToExcel();
    }//GEN-LAST:event_writetoexcel_jbMousePressed

    private void search_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_search_jbKeyPressed

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            searchForCustomerWorkOrders();
        }
    }//GEN-LAST:event_search_jbKeyPressed

    private void writetoexcel_jbMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_writetoexcel_jbMouseEntered

        writetoexcel_jb.setForeground(Color.RED);
    }//GEN-LAST:event_writetoexcel_jbMouseEntered

    private void writetoexcel_jbMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_writetoexcel_jbMouseExited

        writetoexcel_jb.setForeground(Color.BLACK);
    }//GEN-LAST:event_writetoexcel_jbMouseExited

    private void search_jbMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_search_jbMouseClicked
    {//GEN-HEADEREND:event_search_jbMouseClicked
        searchForCustomerWorkOrders();
    }//GEN-LAST:event_search_jbMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser fromdate_jdc;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBoxCustomer;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelBalance;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane2;
    public static javax.swing.JButton search_jb;
    public static javax.swing.JTable searchresults_jt;
    private com.toedter.calendar.JDateChooser todate_jdc;
    private javax.swing.JTextField totalcount_jtf;
    private javax.swing.JButton writetoexcel_jb;
    // End of variables declaration//GEN-END:variables

    private void populateCustomerWorkOrders(String customerId) {

        WorkOrderStatement_DAL workOrderStatement_DAL = new WorkOrderStatement_DAL();
        List<WorkOrderStatement> workOrderStatements = workOrderStatement_DAL.getWorkOrderStatementsForCustomer(customerId);

        DefaultTableModel jTableModel1 = (DefaultTableModel) searchresults_jt.getModel();
        jTableModel1.setRowCount(0);

        int rowCount = 0;
        BigDecimal balance = BigDecimalUtils.zeroBigDecimal;
        for (WorkOrderStatement workOrderStatement : workOrderStatements) {

            jTableModel1.addRow(new String[]{Integer.toString(++rowCount), workOrderStatement.getWork_order_no(), workOrderStatement.getDescription(), workOrderStatement.getJobdate(), workOrderStatement.getCustomer(), "", "", "", workOrderStatement.getQuantity(), workOrderStatement.getPlate(), workOrderStatement.getDesign(), "", ""});
            balance = balance.add(new BigDecimal(workOrderStatement.getBalance_amt()));

        }
        totalcount_jtf.setText(String.valueOf(rowCount));
        jLabelBalance.setText("Balance : " + BigDecimalUtils.getTwoPiontsRoundedBigDecimal(balance).toPlainString());
    }

    private void loadCustomers() {

        CustomerBLL customerBLL = new CustomerBLL();
        List<CustomerModal> customers = customerBLL.getCustomers();

        customers.forEach(customer -> {

            jComboBoxCustomer.addItem(customer.getName());
        });
    }
}
