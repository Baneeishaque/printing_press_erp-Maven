/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package DSST007_1_CUS13.pll;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author praveen
 */
public class Accounts_Income_Voucher_Edit extends javax.swing.JInternalFrame {

    private static Accounts_Income_Voucher_Edit instance;
    expensedetails_jt_listSelectionListener pnt = new expensedetails_jt_listSelectionListener();
    int initial_status;
    int current_status;
    String initial_bank;
    BigDecimal initial_amount;
    
    public Accounts_Income_Voucher_Edit() {
        initComponents();
    }

    public static Accounts_Income_Voucher_Edit getInstance()
    {
        
        if (instance == null)
            instance = new Accounts_Income_Voucher_Edit();

        return instance;
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        receiptno_jcb = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        incomedetails_jt = new javax.swing.JTable();
        showdetails_jb = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        incometype_jcb = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        incomeitem_jcb = new javax.swing.JComboBox();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        description_jtf = new javax.swing.JTextField();
        from_jtf = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        date_jtf = new com.toedter.calendar.JDateChooser();
        amount_jtf = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        to_bank_jchkbx = new javax.swing.JCheckBox();
        banklist_jcb = new javax.swing.JComboBox();
        to_cash_jchkbx = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel5 = new javax.swing.JPanel();
        edit_jb = new javax.swing.JButton();
        update_jb = new javax.swing.JButton();
        close_jb = new javax.swing.JButton();
        showalldetails_jb = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255)));
        setClosable(true);
        setTitle("View/Edit -> Incomes");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/DSST007_1_CUS13/InstabizTrader Logo Final 35x35.png"))); // NOI18N
        addInternalFrameListener(new javax.swing.event.InternalFrameListener()
        {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt)
            {
                formInternalFrameOpened(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt)
            {
                formInternalFrameClosing(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt)
            {
                formInternalFrameClosed(evt);
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt)
            {
            }
        });

        jPanel1.setBackground(new java.awt.Color(242, 242, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel1.setText("Receipt No :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 2, 0);
        jPanel1.add(jLabel1, gridBagConstraints);

        receiptno_jcb.setEditable(true);
        receiptno_jcb.setPreferredSize(new java.awt.Dimension(200, 25));
        receiptno_jcb.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                receiptno_jcbActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 2, 0);
        jPanel1.add(receiptno_jcb, gridBagConstraints);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(858, 350));

        incomedetails_jt.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        incomedetails_jt.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "SNo", "Date", "ExpenseType", "ExpenseItem", "Description", "From", "Amount", "id"
            }
        )
        {
            boolean[] canEdit = new boolean []
            {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        incomedetails_jt.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        incomedetails_jt.setFillsViewportHeight(true);
        incomedetails_jt.setRowHeight(23);
        incomedetails_jt.setSelectionBackground(new java.awt.Color(86, 132, 191));
        incomedetails_jt.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusGained(java.awt.event.FocusEvent evt)
            {
                incomedetails_jtFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                incomedetails_jtFocusLost(evt);
            }
        });
        jScrollPane1.setViewportView(incomedetails_jt);
        if (incomedetails_jt.getColumnModel().getColumnCount() > 0)
        {
            incomedetails_jt.getColumnModel().getColumn(0).setMinWidth(50);
            incomedetails_jt.getColumnModel().getColumn(0).setPreferredWidth(50);
            incomedetails_jt.getColumnModel().getColumn(1).setMinWidth(100);
            incomedetails_jt.getColumnModel().getColumn(1).setPreferredWidth(100);
            incomedetails_jt.getColumnModel().getColumn(2).setMinWidth(150);
            incomedetails_jt.getColumnModel().getColumn(2).setPreferredWidth(150);
            incomedetails_jt.getColumnModel().getColumn(3).setMinWidth(150);
            incomedetails_jt.getColumnModel().getColumn(3).setPreferredWidth(150);
            incomedetails_jt.getColumnModel().getColumn(4).setMinWidth(150);
            incomedetails_jt.getColumnModel().getColumn(4).setPreferredWidth(150);
            incomedetails_jt.getColumnModel().getColumn(5).setMinWidth(150);
            incomedetails_jt.getColumnModel().getColumn(5).setPreferredWidth(150);
            incomedetails_jt.getColumnModel().getColumn(6).setMinWidth(100);
            incomedetails_jt.getColumnModel().getColumn(6).setPreferredWidth(100);
            incomedetails_jt.getColumnModel().getColumn(7).setMinWidth(0);
            incomedetails_jt.getColumnModel().getColumn(7).setPreferredWidth(0);
            incomedetails_jt.getColumnModel().getColumn(7).setMaxWidth(0);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        jPanel1.add(jScrollPane1, gridBagConstraints);

        showdetails_jb.setBackground(new java.awt.Color(185, 197, 31));
        showdetails_jb.setText("Show Details");
        showdetails_jb.setPreferredSize(new java.awt.Dimension(110, 27));
        showdetails_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                showdetails_jbMouseClicked(evt);
            }
        });
        showdetails_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                showdetails_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 2, 5);
        jPanel1.add(showdetails_jb, gridBagConstraints);

        jPanel2.setBackground(new java.awt.Color(242, 242, 255));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel4.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel4.setText("Income Category :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 0);
        jPanel2.add(jLabel4, gridBagConstraints);

        incometype_jcb.setEnabled(false);
        incometype_jcb.setPreferredSize(new java.awt.Dimension(200, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(incometype_jcb, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel5.setText("Income Item :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 78, 0, 0);
        jPanel2.add(jLabel5, gridBagConstraints);

        incomeitem_jcb.setEnabled(false);
        incomeitem_jcb.setPreferredSize(new java.awt.Dimension(200, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(incomeitem_jcb, gridBagConstraints);

        jPanel3.setBackground(new java.awt.Color(242, 242, 255));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabel6.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel6.setText("Description :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 16, 0, 0);
        jPanel3.add(jLabel6, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel7.setText("From :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 17, 0, 0);
        jPanel3.add(jLabel7, gridBagConstraints);

        description_jtf.setEnabled(false);
        description_jtf.setPreferredSize(new java.awt.Dimension(300, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel3.add(description_jtf, gridBagConstraints);

        from_jtf.setEnabled(false);
        from_jtf.setPreferredSize(new java.awt.Dimension(300, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel3.add(from_jtf, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
        jPanel2.add(jPanel3, gridBagConstraints);

        jPanel4.setBackground(new java.awt.Color(242, 242, 255));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jLabel2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel2.setText("Date :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 16, 0, 0);
        jPanel4.add(jLabel2, gridBagConstraints);

        date_jtf.setBackground(new java.awt.Color(242, 242, 255));
        date_jtf.setDateFormatString("d-MMM- y");
        date_jtf.setEnabled(false);
        date_jtf.setPreferredSize(new java.awt.Dimension(140, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel4.add(date_jtf, gridBagConstraints);

        amount_jtf.setEnabled(false);
        amount_jtf.setPreferredSize(new java.awt.Dimension(110, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel4.add(amount_jtf, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel3.setText("Amount :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 164, 0, 0);
        jPanel4.add(jLabel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 52, 0, 0);
        jPanel2.add(jPanel4, gridBagConstraints);

        to_bank_jchkbx.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        to_bank_jchkbx.setText("To Bank :");
        to_bank_jchkbx.setEnabled(false);
        to_bank_jchkbx.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                to_bank_jchkbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel2.add(to_bank_jchkbx, gridBagConstraints);

        banklist_jcb.setEditable(true);
        banklist_jcb.setEnabled(false);
        banklist_jcb.setPreferredSize(new java.awt.Dimension(250, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(banklist_jcb, gridBagConstraints);

        to_cash_jchkbx.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        to_cash_jchkbx.setText("To Cash");
        to_cash_jchkbx.setEnabled(false);
        to_cash_jchkbx.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                to_cash_jchkbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(to_cash_jchkbx, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        jPanel1.add(jPanel2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(jSeparator1, gridBagConstraints);

        jPanel5.setBackground(new java.awt.Color(242, 242, 255));
        jPanel5.setLayout(new java.awt.GridBagLayout());

        edit_jb.setBackground(new java.awt.Color(185, 197, 31));
        edit_jb.setText("Edit");
        edit_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        edit_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                edit_jbMouseClicked(evt);
            }
        });
        edit_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                edit_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel5.add(edit_jb, gridBagConstraints);

        update_jb.setBackground(new java.awt.Color(185, 197, 31));
        update_jb.setText("Update");
        update_jb.setEnabled(false);
        update_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        update_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                update_jbMouseClicked(evt);
            }
        });
        update_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                update_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel5.add(update_jb, gridBagConstraints);

        close_jb.setBackground(new java.awt.Color(86, 132, 191));
        close_jb.setText("Close");
        close_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        close_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                close_jbMouseClicked(evt);
            }
        });
        close_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                close_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        jPanel5.add(close_jb, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 15, 0);
        jPanel1.add(jPanel5, gridBagConstraints);

        showalldetails_jb.setBackground(new java.awt.Color(185, 197, 31));
        showalldetails_jb.setText("Show All");
        showalldetails_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        showalldetails_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                showalldetails_jbMouseClicked(evt);
            }
        });
        showalldetails_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                showalldetails_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 2, 0);
        jPanel1.add(showalldetails_jb, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        setBounds(0, 0, 862, 575);
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        
        instance = null;
        
    }//GEN-LAST:event_formInternalFrameClosed

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        
        instance = null;
        
    }//GEN-LAST:event_formInternalFrameClosing

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened

        
        Dimension desktopSize = NewMDIApplication.desktopbg_jlbl.getSize();
        Dimension jInternalFrameSize = this.getSize();
        this.setLocation((desktopSize.width - jInternalFrameSize.width)/2,(desktopSize.height- jInternalFrameSize.height)/2);
        //-----------------------------------
        
        load_receiptno_jcb();
        AutoCompleteDecorator.decorate(receiptno_jcb);
           
        to_bank_jchkbx.setEnabled(false);
        banklist_jcb.setEnabled(false);
        to_cash_jchkbx.setEnabled(false);
        
        load_banklist_jcb();
        AutoCompleteDecorator.decorate(banklist_jcb);
        
        load_incomeItem_jcb();
        load_incomeType_jcb();
        
    }//GEN-LAST:event_formInternalFrameOpened

    private void load_incomeType_jcb()
    {
        
        Connection con = DatabaseConnection.createConnection();
        
         
        try
        {
            boolean stat = false;
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT DISTINCT income_type FROM income_types ");
            
            while(rs.next())
            {

                String income_type = rs.getString("income_type");
                incometype_jcb.addItem(income_type);
                
            }    
      
            incometype_jcb.addItem("");
            incometype_jcb.setSelectedItem("");
            
        }
        catch(Exception e)
        {
             
            JOptionPane.showMessageDialog(null, e);
             
        }
        finally
                {
                    
                    if(con!=null)
                    {
                        try {
                            con.close();
                        } catch (SQLException ex) {
                            JOptionPane.showMessageDialog(null, ex);
                        }
                        
                    }
                    
                }
        
    }
    
    private void load_incomeItem_jcb()
    {
        
        Connection con = DatabaseConnection.createConnection();
        
         
        try
        {
            boolean stat = false;
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT DISTINCT income_item FROM income_items ");
            
            while(rs.next())
            {

                String income_item = rs.getString("income_item");
                incomeitem_jcb.addItem(income_item);
                
            }    
      
            incomeitem_jcb.addItem("");
            incomeitem_jcb.setSelectedItem("");
            
        }
        catch(Exception e)
        {
             
            JOptionPane.showMessageDialog(null, e);
             
        }
        finally
                {
                    
                    if(con!=null)
                    {
                        try {
                            con.close();
                        } catch (SQLException ex) {
                            JOptionPane.showMessageDialog(null, ex);
                        }
                        
                    }
                    
                }
        
    }
    
    void load_banklist_jcb()
    {
        
        Connection con = DatabaseConnection.createConnection();
        PreparedStatement prepstmt = null;
        banklist_jcb.removeAllItems();

        try {
            
            String sql = "SELECT DISTINCT bank_name FROM banks";
            prepstmt = con.prepareStatement(sql);
            ResultSet rs = prepstmt.executeQuery();
            while (rs.next()) {

                String banknames = rs.getString("bank_name");
               
                banklist_jcb.addItem(banknames);

            }
            
            banklist_jcb.addItem("");
            banklist_jcb.setSelectedItem("");
           
        } catch (Exception e) {

            JOptionPane.showMessageDialog(null, e);

        } finally {

            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex);
                }
            }
            
            if (prepstmt != null) {
                try {
                    prepstmt.close();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex);
                }
            }
            
            
        }       
        
    }
    
    private void close_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_close_jbKeyPressed
        // TODO add your handling code here:

        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {

            this.dispose();

        }

    }//GEN-LAST:event_close_jbKeyPressed

    private void close_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_close_jbMouseClicked

        this.dispose();

    }//GEN-LAST:event_close_jbMouseClicked

    private void update_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_update_jbMouseClicked

        if(update_jb.isEnabled())
        {

            if(validation_on_update() == true)
            {

                update();

            }

        }

    }//GEN-LAST:event_update_jbMouseClicked

    private void edit_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edit_jbKeyPressed
        // TODO add your handling code here:

        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {

            if(incomedetails_jt.getSelectedRow() == -1)
            {

                JOptionPane.showMessageDialog(this,"Select a row to Edit.","Error",JOptionPane.ERROR_MESSAGE);

            }
            else
            {

                enabled();

            }

        }

    }//GEN-LAST:event_edit_jbKeyPressed

    private void edit_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_edit_jbMouseClicked

        if(incomedetails_jt.getSelectedRow() == -1)
        {

            JOptionPane.showMessageDialog(this,"Select a row to Edit.","Error",JOptionPane.ERROR_MESSAGE);

        }
        else
        {

            enabled();

        }

    }//GEN-LAST:event_edit_jbMouseClicked

    private void showdetails_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_showdetails_jbKeyPressed
        // TODO add your handling code here:

        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {

            if(receiptno_jcb.getSelectedIndex() == -1)
            {

                JOptionPane.showMessageDialog(this,"Select a valid Receipt Number.","Error",JOptionPane.ERROR_MESSAGE); 

            }
            else
            {

                viewdetail();

            }

        }

    }//GEN-LAST:event_showdetails_jbKeyPressed

    private void showdetails_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showdetails_jbMouseClicked
        // TODO add your handling code here:

        if(receiptno_jcb.getSelectedIndex() == -1)
        {
            
            JOptionPane.showMessageDialog(this,"Select a valid Receipt Number.","Error",JOptionPane.ERROR_MESSAGE); 
            
        }
        else
        {
            
            viewdetail();
            
        }
        
       

    }//GEN-LAST:event_showdetails_jbMouseClicked

    private void incomedetails_jtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_incomedetails_jtFocusLost

        ListSelectionModel selectionModel = incomedetails_jt.getSelectionModel();
        selectionModel.removeListSelectionListener(pnt);

    }//GEN-LAST:event_incomedetails_jtFocusLost

    private void incomedetails_jtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_incomedetails_jtFocusGained

        ListSelectionModel selectionModel = incomedetails_jt.getSelectionModel();
        selectionModel.addListSelectionListener(pnt);

    }//GEN-LAST:event_incomedetails_jtFocusGained

    private void showalldetails_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showalldetails_jbMouseClicked
        // TODO add your handling code here:
        
         viewList();
        
    }//GEN-LAST:event_showalldetails_jbMouseClicked

    private void receiptno_jcbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receiptno_jcbActionPerformed
        // TODO add your handling code here:
        
        ((DefaultTableModel)incomedetails_jt.getModel()).setRowCount(0);
        incometype_jcb.setSelectedItem("");
        incomeitem_jcb.setSelectedItem("");
        description_jtf.setText("");
        from_jtf.setText("");
        date_jtf.setDate(null);
        amount_jtf.setText("");
        
    }//GEN-LAST:event_receiptno_jcbActionPerformed

    private void to_bank_jchkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_to_bank_jchkbxActionPerformed
        // TODO add your handling code here:
        
        if(to_bank_jchkbx.isSelected() == true)
        {
            
            banklist_jcb.setEnabled(true);
            to_cash_jchkbx.setSelected(false);
            
        }
        
        
    }//GEN-LAST:event_to_bank_jchkbxActionPerformed

    private void to_cash_jchkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_to_cash_jchkbxActionPerformed
        // TODO add your handling code here:
        
        if(to_cash_jchkbx.isSelected() == true)
        {
            
            to_bank_jchkbx.setSelected(false);
            banklist_jcb.setEnabled(false);
            
        }
        
    }//GEN-LAST:event_to_cash_jchkbxActionPerformed

    private void update_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_update_jbKeyPressed
        // TODO add your handling code here:
        
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            
            if(update_jb.isEnabled())
            {

                if(validation_on_update() == true)
                {

                    update();

                }

            }
            
        }
        
    }//GEN-LAST:event_update_jbKeyPressed

    private void showalldetails_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_showalldetails_jbKeyPressed
        // TODO add your handling code here:
        
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            
            viewList();
            
        }
        
    }//GEN-LAST:event_showalldetails_jbKeyPressed

    private void load_receiptno_jcb()
    {
        
        Connection con = DatabaseConnection.createConnection();
        
         
        try
        {
            boolean stat = false;
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT DISTINCT receipt_no FROM income_voucher ");
            
            while(rs.next())
            {

                String voucher_no = rs.getString("receipt_no");
                receiptno_jcb.addItem(voucher_no);
                
            }    
      
            receiptno_jcb.setSelectedItem("");
            
        }
        catch(Exception e)
        {
             
            JOptionPane.showMessageDialog(null, e);
             
        }
        finally
                {
                    
                    if(con!=null)
                    {
                        try {
                            con.close();
                        } catch (SQLException ex) {
                            JOptionPane.showMessageDialog(null, ex);
                        }
                        
                    }
                    
                }
        
    }
    
    private void enabled(){
    
        incometype_jcb.setEnabled(true);
        incomeitem_jcb.setEnabled(true);
        description_jtf.setEnabled(true);
        from_jtf.setEnabled(true);
        date_jtf.setEnabled(true);
        amount_jtf.setEnabled(true);
        update_jb.setEnabled(true);
        ((JTextField)date_jtf.getDateEditor().getUiComponent()).setBackground(Color.white);
        to_bank_jchkbx.setEnabled(true);
        banklist_jcb.setEnabled(true);
        to_cash_jchkbx.setEnabled(true);
        
    }
    private boolean validation_on_update()
    {
        
        boolean valid = true;
        
        if(incometype_jcb.getSelectedItem() == null || incometype_jcb.getSelectedItem().toString().equals(""))
        {

            JOptionPane.showMessageDialog(this,"Specify a valid Income Type.","Error",JOptionPane.ERROR_MESSAGE); 
            valid = false;

        }
        else if(incomeitem_jcb.getSelectedItem() == null || incomeitem_jcb.getSelectedItem().toString().equals(""))
        {

            JOptionPane.showMessageDialog(this,"Specify a valid Income Item.","Error",JOptionPane.ERROR_MESSAGE); 
            valid = false;

        }
//        if(description_jtf.getText().equals(""))
//        {
//
//            JOptionPane.showMessageDialog(this,"Enter a Description for this transaction.","Error",JOptionPane.ERROR_MESSAGE); 
//            valid = false;
//
//        }
        else if(date_jtf.getDate() == null)
        {

            JOptionPane.showMessageDialog(this,"Specify a Date.","Error",JOptionPane.ERROR_MESSAGE); 
            valid = false;

        }
        else if(amount_jtf.getText().equals(""))
        {

            JOptionPane.showMessageDialog(this,"Specify an Amount.","Error",JOptionPane.ERROR_MESSAGE); 
            valid = false;

        }
        else if(banklist_jcb.getSelectedItem() == null || banklist_jcb.getSelectedItem().toString().equals(""))
        {

            JOptionPane.showMessageDialog(this,"Specify a Bank.","Error",JOptionPane.ERROR_MESSAGE); 
            valid = false;

        }
        else if(banklist_jcb.getSelectedIndex() == -1)
        {

            JOptionPane.showMessageDialog(this,"Select a Bank from The List.","Error",JOptionPane.ERROR_MESSAGE); 
            valid = false;

        }
        
        return valid;
        
    }
    
    private void update()
    {
        
        boolean error = false;
        boolean status = false;
        Connection conn = DatabaseConnection.createConnection();
        
        PreparedStatement prepstat_1 = null;
        ResultSet rs_1 = null;
        
        try 
        {
            
            int row = incomedetails_jt.getSelectedRow();
            String id = incomedetails_jt.getModel().getValueAt(row, 7).toString();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd",Locale.getDefault());
            String entry_date = sdf.format(date_jtf.getDate());
             
            String to_bank = null;
            String to_cash = null;
            BigDecimal current_amount = new BigDecimal(amount_jtf.getText());
             
                if(to_bank_jchkbx.isSelected() == true)
                {

                    to_bank = banklist_jcb.getSelectedItem().toString();
                    to_cash = "NA";
                    current_status = 1;


                }
                else if(to_cash_jchkbx.isSelected() == true)
                {

                    to_bank = "NA";
                    to_cash = "yes";
                    current_status = 2;
                    
                }
                
                if(initial_status != current_status)
                {
                    
                    if(initial_amount.compareTo(current_amount) != 0)
                    {
                        
                        JOptionPane.showMessageDialog(this,"You cannot transfer and change the Amount at the same time.\nExecute the Transfer first, then update the Amount.","Error",JOptionPane.ERROR_MESSAGE);
                        
                    }
                    else
                    {
                        if(current_status == 1)
                        {

                            BigDecimal amount = new BigDecimal(amount_jtf.getText());
                            BigDecimal amt_from_cash = new BigDecimal("0");
                            BigDecimal amt_from_bank = new BigDecimal("0");
                            BigDecimal new_amount_bank = new BigDecimal("0");
                            BigDecimal new_amount_cash = new BigDecimal("0");
                            boolean cash_at_bank_found = false;

                            String sql_1 = "SELECT amount FROM cash_at_hand_acc";
                            prepstat_1 = conn.prepareStatement(sql_1);
                            rs_1 = prepstat_1.executeQuery();

                            while(rs_1.next())
                            {

                                amt_from_cash = new BigDecimal(rs_1.getString("amount"));
                                new_amount_cash = amt_from_cash.subtract(amount);

                            }

                            prepstat_1.close();
                            rs_1.close();

                            String bank_selected = banklist_jcb.getSelectedItem().toString();

                            String sql_2 = "SELECT amount FROM cash_at_bank_acc WHERE bank_name=? ";
                            prepstat_1 = conn.prepareStatement(sql_2);
                            prepstat_1.setString(1, bank_selected);
                            rs_1 = prepstat_1.executeQuery();
                            while(rs_1.next())
                            {

                                cash_at_bank_found = true;

                                amt_from_bank = new BigDecimal(rs_1.getString("amount"));
                                new_amount_bank = amt_from_bank.add(amount);

                            }

                            prepstat_1.close();
                            rs_1.close();


                            if(cash_at_bank_found == true)
                            {

                                String sql_3 = "UPDATE cash_at_bank_acc SET bank_name=?, amount=? WHERE bank_name =? ";
                                prepstat_1 = conn.prepareStatement(sql_3);
                                prepstat_1.setString(1, bank_selected);
                                prepstat_1.setString(2, new_amount_bank.toString());
                                prepstat_1.setString(3, bank_selected);
                                prepstat_1.executeUpdate();
                                prepstat_1.close();

                                String sql_4 = "UPDATE cash_at_hand_acc SET amount=? ";
                                prepstat_1 = conn.prepareStatement(sql_4);
                                prepstat_1.setString(1, new_amount_cash.toString());
                                prepstat_1.executeUpdate();
                                prepstat_1.close();

                                String sql_7 = "UPDATE income_voucher SET entrydate=?,income_type=?,income_item=?,description=?,from_=?,amount=?,to_bank=?,to_cash=? WHERE id= '"+id+"' ";
                                prepstat_1 = conn.prepareStatement(sql_7);
                                prepstat_1.setString(1,entry_date);
                                prepstat_1.setString(2,incometype_jcb.getSelectedItem().toString());
                                prepstat_1.setString(3,incomeitem_jcb.getSelectedItem().toString());
                                prepstat_1.setString(4,description_jtf.getText());
                                prepstat_1.setString(5,from_jtf.getText()); 
                                prepstat_1.setString(6,amount_jtf.getText());
                                prepstat_1.setString(7,to_bank);
                                prepstat_1.setString(8,to_cash);
                                prepstat_1.executeUpdate(); 

                                prepstat_1.close();

                                 status = true; 

                            }
                            else
                            {

                                amt_from_bank = new BigDecimal("0");
                                new_amount_bank = amt_from_bank.add(amount);

                                String sql_5 = "INSERT INTO cash_at_bank_acc(bank_name,amount) VALUES(?,?)";
                                prepstat_1 = conn.prepareStatement(sql_5);
                                prepstat_1.setString(1, to_bank);
                                prepstat_1.setString(2, new_amount_bank.toString());
                                prepstat_1.executeUpdate();

                                prepstat_1.close();

                                String sql_6 = "UPDATE cash_at_hand_acc SET amount=? ";
                                prepstat_1 = conn.prepareStatement(sql_6);
                                prepstat_1.setString(1, new_amount_cash.toString());
                                prepstat_1.executeUpdate();

                                prepstat_1.close();

                                String sql_7 = "UPDATE income_voucher SET entrydate=?,income_type=?,income_item=?,description=?,from_=?,amount=?,to_bank=?,to_cash=? WHERE id= '"+id+"' ";
                                prepstat_1 = conn.prepareStatement(sql_7);
                                prepstat_1.setString(1,entry_date);
                                prepstat_1.setString(2,incometype_jcb.getSelectedItem().toString());
                                prepstat_1.setString(3,incomeitem_jcb.getSelectedItem().toString());
                                prepstat_1.setString(4,description_jtf.getText());
                                prepstat_1.setString(5,from_jtf.getText()); 
                                prepstat_1.setString(6,amount_jtf.getText());
                                prepstat_1.setString(7,to_bank);
                                prepstat_1.setString(8,to_cash);
                                prepstat_1.executeUpdate(); 

                                prepstat_1.close();

                                status = true;  

                            }
                            
                        }
                        else if(current_status == 2)
                        {

                            BigDecimal amount = new BigDecimal(amount_jtf.getText());
                            BigDecimal amt_from_cash = new BigDecimal("0");
                            BigDecimal amt_from_bank = new BigDecimal("0");
                            BigDecimal new_amount_bank = new BigDecimal("0");
                            BigDecimal new_amount_cash = new BigDecimal("0");
                            boolean cash_at_hand_found = false;
                            String bank_selected = banklist_jcb.getSelectedItem().toString();

                            String sql_1 = "SELECT amount FROM cash_at_bank_acc WHERE bank_name=?";
                            prepstat_1 = conn.prepareStatement(sql_1);
                            prepstat_1.setString(1, bank_selected);
                            rs_1 = prepstat_1.executeQuery();

                            while(rs_1.next())
                            {

                                amt_from_bank = new BigDecimal(rs_1.getString("amount"));
                                new_amount_bank = amt_from_bank.subtract(amount);

                            }

                            prepstat_1.close();
                            rs_1.close();

                            String sql_2 = "SELECT amount FROM cash_at_hand_acc";
                            prepstat_1 = conn.prepareStatement(sql_2);
                            rs_1 = prepstat_1.executeQuery();
                            while(rs_1.next())
                            {

                                cash_at_hand_found = true;

                                amt_from_cash = new BigDecimal(rs_1.getString("amount"));
                                new_amount_cash = amt_from_cash.add(amount);

                            }

                            prepstat_1.close();
                            rs_1.close();


                            if(cash_at_hand_found == true)
                            {

                                String sql_3 = "UPDATE cash_at_bank_acc SET bank_name=?, amount=? WHERE bank_name =? ";
                                prepstat_1 = conn.prepareStatement(sql_3);
                                prepstat_1.setString(1, bank_selected);
                                prepstat_1.setString(2, new_amount_bank.toString());
                                prepstat_1.setString(3, bank_selected);
                                prepstat_1.executeUpdate();
                                prepstat_1.close();

                                String sql_4 = "UPDATE cash_at_hand_acc SET amount=? ";
                                prepstat_1 = conn.prepareStatement(sql_4);
                                prepstat_1.setString(1, new_amount_cash.toString());
                                prepstat_1.executeUpdate();
                                prepstat_1.close();

                                String sql_7 = "UPDATE income_voucher SET entrydate=?,income_type=?,income_item=?,description=?,from_=?,amount=?,to_bank=?,to_cash=? WHERE id= '"+id+"' ";
                                prepstat_1 = conn.prepareStatement(sql_7);
                                prepstat_1.setString(1,entry_date);
                                prepstat_1.setString(2,incometype_jcb.getSelectedItem().toString());
                                prepstat_1.setString(3,incomeitem_jcb.getSelectedItem().toString());
                                prepstat_1.setString(4,description_jtf.getText());
                                prepstat_1.setString(5,from_jtf.getText()); 
                                prepstat_1.setString(6,amount_jtf.getText());
                                prepstat_1.setString(7,to_bank);
                                prepstat_1.setString(8,to_cash);
                                prepstat_1.executeUpdate(); 

                                prepstat_1.close();

                                 status = true; 

                            }
                            else
                            {

                                amt_from_cash = new BigDecimal("0");
                                new_amount_cash = amt_from_cash.add(amount);

                                String sql_5 = "INSERT INTO cash_at_hand_acc(amount) VALUES(?)";
                                prepstat_1 = conn.prepareStatement(sql_5);
                                prepstat_1.setString(1, new_amount_cash.toString());
                                prepstat_1.executeUpdate();

                                prepstat_1.close();

                                String sql_6 = "UPDATE cash_at_bank_acc SET bank_name=?, amount=? WHERE bank_name =? ";
                                prepstat_1 = conn.prepareStatement(sql_6);
                                prepstat_1.setString(1, bank_selected);
                                prepstat_1.setString(2, new_amount_bank.toString());
                                prepstat_1.setString(3, bank_selected);
                                prepstat_1.executeUpdate();

                                prepstat_1.close();

                                String sql_7 = "UPDATE income_voucher SET entrydate=?,income_type=?,income_item=?,description=?,from_=?,amount=?,to_bank=?,to_cash=? WHERE id= '"+id+"' ";
                                prepstat_1 = conn.prepareStatement(sql_7);
                                prepstat_1.setString(1,entry_date);
                                prepstat_1.setString(2,incometype_jcb.getSelectedItem().toString());
                                prepstat_1.setString(3,incomeitem_jcb.getSelectedItem().toString());
                                prepstat_1.setString(4,description_jtf.getText());
                                prepstat_1.setString(5,from_jtf.getText()); 
                                prepstat_1.setString(6,amount_jtf.getText());
                                prepstat_1.setString(7,to_bank);
                                prepstat_1.setString(8,to_cash);
                                prepstat_1.executeUpdate(); 

                                prepstat_1.close();

                                status = true;  

                            }

                        }
                        
                    }
                    
                }
                else
                {
                    
                    int comp = initial_amount.compareTo(current_amount);
                    BigDecimal amount = new BigDecimal(amount_jtf.getText());
                    BigDecimal amt_from_cash = new BigDecimal("0");
                    BigDecimal amt_from_bank = new BigDecimal("0");
                    BigDecimal new_amount_bank = new BigDecimal("0");
                    BigDecimal new_amount_cash = new BigDecimal("0");
                    boolean cash_at_hand_found = false;
                    String bank_selected = banklist_jcb.getSelectedItem().toString();
                    
                    BigDecimal deducted_val = null;
                    System.out.println(deducted_val);

                    if(initial_status == 1)
                    {

                        if(comp == 1)
                        {

                            deducted_val = initial_amount.subtract(amount);
                            
                            String sql_1 = "SELECT amount FROM cash_at_bank_acc WHERE bank_name=?";
                            prepstat_1 = conn.prepareStatement(sql_1);
                            prepstat_1.setString(1, bank_selected);
                            rs_1 = prepstat_1.executeQuery();
                            while(rs_1.next())
                            {

                                amt_from_bank = new BigDecimal(rs_1.getString("amount"));
                                new_amount_bank = amt_from_bank.subtract(deducted_val);

                            }

                            prepstat_1.close();
                            rs_1.close();

                            String sql_6 = "UPDATE cash_at_bank_acc SET bank_name=?, amount=? WHERE bank_name =? ";
                            prepstat_1 = conn.prepareStatement(sql_6);
                            prepstat_1.setString(1, bank_selected);
                            prepstat_1.setString(2, new_amount_bank.toString());
                            prepstat_1.setString(3, bank_selected);
                            prepstat_1.executeUpdate();
                            prepstat_1.close();

                            String sql_7 = "UPDATE income_voucher SET entrydate=?,income_type=?,income_item=?,description=?,from_=?,amount=?,to_bank=?,to_cash=? WHERE id= '"+id+"' ";
                            prepstat_1 = conn.prepareStatement(sql_7);
                            prepstat_1.setString(1,entry_date);
                            prepstat_1.setString(2,incometype_jcb.getSelectedItem().toString());
                            prepstat_1.setString(3,incomeitem_jcb.getSelectedItem().toString());
                            prepstat_1.setString(4,description_jtf.getText());
                            prepstat_1.setString(5,from_jtf.getText()); 
                            prepstat_1.setString(6,amount_jtf.getText());
                            prepstat_1.setString(7,to_bank);
                            prepstat_1.setString(8,to_cash);
                            prepstat_1.executeUpdate(); 

                            prepstat_1.close();

                            status = true;  

                        }
                        else if(comp == -1)
                        {
                            
                            deducted_val = amount.subtract(initial_amount);
                            
                            String sql_1 = "SELECT amount FROM cash_at_bank_acc WHERE bank_name=?";
                            prepstat_1 = conn.prepareStatement(sql_1);
                            prepstat_1.setString(1, bank_selected);
                            rs_1 = prepstat_1.executeQuery();
                            while(rs_1.next())
                            {

                                amt_from_bank = new BigDecimal(rs_1.getString("amount"));
                                new_amount_bank = amt_from_bank.add(deducted_val);

                            }

                            prepstat_1.close();
                            rs_1.close();

                            System.out.println("amount from bank: "+new_amount_bank);
                            
                            String sql_6 = "UPDATE cash_at_bank_acc SET bank_name=?, amount=? WHERE bank_name =? ";
                            prepstat_1 = conn.prepareStatement(sql_6);
                            prepstat_1.setString(1, bank_selected);
                            prepstat_1.setString(2, new_amount_bank.toString());
                            prepstat_1.setString(3, bank_selected);
                            prepstat_1.executeUpdate();
                            prepstat_1.close();

                            String sql_7 = "UPDATE income_voucher SET entrydate=?,income_type=?,income_item=?,description=?,from_=?,amount=?,to_bank=?,to_cash=? WHERE id= '"+id+"' ";
                            prepstat_1 = conn.prepareStatement(sql_7);
                            prepstat_1.setString(1,entry_date);
                            prepstat_1.setString(2,incometype_jcb.getSelectedItem().toString());
                            prepstat_1.setString(3,incomeitem_jcb.getSelectedItem().toString());
                            prepstat_1.setString(4,description_jtf.getText());
                            prepstat_1.setString(5,from_jtf.getText()); 
                            prepstat_1.setString(6,amount_jtf.getText());
                            prepstat_1.setString(7,to_bank);
                            prepstat_1.setString(8,to_cash);
                            prepstat_1.executeUpdate(); 

                            prepstat_1.close();

                            status = true;  
                            
                        }
                        else if(comp == 0)
                        {
                            
                            String sql_7 = "UPDATE income_voucher SET entrydate=?,income_type=?,income_item=?,description=?,from_=?,amount=?,to_bank=?,to_cash=? WHERE id= '"+id+"' ";
                            prepstat_1 = conn.prepareStatement(sql_7);
                            prepstat_1.setString(1,entry_date);
                            prepstat_1.setString(2,incometype_jcb.getSelectedItem().toString());
                            prepstat_1.setString(3,incomeitem_jcb.getSelectedItem().toString());
                            prepstat_1.setString(4,description_jtf.getText());
                            prepstat_1.setString(5,from_jtf.getText()); 
                            prepstat_1.setString(6,amount_jtf.getText());
                            prepstat_1.setString(7,to_bank);
                            prepstat_1.setString(8,to_cash);
                            prepstat_1.executeUpdate(); 

                            prepstat_1.close();

                            status = true; 
                            
                        }

                    }
                    else if(initial_status == 2)
                    {

                        if(comp == 1)
                        {

                            deducted_val = initial_amount.subtract(amount);
                            
                            String sql_1 = "SELECT amount FROM cash_at_hand_acc ";
                            prepstat_1 = conn.prepareStatement(sql_1);
                            rs_1 = prepstat_1.executeQuery();
                            while(rs_1.next())
                            {

                                amt_from_cash = new BigDecimal(rs_1.getString("amount"));
                                new_amount_cash = amt_from_cash.subtract(deducted_val);

                            }

                            prepstat_1.close();
                            rs_1.close();

                            String sql_6 = "UPDATE cash_at_hand_acc SET amount=? ";
                            prepstat_1 = conn.prepareStatement(sql_6);
                            prepstat_1.setString(1, new_amount_cash.toString());
                            prepstat_1.executeUpdate();
                            prepstat_1.close();

                            String sql_7 = "UPDATE income_voucher SET entrydate=?,income_type=?,income_item=?,description=?,from_=?,amount=?,to_bank=?,to_cash=? WHERE id= '"+id+"' ";
                            prepstat_1 = conn.prepareStatement(sql_7);
                            prepstat_1.setString(1,entry_date);
                            prepstat_1.setString(2,incometype_jcb.getSelectedItem().toString());
                            prepstat_1.setString(3,incomeitem_jcb.getSelectedItem().toString());
                            prepstat_1.setString(4,description_jtf.getText());
                            prepstat_1.setString(5,from_jtf.getText()); 
                            prepstat_1.setString(6,amount_jtf.getText());
                            prepstat_1.setString(7,to_bank);
                            prepstat_1.setString(8,to_cash);
                            prepstat_1.executeUpdate(); 

                            prepstat_1.close();

                            status = true;  

                        }
                        else if(comp == -1)
                        {
                            
                            deducted_val = amount.subtract(initial_amount);
                            
                            String sql_1 = "SELECT amount FROM cash_at_hand_acc ";
                            prepstat_1 = conn.prepareStatement(sql_1);
                            rs_1 = prepstat_1.executeQuery();
                            while(rs_1.next())
                            {

                                amt_from_cash = new BigDecimal(rs_1.getString("amount"));
                                new_amount_cash = amt_from_cash.add(deducted_val);

                            }

                            prepstat_1.close();
                            rs_1.close();
                            
                            String sql_6 = "UPDATE cash_at_hand_acc SET amount=? ";
                            prepstat_1 = conn.prepareStatement(sql_6);
                            prepstat_1.setString(1, new_amount_cash.toString());
                            prepstat_1.executeUpdate();
                            prepstat_1.close();

                            String sql_7 = "UPDATE income_voucher SET entrydate=?,income_type=?,income_item=?,description=?,from_=?,amount=?,to_bank=?,to_cash=? WHERE id= '"+id+"' ";
                            prepstat_1 = conn.prepareStatement(sql_7);
                            prepstat_1.setString(1,entry_date);
                            prepstat_1.setString(2,incometype_jcb.getSelectedItem().toString());
                            prepstat_1.setString(3,incomeitem_jcb.getSelectedItem().toString());
                            prepstat_1.setString(4,description_jtf.getText());
                            prepstat_1.setString(5,from_jtf.getText()); 
                            prepstat_1.setString(6,amount_jtf.getText());
                            prepstat_1.setString(7,to_bank);
                            prepstat_1.setString(8,to_cash);
                            prepstat_1.executeUpdate(); 

                            prepstat_1.close();

                            status = true;    
                            
                        }
                        else if(comp == 0)
                        {
                            
                            String sql_7 = "UPDATE income_voucher SET entrydate=?,income_type=?,income_item=?,description=?,from_=?,amount=?,to_bank=?,to_cash=? WHERE id= '"+id+"' ";
                            prepstat_1 = conn.prepareStatement(sql_7);
                            prepstat_1.setString(1,entry_date);
                            prepstat_1.setString(2,incometype_jcb.getSelectedItem().toString());
                            prepstat_1.setString(3,incomeitem_jcb.getSelectedItem().toString());
                            prepstat_1.setString(4,description_jtf.getText());
                            prepstat_1.setString(5,from_jtf.getText()); 
                            prepstat_1.setString(6,amount_jtf.getText());
                            prepstat_1.setString(7,to_bank);
                            prepstat_1.setString(8,to_cash);
                            prepstat_1.executeUpdate(); 

                            prepstat_1.close();

                            status = true; 
                            
                        }

                    }
                    
                }
          
        } 
        catch (Exception ex) 
        {
            
            JOptionPane.showMessageDialog( null, ex);
            error = true;
                
        }
        
        if(error==false && status==true)
        {

            JOptionPane.showMessageDialog(this,"Operation Successful.","Success",JOptionPane.INFORMATION_MESSAGE);
            
            update_jb.setEnabled(false);
            disabled();
            
            ((DefaultTableModel)incomedetails_jt.getModel()).setRowCount(0);
            incometype_jcb.setSelectedItem("");
            incomeitem_jcb.setSelectedItem("");
            description_jtf.setText("");
            from_jtf.setText("");
            date_jtf.setDate(null);
            amount_jtf.setText("");
            banklist_jcb.setSelectedItem("");
         
        }

    }
    
    private void disabled(){
    
        incometype_jcb.setEnabled(false);
        incomeitem_jcb.setEnabled(false);
        description_jtf.setEnabled(false);
        from_jtf.setEnabled(false);
        date_jtf.setEnabled(false);
        amount_jtf.setEnabled(false);
        to_bank_jchkbx.setEnabled(false);
        banklist_jcb.setEnabled(false);
        to_cash_jchkbx.setEnabled(false);
        
    }
    
    private void viewdetail()
    {
    
        Connection conn = DatabaseConnection.createConnection();
        
        try 
        {

            DefaultTableModel dtm = (DefaultTableModel)incomedetails_jt.getModel();
            dtm.setRowCount(0);

            String receipt_no = receiptno_jcb.getSelectedItem().toString();
            
            Statement stmt = conn.createStatement();     

            String query = "SELECT id,entrydate,income_type,income_item,description,from_,amount FROM income_voucher WHERE receipt_no = '"+receipt_no+"' ";

            // create the java statement
            Statement st = conn.createStatement();

            // execute the query, and get a java resultset
            ResultSet rs = st.executeQuery(query);

            // iterate through the java resultset
            while (rs.next())
            {
              String id = rs.getString("id");
              String date = rs.getString("entrydate");
              String expense_type = rs.getString("income_type");
              String expense_item = rs.getString("income_item");
              String description = rs.getString("description");
              String towards = rs.getString("from_");
              String amount = rs.getString("amount");
              
              String[] nameArr = new String[]{Integer.toString(incomedetails_jt.getRowCount()+1),date,expense_type,expense_item,description,towards,amount,id};
              dtm.addRow(nameArr);

            }

        }
        catch (Exception ex) 
        {

            JOptionPane.showMessageDialog( null, ex);

        }
        finally
        {

            if(conn!=null)
            {
                try {
                    conn.close();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex);
                }

            }

        }
      
    }
    
    private void viewList()
    {
    
        Connection conn = DatabaseConnection.createConnection();
        
        try 
        {

            DefaultTableModel dtm = (DefaultTableModel)incomedetails_jt.getModel();
            dtm.setRowCount(0);

            Statement stmt = conn.createStatement();     

            String query = "SELECT id,entrydate,income_type,income_item,description,from_,amount FROM income_voucher";

            // create the java statement
            Statement st = conn.createStatement();

            // execute the query, and get a java resultset
            ResultSet rs = st.executeQuery(query);

            // iterate through the java resultset
            while (rs.next())
            {
              String id = rs.getString("id");
              String date = rs.getString("entrydate");
              String expense_type = rs.getString("income_type");
              String expense_item = rs.getString("income_item");
              String description = rs.getString("description");
              String towards = rs.getString("from_");
              String amount = rs.getString("amount");
              
              String[] nameArr = new String[]{Integer.toString(incomedetails_jt.getRowCount()+1),date,expense_type,expense_item,description,towards,amount,id};
              dtm.addRow(nameArr);

            }

        }
        catch (Exception ex) 
        {

            JOptionPane.showMessageDialog( null, ex);

        }
        finally
        {

            if(conn!=null)
            {
                try {
                    conn.close();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex);
                }

            }

        }
      
    }
    
    
    class expensedetails_jt_listSelectionListener implements ListSelectionListener{

    @Override
    public void valueChanged(ListSelectionEvent e) 
    {
        
        try 
        {
            
            DefaultTableModel dtm = (DefaultTableModel)Accounts_Income_Voucher_Edit.incomedetails_jt.getModel();
           
            int row = Accounts_Income_Voucher_Edit.incomedetails_jt.getSelectedRow();
            String value = Accounts_Income_Voucher_Edit.incomedetails_jt.getModel().getValueAt(row, 7).toString();

            Connection conn = DatabaseConnection.createConnection();
           
            String query = "SELECT * FROM income_voucher WHERE id= '"+value+"' ";
           
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery(query);
            while (rs.next())
            {
              
                String date = rs.getString("entrydate");
                String income_type = rs.getString("income_type");
                String income_item = rs.getString("income_item");
                String description = rs.getString("description");
                String towards = rs.getString("from_");
                String amount = rs.getString("amount");
                String to_bank = rs.getString("to_bank");
                String to_cash = rs.getString("to_cash");

                SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
                SimpleDateFormat sdf2 = new SimpleDateFormat("d-MMM-yyyy", Locale.getDefault());
                Date formatted_date = sdf2.parse(sdf2.format(sdf1.parse(date)));

                Accounts_Income_Voucher_Edit.date_jtf.setDate(formatted_date);
                //Accounts_Income_Voucher_Edit.incometype_jcb.addItem(income_type);
                Accounts_Income_Voucher_Edit.incometype_jcb.setSelectedItem(income_type);
                //Accounts_Income_Voucher_Edit.incomeitem_jcb.addItem(income_item);
                Accounts_Income_Voucher_Edit.incomeitem_jcb.setSelectedItem(income_item);
                Accounts_Income_Voucher_Edit.description_jtf.setText(description);
                Accounts_Income_Voucher_Edit.from_jtf.setText(towards);
                Accounts_Income_Voucher_Edit.amount_jtf.setText(amount);
                if(!to_bank.equals("NA"))
                {
                    
                    to_cash_jchkbx.setSelected(false);
                    to_bank_jchkbx.setSelected(true);
                    banklist_jcb.setSelectedItem(to_bank);
                    
                    initial_status = 1;
                    
                }
                if(!to_cash.equals("NA"))
                {
                    
                    to_cash_jchkbx.setSelected(true);
                    to_bank_jchkbx.setSelected(false);
                    banklist_jcb.setSelectedItem("");
                    
                    initial_status = 2;
                  
                }
                
                initial_bank = to_bank;
                 
            }
               
            initial_amount = new BigDecimal(amount_jtf.getText());
            
        }
        catch (Exception ex) 
        {
            
            JOptionPane.showMessageDialog( null, ex);
                
        }
        
    }

}
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JTextField amount_jtf;
    private javax.swing.JComboBox banklist_jcb;
    private javax.swing.JButton close_jb;
    public static com.toedter.calendar.JDateChooser date_jtf;
    public static javax.swing.JTextField description_jtf;
    private javax.swing.JButton edit_jb;
    public static javax.swing.JTextField from_jtf;
    public static javax.swing.JTable incomedetails_jt;
    public static javax.swing.JComboBox incomeitem_jcb;
    public static javax.swing.JComboBox incometype_jcb;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JComboBox receiptno_jcb;
    private javax.swing.JButton showalldetails_jb;
    private javax.swing.JButton showdetails_jb;
    private javax.swing.JCheckBox to_bank_jchkbx;
    private javax.swing.JCheckBox to_cash_jchkbx;
    private javax.swing.JButton update_jb;
    // End of variables declaration//GEN-END:variables
}
