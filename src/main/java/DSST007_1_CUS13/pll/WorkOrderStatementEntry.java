package DSST007_1_CUS13.pll;

import DSST007_1_CUS13.bll.WorkOrderStatement;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.text.JTextComponent;
import ndk.to_java_utils.BigDecimalUtils;
import static ndk.to_java_utils.BigDecimalUtils.getBigDecimalFromJTextField;
import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;

public class WorkOrderStatementEntry extends javax.swing.JInternalFrame {

    private static WorkOrderStatementEntry MyInstance;

    public WorkOrderStatementEntry() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        workOrderNos_jcb = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jobname_lbl = new javax.swing.JLabel();
        jobdate_lbl = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        customer_lbl = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        amount_jtf = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        rate_jtf = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        plate_jtf = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        design_jtf = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        quantity_jtf = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        outStandingBal_jtf = new javax.swing.JTextField();
        otherItem_jtf = new javax.swing.JTextField();
        otherItemAmt_jtf = new javax.swing.JTextField();
        balAmount_jtf = new javax.swing.JTextField();
        deduction_jtf = new javax.swing.JTextField();
        cuttingCharges_jtf = new javax.swing.JTextField();
        netTotal_jtf = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        deductionAmt_jtf = new javax.swing.JTextField();
        amountRec_jtf = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        jPanel3 = new javax.swing.JPanel();
        saveAndPrint_jb = new javax.swing.JButton();
        save_jb = new javax.swing.JButton();
        newData_jb = new javax.swing.JButton();
        close_jb = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        totalAmount_jtf = new javax.swing.JTextField();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255)));
        setClosable(true);
        setTitle("Transactions > Work Order Statement");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/DSST007_1_CUS13/InstabizTrader Logo Final 35x35.png"))); // NOI18N
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(242, 242, 255));
        jPanel1.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 6, 0);
        jPanel1.add(jSeparator1, gridBagConstraints);

        jPanel2.setBackground(new java.awt.Color(242, 242, 255));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jButton1.setBackground(new java.awt.Color(185, 197, 31));
        jButton1.setText("Show");
        jButton1.setPreferredSize(new java.awt.Dimension(100, 27));
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel2.add(jButton1, gridBagConstraints);

        workOrderNos_jcb.setEditable(true);
        workOrderNos_jcb.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel2.add(workOrderNos_jcb, gridBagConstraints);

        jLabel1.setText("Work Order No :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel2.add(jLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        jPanel1.add(jPanel2, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel2.setText("Job Name :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel2, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel3.setText("Job Date   :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel3, gridBagConstraints);

        jobname_lbl.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jobname_lbl.setText("--");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        jPanel1.add(jobname_lbl, gridBagConstraints);

        jobdate_lbl.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jobdate_lbl.setText("--");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        jPanel1.add(jobdate_lbl, gridBagConstraints);

        jLabel6.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel6.setText("Customer :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel6, gridBagConstraints);

        customer_lbl.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        customer_lbl.setText("--");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        jPanel1.add(customer_lbl, gridBagConstraints);

        jLabel8.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel8.setText("Amount :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel8, gridBagConstraints);

        amount_jtf.setEditable(false);
        amount_jtf.setBackground(new java.awt.Color(193, 255, 224));
        amount_jtf.setPreferredSize(new java.awt.Dimension(150, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(amount_jtf, gridBagConstraints);

        jLabel9.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel9.setText("Rate :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 0, 0);
        jPanel1.add(jLabel9, gridBagConstraints);

        rate_jtf.setPreferredSize(new java.awt.Dimension(150, 27));
        rate_jtf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                rate_jtfKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                rate_jtfKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel1.add(rate_jtf, gridBagConstraints);

        jLabel10.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel10.setText("Plate :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel10, gridBagConstraints);

        plate_jtf.setPreferredSize(new java.awt.Dimension(150, 27));
        plate_jtf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                plate_jtfKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                plate_jtfKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(plate_jtf, gridBagConstraints);

        jLabel11.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel11.setText("Design :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel11, gridBagConstraints);

        design_jtf.setPreferredSize(new java.awt.Dimension(150, 27));
        design_jtf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                design_jtfKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                design_jtfKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(design_jtf, gridBagConstraints);

        jLabel12.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel12.setText("Quantity :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel12, gridBagConstraints);

        quantity_jtf.setPreferredSize(new java.awt.Dimension(150, 27));
        quantity_jtf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                quantity_jtfKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                quantity_jtfKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(quantity_jtf, gridBagConstraints);

        jLabel13.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel13.setText("Out Standing Balance :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 0, 0);
        jPanel1.add(jLabel13, gridBagConstraints);

        jLabel14.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel14.setText("Other Item :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel14, gridBagConstraints);

        jLabel15.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel15.setText("Cutting Charges :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel15, gridBagConstraints);

        jLabel16.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel16.setText("Net Total :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel16, gridBagConstraints);

        jLabel17.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel17.setText("Deduction :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel17, gridBagConstraints);

        outStandingBal_jtf.setText("0.00");
        outStandingBal_jtf.setEnabled(false);
        outStandingBal_jtf.setPreferredSize(new java.awt.Dimension(150, 27));
        outStandingBal_jtf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                outStandingBal_jtfKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                outStandingBal_jtfKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 0, 5);
        jPanel1.add(outStandingBal_jtf, gridBagConstraints);

        otherItem_jtf.setPreferredSize(new java.awt.Dimension(300, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(otherItem_jtf, gridBagConstraints);

        otherItemAmt_jtf.setPreferredSize(new java.awt.Dimension(150, 27));
        otherItemAmt_jtf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                otherItemAmt_jtfKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                otherItemAmt_jtfKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel1.add(otherItemAmt_jtf, gridBagConstraints);

        balAmount_jtf.setEditable(false);
        balAmount_jtf.setBackground(new java.awt.Color(193, 255, 224));
        balAmount_jtf.setPreferredSize(new java.awt.Dimension(150, 27));
        balAmount_jtf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                balAmount_jtfKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                balAmount_jtfKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel1.add(balAmount_jtf, gridBagConstraints);

        deduction_jtf.setPreferredSize(new java.awt.Dimension(300, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(deduction_jtf, gridBagConstraints);

        cuttingCharges_jtf.setText("0.00");
        cuttingCharges_jtf.setEnabled(false);
        cuttingCharges_jtf.setPreferredSize(new java.awt.Dimension(150, 27));
        cuttingCharges_jtf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cuttingCharges_jtfKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cuttingCharges_jtfKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel1.add(cuttingCharges_jtf, gridBagConstraints);

        netTotal_jtf.setEditable(false);
        netTotal_jtf.setBackground(new java.awt.Color(193, 255, 224));
        netTotal_jtf.setPreferredSize(new java.awt.Dimension(150, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel1.add(netTotal_jtf, gridBagConstraints);

        jLabel18.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel18.setText("Amount Received :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel18, gridBagConstraints);

        jLabel19.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel19.setText("Balance Amount :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel19, gridBagConstraints);

        deductionAmt_jtf.setPreferredSize(new java.awt.Dimension(150, 27));
        deductionAmt_jtf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                deductionAmt_jtfKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                deductionAmt_jtfKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel1.add(deductionAmt_jtf, gridBagConstraints);

        amountRec_jtf.setPreferredSize(new java.awt.Dimension(150, 27));
        amountRec_jtf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                amountRec_jtfKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                amountRec_jtfKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel1.add(amountRec_jtf, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        jPanel1.add(jSeparator2, gridBagConstraints);

        jPanel3.setBackground(new java.awt.Color(242, 242, 255));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        saveAndPrint_jb.setBackground(new java.awt.Color(185, 197, 31));
        saveAndPrint_jb.setText("Save&Print");
        saveAndPrint_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        saveAndPrint_jb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveAndPrint_jbMouseClicked(evt);
            }
        });
        saveAndPrint_jb.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                saveAndPrint_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel3.add(saveAndPrint_jb, gridBagConstraints);

        save_jb.setBackground(new java.awt.Color(185, 197, 31));
        save_jb.setText("Save");
        save_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        save_jb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                save_jbMouseClicked(evt);
            }
        });
        save_jb.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                save_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel3.add(save_jb, gridBagConstraints);

        newData_jb.setBackground(new java.awt.Color(86, 132, 191));
        newData_jb.setText("New");
        newData_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        newData_jb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newData_jbMouseClicked(evt);
            }
        });
        newData_jb.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                newData_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        jPanel3.add(newData_jb, gridBagConstraints);

        close_jb.setBackground(new java.awt.Color(86, 132, 191));
        close_jb.setMnemonic('c');
        close_jb.setText("Close");
        close_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        close_jb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                close_jbActionPerformed(evt);
            }
        });
        close_jb.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                close_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        jPanel3.add(close_jb, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        jPanel1.add(jPanel3, gridBagConstraints);

        jLabel20.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel20.setText("Total :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel20, gridBagConstraints);

        totalAmount_jtf.setEditable(false);
        totalAmount_jtf.setBackground(new java.awt.Color(193, 255, 224));
        totalAmount_jtf.setPreferredSize(new java.awt.Dimension(150, 27));
        totalAmount_jtf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                totalAmount_jtfKeyTyped(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                totalAmount_jtfKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel1.add(totalAmount_jtf, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:

        Dimension desktopSize = NewMDIApplication.desktopbg_jlbl.getSize();
        Dimension jInternalFrameSize = this.getSize();
        //this.setLocation((desktopSize.width - jInternalFrameSize.width)/2,(desktopSize.height- jInternalFrameSize.height)/2);
        this.setLocation((desktopSize.width - jInternalFrameSize.width) / 2, 20);
        //----------------------------

        load_workOrder_jcb();
        SearchableCombobox searchableCombobox_1 = new SearchableCombobox(workOrderNos_jcb);
        ((JTextField) workOrderNos_jcb.getEditor().getEditorComponent()).addKeyListener(searchableCombobox_1);

    }//GEN-LAST:event_formInternalFrameOpened

    public static WorkOrderStatementEntry getInstance() // Method
    {
        if (MyInstance == null) {
            MyInstance = new WorkOrderStatementEntry();
        }
        return MyInstance;
    }

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        // TODO add your handling code here:

        MyInstance = null;

    }//GEN-LAST:event_formInternalFrameClosed

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        // TODO add your handling code here:

        MyInstance = null;

    }//GEN-LAST:event_formInternalFrameClosing

    private void save_jbMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_save_jbMouseClicked
    {//GEN-HEADEREND:event_save_jbMouseClicked
        if (save_jb.isEnabled() == true) {

            if (validationBeforeSave() == true) {

                saveWorkOrderStatement();
            }
        }
    }//GEN-LAST:event_save_jbMouseClicked

    private boolean saveWorkOrderStatement() {

        boolean error;

        try {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            SimpleDateFormat sdf2 = new SimpleDateFormat("dd-MMM-yyyy");

            String work_order_no = ((JTextComponent) workOrderNos_jcb.getEditor().getEditorComponent()).getText();
            String job_name = jobname_lbl.getText();
            String customer = customer_lbl.getText();
            String job_date = sdf.format(sdf2.parse(jobdate_lbl.getText()));
            String rate = rate_jtf.getText();
            String plate = plate_jtf.getText();
            String design = design_jtf.getText();
            String quantity = quantity_jtf.getText();
            String amount = amount_jtf.getText();
            String outstanding_balance = outStandingBal_jtf.getText();
            String other_item = otherItem_jtf.getText();
            String other_item_amt = otherItemAmt_jtf.getText();
            String cutting_charges = cuttingCharges_jtf.getText();
            String total = totalAmount_jtf.getText();
            String deduction = deduction_jtf.getText();
            String deduction_amt = deductionAmt_jtf.getText();
            String net_total = netTotal_jtf.getText();
            String amt_recieved = amountRec_jtf.getText();
            String balance_amt = balAmount_jtf.getText();
            String userid = "";
            String process = "INSERT";

            WorkOrderStatement workOrderStatement = new WorkOrderStatement();
            workOrderStatement.setWork_order_no(work_order_no);
            workOrderStatement.setDescription(job_name);
            workOrderStatement.setCustomer(customer);
            workOrderStatement.setJobdate(job_date);
            workOrderStatement.setRate(rate);
            workOrderStatement.setPlate(plate);
            workOrderStatement.setDesign(design);
            workOrderStatement.setQuantity(quantity);
            workOrderStatement.setAmount(amount);
            workOrderStatement.setOutstanding_balance(outstanding_balance);
            workOrderStatement.setOther_item(other_item);
            workOrderStatement.setOther_item_amt(other_item_amt);
            workOrderStatement.setCutting_charges(cutting_charges);
            workOrderStatement.setTotal(total);
            workOrderStatement.setDeduction(deduction);
            workOrderStatement.setDeduction_amt(deduction_amt);
            workOrderStatement.setNet_total(net_total);
            workOrderStatement.setAmt_recieved(amt_recieved);
            workOrderStatement.setBalance_amt(balance_amt);
            workOrderStatement.setUserid(userid);
            workOrderStatement.setProcess(process);
            error = workOrderStatement.saveWorkOrderStatement(workOrderStatement);

        } catch (ParseException e) {

            error = true;
            JOptionPane.showMessageDialog(this, e);
        }

        if (error == false) {

            JOptionPane.showMessageDialog(this, "Operation Successful.", "Success", JOptionPane.INFORMATION_MESSAGE);
            save_jb.setEnabled(false);
            saveAndPrint_jb.setEnabled(false);
            newData_jb.requestFocusInWindow();
        }

        return error;
    }

    private boolean validationBeforeSave() {

        boolean valid = true;

        if (jobname_lbl.getText().equals("--")) {

            JOptionPane.showMessageDialog(this, "Please display work order details.", "Error", JOptionPane.ERROR_MESSAGE);
            workOrderNos_jcb.requestFocusInWindow();
            valid = false;

        } else if (rate_jtf.getText().isEmpty()) {

            JOptionPane.showMessageDialog(this, "Specify Rate.", "Error", JOptionPane.ERROR_MESSAGE);
            rate_jtf.requestFocusInWindow();
            valid = false;

        } else if (quantity_jtf.getText().isEmpty()) {

            JOptionPane.showMessageDialog(this, "Specify Quantity.", "Error", JOptionPane.ERROR_MESSAGE);
            quantity_jtf.requestFocusInWindow();
            valid = false;

        } else if (amountRec_jtf.getText().isEmpty()) {

            JOptionPane.showMessageDialog(this, "Specify Amount Recieved.", "Error", JOptionPane.ERROR_MESSAGE);
            amountRec_jtf.requestFocusInWindow();
            valid = false;
        }

        return valid;
    }

    private void newData() {

        ((JTextComponent) workOrderNos_jcb.getEditor().getEditorComponent()).setText("");
        jobname_lbl.setText("--");
        customer_lbl.setText("--");
        jobdate_lbl.setText("--");
        rate_jtf.setText("");
        plate_jtf.setText("");
        design_jtf.setText("");
        quantity_jtf.setText("");
        amount_jtf.setText("");
        outStandingBal_jtf.setText("");
        otherItem_jtf.setText("");
        otherItemAmt_jtf.setText("");
        cuttingCharges_jtf.setText("");
        totalAmount_jtf.setText("");
        deduction_jtf.setText("");
        deductionAmt_jtf.setText("");
        netTotal_jtf.setText("");
        amountRec_jtf.setText("");
        balAmount_jtf.setText("");

        saveAndPrint_jb.setEnabled(true);
        save_jb.setEnabled(true);
        workOrderNos_jcb.requestFocusInWindow();
    }

    private void printWorkOrderStatement() {
        try {

            String source = "WorkOrderStatement.jasper";
            InputStream is = getClass().getResourceAsStream(source);

            Map parameters = new HashMap();
            parameters.put("job_name", jobname_lbl.getText());
            parameters.put("customer", customer_lbl.getText());
            parameters.put("job_date", jobdate_lbl.getText());
            parameters.put("work_order", ((JTextField) workOrderNos_jcb.getEditor().getEditorComponent()).getText());
            parameters.put("quantity", quantity_jtf.getText());
            parameters.put("rate", rate_jtf.getText());
            parameters.put("plate", plate_jtf.getText());
            parameters.put("design", design_jtf.getText());
            parameters.put("amount", amount_jtf.getText());
            parameters.put("out_bal", outStandingBal_jtf.getText());
            parameters.put("other_item", otherItem_jtf.getText());
            parameters.put("other_item_amt", otherItemAmt_jtf.getText());
            parameters.put("cutting_charges", cuttingCharges_jtf.getText());
            parameters.put("total", totalAmount_jtf.getText());
            parameters.put("deduction", deduction_jtf.getText());
            parameters.put("deduction_amt", deductionAmt_jtf.getText());
            parameters.put("amt_received", amountRec_jtf.getText());
            parameters.put("bal_amt", balAmount_jtf.getText());

            JasperPrint print = JasperFillManager.fillReport(is, parameters, new JREmptyDataSource());
            JasperViewer jv = new JasperViewer(print, false);
            jv.viewReport(print, false);

//            if(print != null)
//            {
//            JasperPrintManager.printReport(print, true);
//            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }

    private void rate_jtfKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_rate_jtfKeyTyped
    {//GEN-HEADEREND:event_rate_jtfKeyTyped
        String text = rate_jtf.getText();
        int lastindex = text.lastIndexOf('.');

        char c = evt.getKeyChar();

        if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE || evt.getKeyChar() == '.')) {

            //  evt.getKeyChar() == '.' does accept point when jtextfield accepts decimal number
            evt.consume();
            getToolkit().beep();

        } else if (lastindex >= 0 && !Character.isDigit(c)) {

            evt.consume();
        }
    }//GEN-LAST:event_rate_jtfKeyTyped

    private void plate_jtfKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_plate_jtfKeyTyped
    {//GEN-HEADEREND:event_plate_jtfKeyTyped
        String text = plate_jtf.getText();
        int lastindex = text.lastIndexOf('.');

        char c = evt.getKeyChar();

        if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE || evt.getKeyChar() == '.')) {

            evt.consume();
            getToolkit().beep();

        } else if (lastindex >= 0 && !Character.isDigit(c)) {

            evt.consume();
        }
    }//GEN-LAST:event_plate_jtfKeyTyped

    private void design_jtfKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_design_jtfKeyTyped
    {//GEN-HEADEREND:event_design_jtfKeyTyped
        String text = design_jtf.getText();
        int lastindex = text.lastIndexOf('.');

        char c = evt.getKeyChar();

        if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE || evt.getKeyChar() == '.')) {

            evt.consume();
            getToolkit().beep();

        } else if (lastindex >= 0 && !Character.isDigit(c)) {

            evt.consume();
        }
    }//GEN-LAST:event_design_jtfKeyTyped

    private void quantity_jtfKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_quantity_jtfKeyTyped
    {//GEN-HEADEREND:event_quantity_jtfKeyTyped
        String text = quantity_jtf.getText();
        int lastindex = text.lastIndexOf('.');

        char c = evt.getKeyChar();

        if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE || evt.getKeyChar() == '.')) {

            evt.consume();
            getToolkit().beep();

        } else if (lastindex >= 0 && !Character.isDigit(c)) {

            evt.consume();
        }
    }//GEN-LAST:event_quantity_jtfKeyTyped

    private void rate_jtfKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_rate_jtfKeyReleased
    {//GEN-HEADEREND:event_rate_jtfKeyReleased
        recalculateAmountsForRateOrPlateChargeOrDesignChargeOrQuantityChange();
    }//GEN-LAST:event_rate_jtfKeyReleased

    private void plate_jtfKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_plate_jtfKeyReleased
    {//GEN-HEADEREND:event_plate_jtfKeyReleased
        recalculateAmountsForRateOrPlateChargeOrDesignChargeOrQuantityChange();
    }//GEN-LAST:event_plate_jtfKeyReleased

    private void design_jtfKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_design_jtfKeyReleased
    {//GEN-HEADEREND:event_design_jtfKeyReleased
        recalculateAmountsForRateOrPlateChargeOrDesignChargeOrQuantityChange();
    }//GEN-LAST:event_design_jtfKeyReleased

    private void quantity_jtfKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_quantity_jtfKeyReleased
    {//GEN-HEADEREND:event_quantity_jtfKeyReleased
        recalculateAmountsForRateOrPlateChargeOrDesignChargeOrQuantityChange();
    }//GEN-LAST:event_quantity_jtfKeyReleased

    private void outStandingBal_jtfKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_outStandingBal_jtfKeyTyped
    {//GEN-HEADEREND:event_outStandingBal_jtfKeyTyped
        String text = outStandingBal_jtf.getText();
        int lastindex = text.lastIndexOf('.');

        char c = evt.getKeyChar();

        if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE || evt.getKeyChar() == '.')) {

            evt.consume();
            getToolkit().beep();

        } else if (lastindex >= 0 && !Character.isDigit(c)) {

            evt.consume();
        }
    }//GEN-LAST:event_outStandingBal_jtfKeyTyped

    private void otherItemAmt_jtfKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_otherItemAmt_jtfKeyTyped
    {//GEN-HEADEREND:event_otherItemAmt_jtfKeyTyped
        String text = otherItemAmt_jtf.getText();
        int lastindex = text.lastIndexOf('.');

        char c = evt.getKeyChar();

        if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE || evt.getKeyChar() == '.')) {

            evt.consume();
            getToolkit().beep();

        } else if (lastindex >= 0 && !Character.isDigit(c)) {

            evt.consume();
        }
    }//GEN-LAST:event_otherItemAmt_jtfKeyTyped

    private void cuttingCharges_jtfKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_cuttingCharges_jtfKeyTyped
    {//GEN-HEADEREND:event_cuttingCharges_jtfKeyTyped
        String text = cuttingCharges_jtf.getText();
        int lastindex = text.lastIndexOf(".");

        char c = evt.getKeyChar();

        if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE || evt.getKeyChar() == '.')) {
            //  evt.getKeyChar() == '.' does accept point when jtextfield accepts decimal number
            evt.consume();
            getToolkit().beep();

        } else if (lastindex >= 0 && !Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_cuttingCharges_jtfKeyTyped

    private void totalAmount_jtfKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_totalAmount_jtfKeyTyped
    {//GEN-HEADEREND:event_totalAmount_jtfKeyTyped
        String text = totalAmount_jtf.getText();
        int lastindex = text.lastIndexOf(".");

        char c = evt.getKeyChar();

        if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE || evt.getKeyChar() == '.')) {
            //  evt.getKeyChar() == '.' does accept point when jtextfield accepts decimal number
            evt.consume();
            getToolkit().beep();

        } else if (lastindex >= 0 && !Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_totalAmount_jtfKeyTyped

    private void deductionAmt_jtfKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_deductionAmt_jtfKeyTyped
    {//GEN-HEADEREND:event_deductionAmt_jtfKeyTyped
        String text = deductionAmt_jtf.getText();
        int lastindex = text.lastIndexOf('.');

        char c = evt.getKeyChar();

        if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE || evt.getKeyChar() == '.')) {

            evt.consume();
            getToolkit().beep();

        } else if (lastindex >= 0 && !Character.isDigit(c)) {

            evt.consume();
        }
    }//GEN-LAST:event_deductionAmt_jtfKeyTyped

    private void amountRec_jtfKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_amountRec_jtfKeyTyped
    {//GEN-HEADEREND:event_amountRec_jtfKeyTyped
        String text = amountRec_jtf.getText();
        int lastindex = text.lastIndexOf('.');

        char c = evt.getKeyChar();

        if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE || evt.getKeyChar() == '.')) {

            evt.consume();
            getToolkit().beep();

        } else if (lastindex >= 0 && !Character.isDigit(c)) {

            evt.consume();
        }
    }//GEN-LAST:event_amountRec_jtfKeyTyped

    private void balAmount_jtfKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_balAmount_jtfKeyTyped
    {//GEN-HEADEREND:event_balAmount_jtfKeyTyped
        String text = balAmount_jtf.getText();
        int lastindex = text.lastIndexOf(".");

        char c = evt.getKeyChar();

        if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE || evt.getKeyChar() == '.')) {
            //  evt.getKeyChar() == '.' does accept point when jtextfield accepts decimal number
            evt.consume();
            getToolkit().beep();

        } else if (lastindex >= 0 && !Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_balAmount_jtfKeyTyped

    private void outStandingBal_jtfKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_outStandingBal_jtfKeyReleased
    {//GEN-HEADEREND:event_outStandingBal_jtfKeyReleased
        recalculateAmountsForOutstandingBalanceOrOtherItemChargeChange();
    }//GEN-LAST:event_outStandingBal_jtfKeyReleased

    private void otherItemAmt_jtfKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_otherItemAmt_jtfKeyReleased
    {//GEN-HEADEREND:event_otherItemAmt_jtfKeyReleased
        recalculateAmountsForOutstandingBalanceOrOtherItemChargeChange();
    }//GEN-LAST:event_otherItemAmt_jtfKeyReleased

    private void cuttingCharges_jtfKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_cuttingCharges_jtfKeyReleased
    {//GEN-HEADEREND:event_cuttingCharges_jtfKeyReleased
        netTotal_jtf.setText(getTotalAmount().toString());
    }//GEN-LAST:event_cuttingCharges_jtfKeyReleased

    private void totalAmount_jtfKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_totalAmount_jtfKeyReleased
    {//GEN-HEADEREND:event_totalAmount_jtfKeyReleased
        netTotal_jtf.setText(getTotalAmount().toString());
    }//GEN-LAST:event_totalAmount_jtfKeyReleased

    private void deductionAmt_jtfKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_deductionAmt_jtfKeyReleased
    {//GEN-HEADEREND:event_deductionAmt_jtfKeyReleased
        recalculateAmountsForDeductionAmountChange();
    }//GEN-LAST:event_deductionAmt_jtfKeyReleased

    private void amountRec_jtfKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_amountRec_jtfKeyReleased
    {//GEN-HEADEREND:event_amountRec_jtfKeyReleased
        recalculateAmountsForRecievedAmountChange();
    }//GEN-LAST:event_amountRec_jtfKeyReleased

    private void balAmount_jtfKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_balAmount_jtfKeyReleased
    {//GEN-HEADEREND:event_balAmount_jtfKeyReleased
        netTotal_jtf.setText(getTotalAmount().toString());
    }//GEN-LAST:event_balAmount_jtfKeyReleased

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jButton1MouseClicked
    {//GEN-HEADEREND:event_jButton1MouseClicked
        displayWorkOrderDetails();
    }//GEN-LAST:event_jButton1MouseClicked

    private void newData_jbMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_newData_jbMouseClicked
    {//GEN-HEADEREND:event_newData_jbMouseClicked
        newData();
    }//GEN-LAST:event_newData_jbMouseClicked

    private void saveAndPrint_jbMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_saveAndPrint_jbMouseClicked
    {//GEN-HEADEREND:event_saveAndPrint_jbMouseClicked
        if (save_jb.isEnabled() == true) {

            if (validationBeforeSave() == true) {

                if (saveWorkOrderStatement() == false) {

                    printWorkOrderStatement();
                }
            }
        }
    }//GEN-LAST:event_saveAndPrint_jbMouseClicked

    private void close_jbActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_close_jbActionPerformed
    {//GEN-HEADEREND:event_close_jbActionPerformed
        this.dispose();
    }//GEN-LAST:event_close_jbActionPerformed

    private void close_jbKeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_close_jbKeyPressed
    {//GEN-HEADEREND:event_close_jbKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            this.dispose();
        }
    }//GEN-LAST:event_close_jbKeyPressed

    private void saveAndPrint_jbKeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_saveAndPrint_jbKeyPressed
    {//GEN-HEADEREND:event_saveAndPrint_jbKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            if (save_jb.isEnabled() == true) {

                if (validationBeforeSave() == true) {

                    if (saveWorkOrderStatement() == false) {

                        printWorkOrderStatement();
                    }
                }
            }
        }
    }//GEN-LAST:event_saveAndPrint_jbKeyPressed

    private void save_jbKeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_save_jbKeyPressed
    {//GEN-HEADEREND:event_save_jbKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            if (save_jb.isEnabled() == true) {

                if (validationBeforeSave() == true) {

                    saveWorkOrderStatement();
                }
            }
        }
    }//GEN-LAST:event_save_jbKeyPressed

    private void newData_jbKeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_newData_jbKeyPressed
    {//GEN-HEADEREND:event_newData_jbKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            newData();
        }
    }//GEN-LAST:event_newData_jbKeyPressed

    private BigDecimal getTotalAmount() {

        String rate = rate_jtf.getText();
        String plate = plate_jtf.getText();
        String design = design_jtf.getText();
        String quantity = quantity_jtf.getText();
        String amount = amount_jtf.getText();
        String outStandingBal = outStandingBal_jtf.getText();
        String otherItem = otherItemAmt_jtf.getText();
        String cuttingCharges = cuttingCharges_jtf.getText();
        String deduction = deductionAmt_jtf.getText();
        String netTotal = netTotal_jtf.getText();

        BigDecimal rate_BD;
        BigDecimal plate_BD;
        BigDecimal design_BD;
        BigDecimal quantity_BD;
        BigDecimal amount_BD;
        BigDecimal outStandingBal_BD;
        BigDecimal otherItem_BD;
        BigDecimal cuttingCharges_BD;
        BigDecimal total_BD;
        BigDecimal deduction_BD;
        BigDecimal netTotal_BD;

        if (rate.isEmpty()) {

            rate_BD = new BigDecimal("0.00");

        } else {

            rate_BD = new BigDecimal(rate);
        }
        if (plate.isEmpty()) {

            plate_BD = new BigDecimal("0.00");

        } else {

            plate_BD = new BigDecimal(plate);
        }
        if (design.isEmpty()) {

            design_BD = new BigDecimal("0.00");

        } else {

            design_BD = new BigDecimal(design);
        }
        if (quantity.isEmpty()) {

            quantity_BD = new BigDecimal("0.00");

        } else {

            quantity_BD = new BigDecimal(quantity);
        }
//        if (amount.isEmpty()) {
//            
//            amount_BD = new BigDecimal("0.00");
//        
//        } else {
//        
//            amount_BD = new BigDecimal(amount);
//        }
        if (outStandingBal.isEmpty()) {

            outStandingBal_BD = new BigDecimal("0.00");

        } else {

            outStandingBal_BD = new BigDecimal(outStandingBal);
        }
        if (otherItem.isEmpty()) {

            otherItem_BD = new BigDecimal("0.00");

        } else {

            otherItem_BD = new BigDecimal(otherItem);
        }
        if (cuttingCharges.isEmpty()) {

            cuttingCharges_BD = new BigDecimal("0.00");

        } else {

            cuttingCharges_BD = new BigDecimal(cuttingCharges);
        }
        if (deduction.isEmpty()) {

            deduction_BD = new BigDecimal("0.00");

        } else {

            deduction_BD = new BigDecimal(deduction);
        }
//        if (netTotal.isEmpty()) {
//            
//            netTotal_BD = new BigDecimal("0.00");
//        
//        } else {
//        
//            netTotal_BD = new BigDecimal(netTotal);
//        }

        total_BD = ((quantity_BD.multiply(rate_BD)).setScale(2, RoundingMode.HALF_UP)).add(plate_BD).add(design_BD).add(outStandingBal_BD).add(otherItem_BD).add(cuttingCharges_BD);
        totalAmount_jtf.setText(total_BD.toString());
        netTotal_BD = (((quantity_BD.multiply(rate_BD)).setScale(2, RoundingMode.HALF_UP)).add(plate_BD).add(design_BD).add(outStandingBal_BD).add(otherItem_BD).add(cuttingCharges_BD)).subtract(deduction_BD);
        amount_BD = ((quantity_BD.multiply(rate_BD)).setScale(2, RoundingMode.HALF_UP)).add(plate_BD).add(design_BD);
        amount_jtf.setText(amount_BD.toString());

        return netTotal_BD;
    }

    private BigDecimal getAmount() {

        return ((getBigDecimalFromJTextField(rate_jtf).multiply(getBigDecimalFromJTextField(quantity_jtf))).add(getBigDecimalFromJTextField(plate_jtf)).add(getBigDecimalFromJTextField(design_jtf)));
    }

    private BigDecimal getTotal() {

        return getAmount().add(BigDecimalUtils.getBigDecimalFromJTextField(outStandingBal_jtf)).add(BigDecimalUtils.getBigDecimalFromJTextField(otherItemAmt_jtf)).add(BigDecimalUtils.getBigDecimalFromJTextField(cuttingCharges_jtf));
    }

    private BigDecimal getNetTotal() {

        return getTotal().subtract(BigDecimalUtils.getBigDecimalFromJTextField(deductionAmt_jtf));
    }

    private BigDecimal getBalance() {

        return getNetTotal().subtract(BigDecimalUtils.getBigDecimalFromJTextField(amountRec_jtf));
    }

    private void load_workOrder_jcb() {
        workOrderNos_jcb.removeAllItems();

        try {
            WorkOrderStatement workOrderStatement = new WorkOrderStatement();
            List<String> workOrderList = workOrderStatement.getWorkOrderNos();

            for (int i = 0; i < workOrderList.size(); i++) {
                String workOrderIds = workOrderList.get(i);
                workOrderNos_jcb.addItem(workOrderIds);
            }
            workOrderNos_jcb.setSelectedItem("");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "load_workOrder_jcb() : " + e);
        }
    }

    private void displayWorkOrderDetails() {

        try {
            SimpleDateFormat normalDateFormat = new SimpleDateFormat("dd-MMM-yyyy");
            SimpleDateFormat mySqlDateFormat = new SimpleDateFormat("yyyy-MM-dd");

            WorkOrderStatement workOrderStatement = new WorkOrderStatement();
            String workOrderId = ((JTextComponent) workOrderNos_jcb.getEditor().getEditorComponent()).getText();
            List<WorkOrderStatement> workOrderDetList = workOrderStatement.getWorkOrderDetails(workOrderId);
            for (int i = 0; i < workOrderDetList.size(); i++) {

                WorkOrderStatement tempWorkOrderStatement = workOrderDetList.get(i);

                jobname_lbl.setText(tempWorkOrderStatement.getDescription());
                customer_lbl.setText(tempWorkOrderStatement.getCustomer());
                //TODO : Use Utils
                jobdate_lbl.setText(normalDateFormat.format(mySqlDateFormat.parse(tempWorkOrderStatement.getJobdate())));

                BigDecimal tempRate = new BigDecimal(tempWorkOrderStatement.getRate());
                rate_jtf.setText(BigDecimalUtils.getTwoPiontsRoundedBigDecimal(tempRate).toPlainString());
                plate_jtf.setText(BigDecimalUtils.getTwoPiontsRoundedBigDecimalFromText(tempWorkOrderStatement.getPlate()).toPlainString());
                String designCharge=tempWorkOrderStatement.getDesign();
                design_jtf.setText(BigDecimalUtils.getTwoPiontsRoundedBigDecimalFromText(designCharge.equals("NA")?"0":designCharge).toPlainString());

                BigDecimal tempQuantity = new BigDecimal(tempWorkOrderStatement.getQuantity());
                quantity_jtf.setText(BigDecimalUtils.getTwoPiontsRoundedBigDecimal(tempQuantity).toPlainString());

                amount_jtf.setText(BigDecimalUtils.getTwoPiontsRoundedBigDecimal(getAmount()).toPlainString());
            }
        } catch (ParseException e) {

            JOptionPane.showMessageDialog(this, "displayWorkOrderDetails() : " + e.getLocalizedMessage());
        }
    }

    private void recalculateAmountsForRateOrPlateChargeOrDesignChargeOrQuantityChange() {

        amount_jtf.setText(BigDecimalUtils.getTwoPiontsRoundedBigDecimal(getAmount()).toPlainString());
        recalculateAmountsForOutstandingBalanceOrOtherItemChargeChange();
    }

    private void recalculateAmountsForOutstandingBalanceOrOtherItemChargeChange() {

        totalAmount_jtf.setText(BigDecimalUtils.getTwoPiontsRoundedBigDecimal(getTotal()).toPlainString());
        recalculateAmountsForDeductionAmountChange();
    }

    private void recalculateAmountsForDeductionAmountChange() {

        netTotal_jtf.setText(BigDecimalUtils.getTwoPiontsRoundedBigDecimal(getNetTotal()).toPlainString());
        recalculateAmountsForRecievedAmountChange();
    }

    private void recalculateAmountsForRecievedAmountChange() {

        balAmount_jtf.setText(BigDecimalUtils.getTwoPiontsRoundedBigDecimal(getBalance()).toPlainString());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField amountRec_jtf;
    private javax.swing.JTextField amount_jtf;
    private javax.swing.JTextField balAmount_jtf;
    private javax.swing.JButton close_jb;
    private javax.swing.JLabel customer_lbl;
    private javax.swing.JTextField cuttingCharges_jtf;
    private javax.swing.JTextField deductionAmt_jtf;
    private javax.swing.JTextField deduction_jtf;
    private javax.swing.JTextField design_jtf;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel jobdate_lbl;
    private javax.swing.JLabel jobname_lbl;
    private javax.swing.JTextField netTotal_jtf;
    private javax.swing.JButton newData_jb;
    private javax.swing.JTextField otherItemAmt_jtf;
    private javax.swing.JTextField otherItem_jtf;
    private javax.swing.JTextField outStandingBal_jtf;
    private javax.swing.JTextField plate_jtf;
    private javax.swing.JTextField quantity_jtf;
    private javax.swing.JTextField rate_jtf;
    private javax.swing.JButton saveAndPrint_jb;
    private javax.swing.JButton save_jb;
    private javax.swing.JTextField totalAmount_jtf;
    private javax.swing.JComboBox<String> workOrderNos_jcb;
    // End of variables declaration//GEN-END:variables
}
