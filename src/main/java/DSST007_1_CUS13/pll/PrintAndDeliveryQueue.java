package DSST007_1_CUS13.pll;

import DSST007_1_CUS13.bll.DeliveryQueue;
import DSST007_1_CUS13.bll.WorkOrder;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.text.SimpleDateFormat;
import java.util.List;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author praveen
 */
public class PrintAndDeliveryQueue extends javax.swing.JInternalFrame {

    private static PrintAndDeliveryQueue MyInstance;
    
    public PrintAndDeliveryQueue() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        description_jcb = new javax.swing.JComboBox<>();
        search_jb = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        printQueue_chkbx = new javax.swing.JRadioButton();
        delQueue_chkbx = new javax.swing.JRadioButton();
        jButton2 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        deliveryQueue_jt = new javax.swing.JTable();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        printQueue_jt = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        printerName_jcb = new javax.swing.JComboBox<>();
        removeFromPrintQueue_jb = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jPanel4 = new javax.swing.JPanel();
        jButton6 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        updateDeliveryQueue_jb = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255)));
        setClosable(true);
        setTitle("Transactions > Print And Delivery Queue");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/DSST007_1_CUS13/InstabizTrader Logo Final 35x35.png"))); // NOI18N
        addInternalFrameListener(new javax.swing.event.InternalFrameListener()
        {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt)
            {
                formInternalFrameOpened(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt)
            {
                formInternalFrameClosing(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt)
            {
                formInternalFrameClosed(evt);
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt)
            {
            }
        });

        jPanel1.setBackground(new java.awt.Color(242, 242, 255));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Description :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        jPanel1.add(jLabel1, gridBagConstraints);

        description_jcb.setEditable(true);
        description_jcb.setPreferredSize(new java.awt.Dimension(300, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPanel1.add(description_jcb, gridBagConstraints);

        search_jb.setBackground(new java.awt.Color(86, 132, 191));
        search_jb.setText("Search");
        search_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        search_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                search_jbMouseClicked(evt);
            }
        });
        search_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                search_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPanel1.add(search_jb, gridBagConstraints);

        jPanel2.setBackground(new java.awt.Color(242, 242, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Search In", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 1, 11))); // NOI18N
        jPanel2.setLayout(new java.awt.GridBagLayout());

        printQueue_chkbx.setBackground(new java.awt.Color(242, 242, 255));
        printQueue_chkbx.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        printQueue_chkbx.setText("Print Queue");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 10, 0);
        jPanel2.add(printQueue_chkbx, gridBagConstraints);

        delQueue_chkbx.setBackground(new java.awt.Color(242, 242, 255));
        delQueue_chkbx.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        delQueue_chkbx.setText("Delivery Queue");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 10, 10);
        jPanel2.add(delQueue_chkbx, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel1.add(jPanel2, gridBagConstraints);

        jButton2.setBackground(new java.awt.Color(86, 132, 191));
        jButton2.setText("Refresh");
        jButton2.setPreferredSize(new java.awt.Dimension(100, 27));
        jButton2.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                jButton2MouseClicked(evt);
            }
        });
        jButton2.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                jButton2KeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(jButton2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(jSeparator1, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel2.setText("Delivery Queue");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        jPanel1.add(jLabel2, gridBagConstraints);

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setPreferredSize(new java.awt.Dimension(800, 170));

        deliveryQueue_jt.setBackground(new java.awt.Color(214, 214, 255));
        deliveryQueue_jt.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "SNo", "WorkOrder", "Customer", "Description", "DelDate", "NoOfSheets", "PrnSheets", "FinBags", "NumBund", "PrinterName", "Delivery"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean []
            {
                false, false, false, false, false, false, true, true, true, false, false
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        deliveryQueue_jt.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        deliveryQueue_jt.setFillsViewportHeight(true);
        deliveryQueue_jt.setSelectionBackground(new java.awt.Color(86, 132, 191));
        jScrollPane1.setViewportView(deliveryQueue_jt);
        if (deliveryQueue_jt.getColumnModel().getColumnCount() > 0)
        {
            deliveryQueue_jt.getColumnModel().getColumn(0).setMinWidth(55);
            deliveryQueue_jt.getColumnModel().getColumn(0).setPreferredWidth(55);
            deliveryQueue_jt.getColumnModel().getColumn(1).setMinWidth(100);
            deliveryQueue_jt.getColumnModel().getColumn(1).setPreferredWidth(100);
            deliveryQueue_jt.getColumnModel().getColumn(2).setMinWidth(100);
            deliveryQueue_jt.getColumnModel().getColumn(2).setPreferredWidth(100);
            deliveryQueue_jt.getColumnModel().getColumn(3).setMinWidth(100);
            deliveryQueue_jt.getColumnModel().getColumn(3).setPreferredWidth(100);
            deliveryQueue_jt.getColumnModel().getColumn(4).setMinWidth(100);
            deliveryQueue_jt.getColumnModel().getColumn(4).setPreferredWidth(100);
            deliveryQueue_jt.getColumnModel().getColumn(5).setMinWidth(100);
            deliveryQueue_jt.getColumnModel().getColumn(5).setPreferredWidth(100);
            deliveryQueue_jt.getColumnModel().getColumn(6).setMinWidth(100);
            deliveryQueue_jt.getColumnModel().getColumn(6).setPreferredWidth(100);
            deliveryQueue_jt.getColumnModel().getColumn(7).setMinWidth(100);
            deliveryQueue_jt.getColumnModel().getColumn(7).setPreferredWidth(100);
            deliveryQueue_jt.getColumnModel().getColumn(8).setMinWidth(100);
            deliveryQueue_jt.getColumnModel().getColumn(8).setPreferredWidth(100);
            deliveryQueue_jt.getColumnModel().getColumn(9).setMinWidth(100);
            deliveryQueue_jt.getColumnModel().getColumn(9).setPreferredWidth(100);
            deliveryQueue_jt.getColumnModel().getColumn(10).setMinWidth(100);
            deliveryQueue_jt.getColumnModel().getColumn(10).setPreferredWidth(100);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(jScrollPane1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel1.add(jSeparator2, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel3.setText("Print Queue");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 0, 0);
        jPanel1.add(jLabel3, gridBagConstraints);

        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setPreferredSize(new java.awt.Dimension(800, 170));

        printQueue_jt.setBackground(new java.awt.Color(214, 214, 255));
        printQueue_jt.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "SNo", "WorkOrder", "Customer", "Description", "MfrName", "GSM", "Plate", "PlateColour", "Cyan", "Magenta", "Yellow", "Black", "Length", "Width", "Sheets", "PrintAt"
            }
        )
        {
            boolean[] canEdit = new boolean []
            {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        printQueue_jt.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        printQueue_jt.setFillsViewportHeight(true);
        printQueue_jt.setPreferredSize(new java.awt.Dimension(1550, 64));
        printQueue_jt.setSelectionBackground(new java.awt.Color(86, 132, 191));
        jScrollPane2.setViewportView(printQueue_jt);
        if (printQueue_jt.getColumnModel().getColumnCount() > 0)
        {
            printQueue_jt.getColumnModel().getColumn(0).setMinWidth(50);
            printQueue_jt.getColumnModel().getColumn(0).setPreferredWidth(50);
            printQueue_jt.getColumnModel().getColumn(1).setMinWidth(100);
            printQueue_jt.getColumnModel().getColumn(1).setPreferredWidth(100);
            printQueue_jt.getColumnModel().getColumn(2).setMinWidth(100);
            printQueue_jt.getColumnModel().getColumn(2).setPreferredWidth(100);
            printQueue_jt.getColumnModel().getColumn(3).setMinWidth(100);
            printQueue_jt.getColumnModel().getColumn(3).setPreferredWidth(100);
            printQueue_jt.getColumnModel().getColumn(4).setMinWidth(100);
            printQueue_jt.getColumnModel().getColumn(4).setPreferredWidth(100);
            printQueue_jt.getColumnModel().getColumn(5).setMinWidth(100);
            printQueue_jt.getColumnModel().getColumn(5).setPreferredWidth(100);
            printQueue_jt.getColumnModel().getColumn(6).setMinWidth(100);
            printQueue_jt.getColumnModel().getColumn(6).setPreferredWidth(100);
            printQueue_jt.getColumnModel().getColumn(7).setMinWidth(100);
            printQueue_jt.getColumnModel().getColumn(7).setPreferredWidth(100);
            printQueue_jt.getColumnModel().getColumn(8).setMinWidth(100);
            printQueue_jt.getColumnModel().getColumn(8).setPreferredWidth(100);
            printQueue_jt.getColumnModel().getColumn(9).setMinWidth(100);
            printQueue_jt.getColumnModel().getColumn(9).setPreferredWidth(100);
            printQueue_jt.getColumnModel().getColumn(10).setMinWidth(100);
            printQueue_jt.getColumnModel().getColumn(10).setPreferredWidth(100);
            printQueue_jt.getColumnModel().getColumn(11).setMinWidth(100);
            printQueue_jt.getColumnModel().getColumn(11).setPreferredWidth(100);
            printQueue_jt.getColumnModel().getColumn(12).setMinWidth(100);
            printQueue_jt.getColumnModel().getColumn(12).setPreferredWidth(100);
            printQueue_jt.getColumnModel().getColumn(13).setMinWidth(100);
            printQueue_jt.getColumnModel().getColumn(13).setPreferredWidth(100);
            printQueue_jt.getColumnModel().getColumn(14).setMinWidth(100);
            printQueue_jt.getColumnModel().getColumn(14).setPreferredWidth(100);
            printQueue_jt.getColumnModel().getColumn(15).setMinWidth(100);
            printQueue_jt.getColumnModel().getColumn(15).setPreferredWidth(100);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(jScrollPane2, gridBagConstraints);

        jPanel3.setBackground(new java.awt.Color(242, 242, 255));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabel4.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel4.setText("Printer Name :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel3.add(jLabel4, gridBagConstraints);

        printerName_jcb.setEditable(true);
        printerName_jcb.setPreferredSize(new java.awt.Dimension(200, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel3.add(printerName_jcb, gridBagConstraints);

        removeFromPrintQueue_jb.setBackground(new java.awt.Color(191, 0, 0));
        removeFromPrintQueue_jb.setForeground(new java.awt.Color(255, 255, 255));
        removeFromPrintQueue_jb.setText("Remove");
        removeFromPrintQueue_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        removeFromPrintQueue_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                removeFromPrintQueue_jbMouseClicked(evt);
            }
        });
        removeFromPrintQueue_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                removeFromPrintQueue_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        jPanel3.add(removeFromPrintQueue_jb, gridBagConstraints);

        jButton5.setBackground(new java.awt.Color(185, 197, 31));
        jButton5.setText("Finish");
        jButton5.setPreferredSize(new java.awt.Dimension(100, 27));
        jButton5.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                jButton5MouseClicked(evt);
            }
        });
        jButton5.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                jButton5KeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        jPanel3.add(jButton5, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel1.add(jPanel3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel1.add(jSeparator3, gridBagConstraints);

        jPanel4.setBackground(new java.awt.Color(242, 242, 255));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jButton6.setBackground(new java.awt.Color(86, 132, 191));
        jButton6.setMnemonic('c');
        jButton6.setText("Close");
        jButton6.setPreferredSize(new java.awt.Dimension(100, 27));
        jButton6.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton6ActionPerformed(evt);
            }
        });
        jButton6.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                jButton6KeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel4.add(jButton6, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        jPanel1.add(jPanel4, gridBagConstraints);

        jPanel5.setBackground(new java.awt.Color(242, 242, 255));
        jPanel5.setLayout(new java.awt.GridBagLayout());

        jButton3.setBackground(new java.awt.Color(185, 197, 31));
        jButton3.setText("Finish");
        jButton3.setPreferredSize(new java.awt.Dimension(100, 27));
        jButton3.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                jButton3MouseClicked(evt);
            }
        });
        jButton3.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                jButton3KeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel5.add(jButton3, gridBagConstraints);

        updateDeliveryQueue_jb.setBackground(new java.awt.Color(86, 132, 191));
        updateDeliveryQueue_jb.setText("Update");
        updateDeliveryQueue_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        updateDeliveryQueue_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                updateDeliveryQueue_jbMouseClicked(evt);
            }
        });
        updateDeliveryQueue_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                updateDeliveryQueue_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel5.add(updateDeliveryQueue_jb, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel1.add(jPanel5, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:
        
        Dimension desktopSize = NewMDIApplication.desktopbg_jlbl.getSize();
        Dimension jInternalFrameSize = this.getSize();
        //this.setLocation((desktopSize.width - jInternalFrameSize.width)/2,(desktopSize.height- jInternalFrameSize.height)/2);
        this.setLocation((desktopSize.width - jInternalFrameSize.width)/2,2);
        
        load_printQueue_jt();
        load_deliveryQueue_jt();
        
        ButtonGroup bg = new ButtonGroup();
        bg.add(delQueue_chkbx);
        bg.add(printQueue_chkbx);
        printQueue_chkbx.setSelected(true);
        
        load_description_jcb();
        
        SearchableCombobox searchableCombobox = new SearchableCombobox(description_jcb);
        ((JTextField)description_jcb.getEditor().getEditorComponent()).addKeyListener(searchableCombobox);
        ((JTextField)description_jcb.getEditor().getEditorComponent()).setText("");
        
    }//GEN-LAST:event_formInternalFrameOpened

    public static PrintAndDeliveryQueue getInstance() // Method
    {
        if (MyInstance == null)
	{
            MyInstance = new PrintAndDeliveryQueue();
	}
        return MyInstance;
    }
    
    private void load_printQueue_jt()
    {
        try
        {
            DefaultTableModel dtm = (DefaultTableModel)printQueue_jt.getModel();
            dtm.setRowCount(0);
            
            WorkOrder workOrderEntry_BLL = new WorkOrder();
            List<WorkOrder>  workOrderDetList = workOrderEntry_BLL.getPrintWorkOrderDetails();
            
            for (int i = 0; i < workOrderDetList.size(); i++)
            {
                String  workOrderid = workOrderDetList.get(i).getWorkorderid();
                String  customer = workOrderDetList.get(i).getCustomer();
                String  desc = workOrderDetList.get(i).getDescription();
                String  mfrName = workOrderDetList.get(i).getManufacturer();
                String  gsm = workOrderDetList.get(i).getGsm();
                String  plate = workOrderDetList.get(i).getPlate();
                String  plateColour = workOrderDetList.get(i).getColour_plate();
                String  cyan = workOrderDetList.get(i).getCyan();
                String  magenta = workOrderDetList.get(i).getMagenta();
                String  yellow = workOrderDetList.get(i).getYellow();
                String  black = workOrderDetList.get(i).getBlack();
                String  length = workOrderDetList.get(i).getLength();
                String  width = workOrderDetList.get(i).getWidth();
                String  sheets = workOrderDetList.get(i).getSheets();
                String  demi = workOrderDetList.get(i).getDemitype();
               
                int sNo = printQueue_jt.getRowCount();
                String[] strArr = new String[]{Integer.toString(sNo+1), workOrderid, customer, desc, mfrName, gsm, plate, plateColour, cyan, magenta, yellow, black, length, width, sheets, demi};
                dtm.addRow(strArr);
            }
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(this, e);
        }
    }
    
    private void load_deliveryQueue_jt()
    {
        try
        {
            DefaultTableModel dtm_ = (DefaultTableModel) deliveryQueue_jt.getModel();
            dtm_.setRowCount(0);
            String delivery_stat = "NO";
            DeliveryQueue deliveryQueue = new DeliveryQueue();
            List<DeliveryQueue> delQueueDataList = deliveryQueue.getDeliveryQueueData(delivery_stat);
            for (int i = 0; i < delQueueDataList.size(); i++)
            {
                String workOrderId_ = delQueueDataList.get(i).getWorkorder_no();
                String customer_ = delQueueDataList.get(i).getCustomer();
                String description_ = delQueueDataList.get(i).getDescription();
                String delDate_ = delQueueDataList.get(i).getDelivery_date();
                String noOfSheets_ = delQueueDataList.get(i).getNo_of_sheets();
                String prnSheets_ = delQueueDataList.get(i).getPrn_sheets();
                String finBags_ = delQueueDataList.get(i).getFin_bags();
                String numBund_ = delQueueDataList.get(i).getNum_bund();
                String printerName_ = delQueueDataList.get(i).getPrinter_name();
                String deliveryBy_ = delQueueDataList.get(i).getDelivery_by();

                String[] strArr = new String[]{"", workOrderId_, customer_, description_, delDate_, noOfSheets_, prnSheets_, finBags_, numBund_, printerName_, deliveryBy_};
                dtm_.addRow(strArr);
            }

            //Reset SNo in deliveryQueue_jt
            for (int i = 0; i < deliveryQueue_jt.getRowCount(); i++)
            {
                dtm_.setValueAt(Integer.toString(i+1), i, 0);
            }
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(this, e);
        }
    }

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        // TODO add your handling code here:

        MyInstance = null;

    }//GEN-LAST:event_formInternalFrameClosed

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        // TODO add your handling code here:
        
         MyInstance = null;
        
    }//GEN-LAST:event_formInternalFrameClosing

    private void jButton5MouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jButton5MouseClicked
    {//GEN-HEADEREND:event_jButton5MouseClicked
        finishPrintQueue();
    }//GEN-LAST:event_jButton5MouseClicked

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jButton3MouseClicked
    {//GEN-HEADEREND:event_jButton3MouseClicked
        finishDeliveryQueue();
    }//GEN-LAST:event_jButton3MouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jButton2MouseClicked
    {//GEN-HEADEREND:event_jButton2MouseClicked
        load_printQueue_jt();
        load_deliveryQueue_jt();
    }//GEN-LAST:event_jButton2MouseClicked

    private void search_jbMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_search_jbMouseClicked
    {//GEN-HEADEREND:event_search_jbMouseClicked
        search();
    }//GEN-LAST:event_search_jbMouseClicked

    private void updateDeliveryQueue_jbMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_updateDeliveryQueue_jbMouseClicked
    {//GEN-HEADEREND:event_updateDeliveryQueue_jbMouseClicked
        updateDeliveryQueue();
    }//GEN-LAST:event_updateDeliveryQueue_jbMouseClicked

    private void removeFromPrintQueue_jbMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_removeFromPrintQueue_jbMouseClicked
    {//GEN-HEADEREND:event_removeFromPrintQueue_jbMouseClicked
        removeItemFromPrintQueue();
    }//GEN-LAST:event_removeFromPrintQueue_jbMouseClicked

    private void search_jbKeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_search_jbKeyPressed
    {//GEN-HEADEREND:event_search_jbKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            search();
        }
    }//GEN-LAST:event_search_jbKeyPressed

    private void jButton2KeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_jButton2KeyPressed
    {//GEN-HEADEREND:event_jButton2KeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            load_printQueue_jt();
            load_deliveryQueue_jt();
        }
    }//GEN-LAST:event_jButton2KeyPressed

    private void updateDeliveryQueue_jbKeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_updateDeliveryQueue_jbKeyPressed
    {//GEN-HEADEREND:event_updateDeliveryQueue_jbKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            updateDeliveryQueue();
        }
    }//GEN-LAST:event_updateDeliveryQueue_jbKeyPressed

    private void jButton3KeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_jButton3KeyPressed
    {//GEN-HEADEREND:event_jButton3KeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            finishDeliveryQueue();
        }
    }//GEN-LAST:event_jButton3KeyPressed

    private void removeFromPrintQueue_jbKeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_removeFromPrintQueue_jbKeyPressed
    {//GEN-HEADEREND:event_removeFromPrintQueue_jbKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            removeItemFromPrintQueue();
        }
    }//GEN-LAST:event_removeFromPrintQueue_jbKeyPressed

    private void jButton5KeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_jButton5KeyPressed
    {//GEN-HEADEREND:event_jButton5KeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            finishPrintQueue();
        }
    }//GEN-LAST:event_jButton5KeyPressed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton6ActionPerformed
    {//GEN-HEADEREND:event_jButton6ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton6KeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_jButton6KeyPressed
    {//GEN-HEADEREND:event_jButton6KeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            this.dispose();
        }
    }//GEN-LAST:event_jButton6KeyPressed

    private void removeItemFromPrintQueue()
    {
        if(printQueue_jt.getSelectedRowCount() == 0)
        {
            JOptionPane.showMessageDialog(this,"No row selected.","Error",JOptionPane.ERROR_MESSAGE);
        }
        else
        {
            DefaultTableModel dtm = (DefaultTableModel)printQueue_jt.getModel();
            dtm.removeRow(printQueue_jt.getSelectedRow());
            
            //Reset SNo in printQueue_jt
            for (int i = 0; i < printQueue_jt.getRowCount(); i++)
            {
                dtm.setValueAt(Integer.toString(i+1), i, 0);
            }
        }
    }
    
    private void updateDeliveryQueue()
    {
        if(deliveryQueue_jt.getSelectedRowCount() == 0)
        {
            JOptionPane.showMessageDialog(this,"No row selected.","Error",JOptionPane.ERROR_MESSAGE);
        }
        else
        {
            try
            {
                DefaultTableModel dtm = (DefaultTableModel)deliveryQueue_jt.getModel();
                int selRow = deliveryQueue_jt.getSelectedRow();
               
                String no_of_sheets = dtm.getValueAt(selRow, 5).toString();
                String prn_sheets = dtm.getValueAt(selRow, 6).toString();
                String fin_bags = dtm.getValueAt(selRow, 7).toString();
                String num_bund = dtm.getValueAt(selRow, 8).toString();
                String workorder_no = dtm.getValueAt(selRow, 1).toString();

                DeliveryQueue deliveryQueue = new DeliveryQueue();
                deliveryQueue.setNo_of_sheets(no_of_sheets);
                deliveryQueue.setPrn_sheets(prn_sheets);
                deliveryQueue.setFin_bags(fin_bags);
                deliveryQueue.setNum_bund(num_bund);
                deliveryQueue.setWorkorder_no(workorder_no);
                deliveryQueue.updateDeliveryQueue(deliveryQueue);
            }
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(this, e);
            }
        }
    }
    
    private void search()
    {
        try
        {
            String desc_ = ((JTextField)description_jcb.getEditor().getEditorComponent()).getText();
            
            if (printQueue_chkbx.isSelected() == true)
            {
                DefaultTableModel dtm = (DefaultTableModel)printQueue_jt.getModel();
                dtm.setRowCount(0);

                WorkOrder workOrderEntry_BLL = new WorkOrder();
                List<WorkOrder>  workOrderDetList = workOrderEntry_BLL.getPrintWorkOrderDetails();

                for (int i = 0; i < workOrderDetList.size(); i++)
                {
                    String  desc = workOrderDetList.get(i).getDescription();
                    
                    if(desc_.equals(desc))
                    {
                        String  workOrderid = workOrderDetList.get(i).getWorkorderid();
                        String  customer = workOrderDetList.get(i).getCustomer();
                        String  mfrName = workOrderDetList.get(i).getManufacturer();
                        String  gsm = workOrderDetList.get(i).getGsm();
                        String  plate = workOrderDetList.get(i).getPlate();
                        String  plateColour = workOrderDetList.get(i).getColour_plate();
                        String  cyan = workOrderDetList.get(i).getCyan();
                        String  magenta = workOrderDetList.get(i).getMagenta();
                        String  yellow = workOrderDetList.get(i).getYellow();
                        String  black = workOrderDetList.get(i).getBlack();
                        String  length = workOrderDetList.get(i).getLength();
                        String  width = workOrderDetList.get(i).getWidth();
                        String  sheets = workOrderDetList.get(i).getSheets();
                        String  demi = workOrderDetList.get(i).getDemitype();

                        int sNo = printQueue_jt.getRowCount();
                        String[] strArr = new String[]{Integer.toString(sNo+1), workOrderid, customer, desc, mfrName, gsm, plate, plateColour, cyan, magenta, yellow, black, length, width, sheets, demi};
                        dtm.addRow(strArr);
                    }
                }
            }
            else if (delQueue_chkbx.isSelected() == true)
            {
                DefaultTableModel dtm_ = (DefaultTableModel) deliveryQueue_jt.getModel();
                dtm_.setRowCount(0);
                String delivery_stat = "NO";
                DeliveryQueue deliveryQueue = new DeliveryQueue();
                List<DeliveryQueue> delQueueDataList = deliveryQueue.getDeliveryQueueData(delivery_stat);
                for (int i = 0; i < delQueueDataList.size(); i++)
                {
                    String desc = delQueueDataList.get(i).getDescription();
                    
                    if(desc_.equals(desc))
                    {
                        String workOrderId_ = delQueueDataList.get(i).getWorkorder_no();
                        String customer_ = delQueueDataList.get(i).getCustomer();
                        String delDate_ = delQueueDataList.get(i).getDelivery_date();
                        String noOfSheets_ = delQueueDataList.get(i).getNo_of_sheets();
                        String prnSheets_ = delQueueDataList.get(i).getPrn_sheets();
                        String finBags_ = delQueueDataList.get(i).getFin_bags();
                        String numBund_ = delQueueDataList.get(i).getNum_bund();
                        String printerName_ = delQueueDataList.get(i).getPrinter_name();
                        String deliveryBy_ = delQueueDataList.get(i).getDelivery_by();

                        String[] strArr = new String[]{"", workOrderId_, customer_, desc, delDate_, noOfSheets_, prnSheets_, finBags_, numBund_, printerName_, deliveryBy_};
                        dtm_.addRow(strArr);
                    }
                }

                //Reset SNo in deliveryQueue_jt
                for (int i = 0; i < deliveryQueue_jt.getRowCount(); i++)
                {
                    dtm_.setValueAt(Integer.toString(i+1), i, 0);
                }
            }
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(this, e);
        }
    }
    
    private void finishPrintQueue()
    {
        if(printQueue_jt.getSelectedRowCount() == 0)
        {
            JOptionPane.showMessageDialog(this,"Select a Work Order from the Print Order Queue.","Error",JOptionPane.ERROR_MESSAGE); 
        }
        else
        {
            try
            {
                SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
                SimpleDateFormat sdf_ = new SimpleDateFormat("yyyy-MM-dd");
                DefaultTableModel dtm = (DefaultTableModel) printQueue_jt.getModel();
                DefaultTableModel dtm_ = (DefaultTableModel) deliveryQueue_jt.getModel();
                int selRow = printQueue_jt.getSelectedRow();
                WorkOrder workOrderEntry_BLL = new WorkOrder();
                
                String workOrderId = dtm.getValueAt(selRow, 1).toString();
                String customer = dtm.getValueAt(selRow, 2).toString();
                String description = dtm.getValueAt(selRow, 3).toString();
                String delDate = workOrderEntry_BLL.getDelDate(workOrderEntry_BLL, workOrderId);
                String noOfSheets = workOrderEntry_BLL.getNoOfSheets(workOrderEntry_BLL, workOrderId);
                String prnSheets = "";
                String finBags = "";
                String numBund = "";
                String printerName = ((JTextField)printerName_jcb.getEditor().getEditorComponent()).getText();
                String deliveryBy = workOrderEntry_BLL.getDeliveryBy(workOrderEntry_BLL, workOrderId);
                String delivery_stat = "NO";
                String printWorkOrderStatus = "FINISHED";
                
                //Insert into delivery_queue
                DeliveryQueue deliveryQueue = new DeliveryQueue();
                deliveryQueue.setWorkorder_no(workOrderId);
                deliveryQueue.setCustomer(customer);
                deliveryQueue.setDescription(description);
                deliveryQueue.setDelivery_date(delDate);
                deliveryQueue.setNo_of_sheets(noOfSheets);
                deliveryQueue.setPrn_sheets(prnSheets);
                deliveryQueue.setFin_bags(finBags);
                deliveryQueue.setNum_bund(numBund);
                deliveryQueue.setPrinter_name(printerName);
                deliveryQueue.setDelivery_by(deliveryBy);
                deliveryQueue.setDelivery_stat("NO");
                deliveryQueue.insertToDeliveryQueue(deliveryQueue);
                
                //Load deliveryQueue_jt
                List<DeliveryQueue> delQueueDataList = deliveryQueue.getDeliveryQueueData(delivery_stat);
                for (int i = 0; i < delQueueDataList.size(); i++)
                {
                    String workOrderId_ = delQueueDataList.get(i).getWorkorder_no();
                    String customer_ = delQueueDataList.get(i).getCustomer();
                    String description_ = delQueueDataList.get(i).getDescription();
                    String delDate_ = delQueueDataList.get(i).getDelivery_date();
                    String noOfSheets_ = delQueueDataList.get(i).getNo_of_sheets();
                    String prnSheets_ = delQueueDataList.get(i).getPrn_sheets();
                    String finBags_ = delQueueDataList.get(i).getFin_bags();
                    String numBund_ = delQueueDataList.get(i).getNum_bund();
                    String printerName_ = delQueueDataList.get(i).getPrinter_name();
                    String deliveryBy_ = delQueueDataList.get(i).getDelivery_by();
                    
                    String[] strArr = new String[]{"", workOrderId_, customer_, description_, delDate_, noOfSheets_, prnSheets_, finBags_, numBund_, printerName_, deliveryBy_};
                    dtm_.addRow(strArr);
                }
                
                //Reset SNo in deliveryQueue_jt
                for (int i = 0; i < deliveryQueue_jt.getRowCount(); i++)
                {
                    dtm_.setValueAt(Integer.toString(i+1), i, 0);
                }
                
                //Remove selected row from printQueue_jt
                dtm.removeRow(selRow);
                
                //Reset SNo in printQueue_jt
                for (int i = 0; i < printQueue_jt.getRowCount(); i++)
                {
                    dtm.setValueAt(Integer.toString(i+1), i, 0);
                }
                
                //Update print work order id status
                deliveryQueue.UpdatePrintWorkOrderStatus(printWorkOrderStatus, workOrderId);
                
            }
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(this, e);
            }
            
        }
    }

    private void finishDeliveryQueue()
    {
        try
        {
            if(deliveryQueue_jt.getSelectedRowCount() == 0)
            {
                JOptionPane.showMessageDialog(this,"Select a Work Order from the Delivery Queue.","Error",JOptionPane.ERROR_MESSAGE); 
            }
            else
            {
                DefaultTableModel dtm_ = (DefaultTableModel) deliveryQueue_jt.getModel();
                int selRow = deliveryQueue_jt.getSelectedRow();
                String workorder_no = dtm_.getValueAt(selRow, 1).toString();

                DeliveryQueue deliveryQueue = new DeliveryQueue();
                deliveryQueue.setWorkorder_no(workorder_no);
                deliveryQueue.setDelivery_stat("YES");
                deliveryQueue.finishDeliveryQueue(deliveryQueue);
                
                //Reset SNo in deliveryQueue_jt
                for (int i = 0; i < deliveryQueue_jt.getRowCount(); i++)
                {
                    dtm_.setValueAt(Integer.toString(i+1), i, 0);
                }
               
                load_printQueue_jt();
                load_deliveryQueue_jt();
            }
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(this, e);
        }
    }
    
    private void load_description_jcb()
    {
        try
        {
            description_jcb.removeAllItems();
            
            DeliveryQueue deliveryQueue = new DeliveryQueue();
            List<WorkOrder> descList = deliveryQueue.getDescriptions();
            
            for (int i = 0; i < descList.size(); i++)
            {
                String desc = descList.get(i).getDescription();
                description_jcb.addItem(desc);
            }
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(this, e);
        }
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton delQueue_chkbx;
    private javax.swing.JTable deliveryQueue_jt;
    private javax.swing.JComboBox<String> description_jcb;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JRadioButton printQueue_chkbx;
    private javax.swing.JTable printQueue_jt;
    private javax.swing.JComboBox<String> printerName_jcb;
    private javax.swing.JButton removeFromPrintQueue_jb;
    private javax.swing.JButton search_jb;
    private javax.swing.JButton updateDeliveryQueue_jb;
    // End of variables declaration//GEN-END:variables
}
