package DSST007_1_CUS13.pll;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileWriter;
import java.io.InputStream;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;
import net.sf.jasperreports.view.JasperViewer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author praveen
 */
public class Billing_Detailed_Report extends javax.swing.JInternalFrame {

    private static Billing_Detailed_Report billing_Report_Instance;
    boolean deleteStatus = false;
    boolean dataStatus = true;
    AL_searchby_jcb aL_searchby_jcb = new AL_searchby_jcb();
    int rowcount = 0;
    int rowcount_ = 0;
    BigDecimal amountValue = new BigDecimal("0"); 
    BigDecimal amountValuetTemp = new BigDecimal("0"); 
    ArrayList<String> categoryArr = new ArrayList<>();
    
    public Billing_Detailed_Report() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        writetoexcel_jb = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        billreporttable_jt = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        todate_jdc = new com.toedter.calendar.JDateChooser();
        all_jchkbx = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        fromdate_jdc = new com.toedter.calendar.JDateChooser();
        date_jchkbx = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        searchby_jcb = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        saleratetotalamt_jtf = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        totalcount_jtf = new javax.swing.JTextField();
        selectAll_jb = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        close_jb = new javax.swing.JButton();
        deleteBills_jb = new javax.swing.JButton();
        print_jb = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255)));
        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Reports - > Detailed Sales");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/DSST007_1_CUS13/InstabizTrader Logo Final 35x35.png"))); // NOI18N
        addInternalFrameListener(new javax.swing.event.InternalFrameListener()
        {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt)
            {
                formInternalFrameOpened(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt)
            {
                formInternalFrameClosing(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt)
            {
                formInternalFrameClosed(evt);
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt)
            {
            }
        });

        jPanel1.setBackground(new java.awt.Color(242, 242, 255));

        writetoexcel_jb.setBackground(new java.awt.Color(86, 132, 191));
        writetoexcel_jb.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        writetoexcel_jb.setText("Write to Excel");
        writetoexcel_jb.setPreferredSize(new java.awt.Dimension(125, 20));
        writetoexcel_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mousePressed(java.awt.event.MouseEvent evt)
            {
                writetoexcel_jbMousePressed(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt)
            {
                writetoexcel_jbMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt)
            {
                writetoexcel_jbMouseEntered(evt);
            }
        });
        writetoexcel_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                writetoexcel_jbKeyPressed(evt);
            }
        });

        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setPreferredSize(new java.awt.Dimension(571, 421));
        jScrollPane2.setRequestFocusEnabled(false);

        billreporttable_jt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        billreporttable_jt.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "SNo", "BillNo", "BillDate", "Category", "ItemName", "Portion", "Price", "Qnty", "Amount", "id", "Cat_Total"
            }
        )
        {
            boolean[] canEdit = new boolean []
            {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        billreporttable_jt.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        billreporttable_jt.setFillsViewportHeight(true);
        billreporttable_jt.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        billreporttable_jt.setRowHeight(23);
        billreporttable_jt.setSelectionBackground(new java.awt.Color(86, 132, 191));
        billreporttable_jt.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                billreporttable_jtKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(billreporttable_jt);
        if (billreporttable_jt.getColumnModel().getColumnCount() > 0)
        {
            billreporttable_jt.getColumnModel().getColumn(0).setMinWidth(50);
            billreporttable_jt.getColumnModel().getColumn(0).setPreferredWidth(50);
            billreporttable_jt.getColumnModel().getColumn(1).setMinWidth(100);
            billreporttable_jt.getColumnModel().getColumn(1).setPreferredWidth(100);
            billreporttable_jt.getColumnModel().getColumn(2).setMinWidth(100);
            billreporttable_jt.getColumnModel().getColumn(2).setPreferredWidth(100);
            billreporttable_jt.getColumnModel().getColumn(3).setMinWidth(150);
            billreporttable_jt.getColumnModel().getColumn(3).setPreferredWidth(150);
            billreporttable_jt.getColumnModel().getColumn(4).setMinWidth(200);
            billreporttable_jt.getColumnModel().getColumn(4).setPreferredWidth(200);
            billreporttable_jt.getColumnModel().getColumn(5).setMinWidth(100);
            billreporttable_jt.getColumnModel().getColumn(5).setPreferredWidth(100);
            billreporttable_jt.getColumnModel().getColumn(6).setMinWidth(100);
            billreporttable_jt.getColumnModel().getColumn(6).setPreferredWidth(100);
            billreporttable_jt.getColumnModel().getColumn(7).setMinWidth(70);
            billreporttable_jt.getColumnModel().getColumn(7).setPreferredWidth(70);
            billreporttable_jt.getColumnModel().getColumn(8).setMinWidth(100);
            billreporttable_jt.getColumnModel().getColumn(8).setPreferredWidth(100);
            billreporttable_jt.getColumnModel().getColumn(9).setMinWidth(0);
            billreporttable_jt.getColumnModel().getColumn(9).setPreferredWidth(0);
            billreporttable_jt.getColumnModel().getColumn(9).setMaxWidth(0);
            billreporttable_jt.getColumnModel().getColumn(10).setMinWidth(0);
            billreporttable_jt.getColumnModel().getColumn(10).setPreferredWidth(0);
            billreporttable_jt.getColumnModel().getColumn(10).setMaxWidth(0);
        }
        billreporttable_jt.getAccessibleContext().setAccessibleName("");

        jPanel5.setBackground(new java.awt.Color(242, 242, 255));
        jPanel5.setLayout(new java.awt.GridBagLayout());

        todate_jdc.setBackground(new java.awt.Color(242, 242, 255));
        todate_jdc.setDateFormatString("d-MMM-yyyy");
        todate_jdc.setPreferredSize(new java.awt.Dimension(140, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 2, 0);
        jPanel5.add(todate_jdc, gridBagConstraints);

        all_jchkbx.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        all_jchkbx.setText("All");
        all_jchkbx.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                all_jchkbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 2, 0);
        jPanel5.add(all_jchkbx, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel1.setText("To :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 2, 0);
        jPanel5.add(jLabel1, gridBagConstraints);

        fromdate_jdc.setBackground(new java.awt.Color(242, 242, 255));
        fromdate_jdc.setDateFormatString("d-MMM-yyyy");
        fromdate_jdc.setPreferredSize(new java.awt.Dimension(140, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 2, 0);
        jPanel5.add(fromdate_jdc, gridBagConstraints);

        date_jchkbx.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        date_jchkbx.setText("Date");
        date_jchkbx.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                date_jchkbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 2, 0);
        jPanel5.add(date_jchkbx, gridBagConstraints);

        jButton1.setBackground(new java.awt.Color(185, 197, 31));
        jButton1.setText("Search >>");
        jButton1.setPreferredSize(new java.awt.Dimension(100, 27));
        jButton1.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mousePressed(java.awt.event.MouseEvent evt)
            {
                jButton1MousePressed(evt);
            }
        });
        jButton1.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                jButton1KeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 2, 0);
        jPanel5.add(jButton1, gridBagConstraints);

        searchby_jcb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-Search By-", "Billed", "Cancelled" }));
        searchby_jcb.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 2, 0);
        jPanel5.add(searchby_jcb, gridBagConstraints);

        jLabel9.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel9.setText("From :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 2, 0);
        jPanel5.add(jLabel9, gridBagConstraints);

        jPanel3.setBackground(new java.awt.Color(242, 242, 255));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabel4.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        jLabel4.setText("Total Amt :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 5, 0);
        jPanel3.add(jLabel4, gridBagConstraints);

        saleratetotalamt_jtf.setEditable(false);
        saleratetotalamt_jtf.setBackground(new java.awt.Color(255, 204, 51));
        saleratetotalamt_jtf.setFocusable(false);
        saleratetotalamt_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 5);
        jPanel3.add(saleratetotalamt_jtf, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        jLabel2.setText("Total Count :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 5, 0);
        jPanel3.add(jLabel2, gridBagConstraints);

        totalcount_jtf.setEditable(false);
        totalcount_jtf.setBackground(new java.awt.Color(255, 204, 51));
        totalcount_jtf.setFocusable(false);
        totalcount_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel3.add(totalcount_jtf, gridBagConstraints);

        selectAll_jb.setBackground(new java.awt.Color(86, 132, 191));
        selectAll_jb.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        selectAll_jb.setText("Select All");
        selectAll_jb.setPreferredSize(new java.awt.Dimension(125, 20));
        selectAll_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                selectAll_jbMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt)
            {
                selectAll_jbMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt)
            {
                selectAll_jbMouseEntered(evt);
            }
        });
        selectAll_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                selectAll_jbKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(writetoexcel_jb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(selectAll_jb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 993, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(writetoexcel_jb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(selectAll_jb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0))
        );

        jPanel2.setBackground(new java.awt.Color(242, 242, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new java.awt.GridBagLayout());

        close_jb.setBackground(new java.awt.Color(86, 132, 191));
        close_jb.setMnemonic('s');
        close_jb.setText("Close");
        close_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        close_jb.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                close_jbActionPerformed(evt);
            }
        });
        close_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                close_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 15, 0);
        jPanel2.add(close_jb, gridBagConstraints);

        deleteBills_jb.setBackground(new java.awt.Color(164, 8, 8));
        deleteBills_jb.setForeground(new java.awt.Color(255, 255, 0));
        deleteBills_jb.setText("Delete");
        deleteBills_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        deleteBills_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                deleteBills_jbMouseClicked(evt);
            }
        });
        deleteBills_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                deleteBills_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 15, 0);
        jPanel2.add(deleteBills_jb, gridBagConstraints);

        print_jb.setBackground(new java.awt.Color(86, 132, 191));
        print_jb.setText("Print");
        print_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        print_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                print_jbMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 15, 0);
        jPanel2.add(print_jb, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:

        Dimension desktopSize = NewMDIApplication.desktopbg_jlbl.getSize();
        Dimension jInternalFrameSize = this.getSize();
        this.setLocation((desktopSize.width - jInternalFrameSize.width)/2,(desktopSize.height- jInternalFrameSize.height)/2);
        
        //--------------------

        ((JTextField) fromdate_jdc.getDateEditor().getUiComponent()).setEditable(false);

        jScrollPane2.getVerticalScrollBar().setUnitIncrement(12);

        getFirstBillDate();
     
        todate_jdc.setDate(new Date());
        
        searchby_jcb.requestFocusInWindow();
        
        searchby_jcb.setSelectedItem("Billed");
        date_jchkbx.setSelected(true);
        
        billreporttable_jt.setFocusTraversalKeysEnabled(false);
        
        searchby_jcb.addActionListener(aL_searchby_jcb);

    }//GEN-LAST:event_formInternalFrameOpened

    public static Billing_Detailed_Report getInstance() // Method
    {
        if (billing_Report_Instance == null)
	{
            billing_Report_Instance = new Billing_Detailed_Report();
	}
        return billing_Report_Instance;
    }
    
    private void getFirstBillDate()
    {
        
        Connection con = DatabaseConnection.createConnection();

        try {

            SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
            SimpleDateFormat sdf2 = new SimpleDateFormat("dd-MM-yyyy", Locale.getDefault());

            Date stockdateval;

            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * FROM billing");

            if (rs.first()) {

                String stockdate = rs.getString("bill_date");
                stockdateval = sdf2.parse(sdf2.format(sdf1.parse(stockdate)));
                fromdate_jdc.setDate(stockdateval);

            }

        } catch (Exception e) {

            JOptionPane.showMessageDialog(null, e);

        } finally {

            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex);
                }

            }

        }
        
    }
    
    private void close_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_close_jbActionPerformed
        // TODO add your handling code here:

        this.dispose();

    }//GEN-LAST:event_close_jbActionPerformed

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        // TODO add your handling code here:

        billing_Report_Instance = null;

    }//GEN-LAST:event_formInternalFrameClosed

    private void getBillingDetails()
    {

        try {
            
            if(fromdate_jdc.getDate() == null){
                
                JOptionPane.showMessageDialog(this, "Please specify From Date.", "Error", JOptionPane.ERROR_MESSAGE);
                
            } 
            else if (((JTextField) todate_jdc.getDateEditor().getUiComponent()).getText().equals("")) {

                JOptionPane.showMessageDialog(this, "Please specify To Date.", "Error", JOptionPane.ERROR_MESSAGE);

            } else if (todate_jdc.getDate().compareTo(fromdate_jdc.getDate()) == -1) {

                JOptionPane.showMessageDialog(this, "'From Date' should be lower than 'To Date'.", "Error", JOptionPane.ERROR_MESSAGE);

            } else if (searchby_jcb.getSelectedItem().toString().equals("-Search By-")) {

                JOptionPane.showMessageDialog(this, "Please specify a Search Option.", "Error", JOptionPane.ERROR_MESSAGE);

            }
            else if(all_jchkbx.isSelected() == false && date_jchkbx.isSelected() == false)
            {
                
                JOptionPane.showMessageDialog(this, "Select All/Date.", "Error", JOptionPane.ERROR_MESSAGE);
                
            }
            else 
            {
              
                SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
                SimpleDateFormat sdf2 = new SimpleDateFormat("dd-MM-yyyy", Locale.getDefault());
                String fromdate = sdf1.format(fromdate_jdc.getDate());
                String todate = sdf1.format(todate_jdc.getDate());
                
                String sql = null;
                String sql_ = null;
                getDishCategories();
            
                if (searchby_jcb.getSelectedItem().toString().equals("Billed") && all_jchkbx.isSelected() == true) 
                {

                    rowcount = 0;
                    rowcount_ = 0;
                    amountValue = new BigDecimal("0"); 
                    amountValuetTemp = new BigDecimal("0"); 
                    String sqlStr_1 = "sql_1";
                    String sqlStr_2 = "sql_2";
                    DefaultTableModel jTableModel1 = (DefaultTableModel) billreporttable_jt.getModel();
                    jTableModel1.setRowCount(0);
                    
                    for(int i = 0 ; i < categoryArr.size() ; i ++)
                    {

                        String category = categoryArr.get(i);
                        
                        if(sqlStr_1.equals("sql_1"))
                        {
                            
                            sql = "SELECT bill_no, bill_date, item_name, portion, price, quantity, amount, amount, id, item_category FROM billing WHERE status='billed' AND item_category = '"+category+"' ORDER BY item_category ";
                            displayResultSet(sql,sqlStr_1);
                            
                        }
                        
                        if(sqlStr_2.equals("sql_2"))
                        {
                            
                            sql_ = "SELECT SUM(amount) AS amt FROM billing WHERE status='billed' AND item_category = '"+category+"' GROUP BY item_category ";
                            displayResultSet(sql_,sqlStr_2);
                            
                        }
                        
                        
                    }
                    
                }  
                else if (searchby_jcb.getSelectedItem().toString().equals("Billed") && date_jchkbx.isSelected() == true) 
                {
                 
                    rowcount = 0;
                    rowcount_ = 0;
                    amountValue = new BigDecimal("0"); 
                    amountValuetTemp = new BigDecimal("0"); 
                    String sqlStr_1 = "sql_1";
                    String sqlStr_2 = "sql_2";
                    DefaultTableModel jTableModel1 = (DefaultTableModel) billreporttable_jt.getModel();
                    jTableModel1.setRowCount(0);
                    
                    for(int i = 0 ; i < categoryArr.size() ; i ++)
                    {

                        String category = categoryArr.get(i);
                        
                        if(sqlStr_1.equals("sql_1"))
                        {
                            
                            sql = "SELECT bill_no, bill_date, item_name, portion, price, quantity, amount, amount, id, item_category FROM billing WHERE  bill_date BETWEEN '" +fromdate+ "' AND '" +todate+ "' AND status='billed' AND item_category = '"+category+"' ORDER BY item_category ";
                            displayResultSet(sql,sqlStr_1);
                            
                        }
                        
                        if(sqlStr_2.equals("sql_2"))
                        {
                            
                            sql_ = "SELECT SUM(amount) AS amt FROM billing WHERE bill_date BETWEEN '" +fromdate+ "' AND '" +todate+ "' AND status='billed' AND item_category = '"+category+"' GROUP BY item_category ";
                            displayResultSet(sql_,sqlStr_2);
                            
                        }
                        
                        
                    }
                    
                }  
                else if (searchby_jcb.getSelectedItem().toString().equals("Cancelled") && all_jchkbx.isSelected() == true) 
                {
                 
                    //sql = "SELECT bill_no,bill_date,item_name,portion,price,quantity,amount,id FROM billing WHERE status='cancelled' ORDER BY item_name ";
                    
                    rowcount = 0;
                    rowcount_ = 0;
                    amountValue = new BigDecimal("0"); 
                    amountValuetTemp = new BigDecimal("0"); 
                    String sqlStr_1 = "sql_1";
                    String sqlStr_2 = "sql_2";
                    DefaultTableModel jTableModel1 = (DefaultTableModel) billreporttable_jt.getModel();
                    jTableModel1.setRowCount(0);
                    
                    for(int i = 0 ; i < categoryArr.size() ; i ++)
                    {

                        String category = categoryArr.get(i);
                        
                        if(sqlStr_1.equals("sql_1"))
                        {
                            
                            sql = "SELECT bill_no, bill_date, item_name, portion, price, quantity, amount, amount, id, item_category FROM billing WHERE  status='cancelled' AND item_category = '"+category+"' ORDER BY item_category ";
                            displayResultSet(sql,sqlStr_1);
                            
                        }
                        
                        if(sqlStr_2.equals("sql_2"))
                        {
                            
                            sql_ = "SELECT SUM(amount) AS amt FROM billing WHERE status='cancelled' AND item_category = '"+category+"' GROUP BY item_category ";
                            displayResultSet(sql_,sqlStr_2);
                            
                        }
                        
                        
                    }
                    
                }  
                else if (searchby_jcb.getSelectedItem().toString().equals("Cancelled") && date_jchkbx.isSelected() == true) 
                {
                 
                    //sql = "SELECT bill_no,bill_date,item_name,portion,price,quantity,SUM(amount),id FROM billing WHERE bill_date BETWEEN '" + fromdate + "' AND '" + todate + "' AND status='cancelled' GROUP BY item_name ORDER BY item_name ";
                    
                     rowcount = 0;
                    rowcount_ = 0;
                    amountValue = new BigDecimal("0"); 
                    amountValuetTemp = new BigDecimal("0"); 
                    String sqlStr_1 = "sql_1";
                    String sqlStr_2 = "sql_2";
                    DefaultTableModel jTableModel1 = (DefaultTableModel) billreporttable_jt.getModel();
                    jTableModel1.setRowCount(0);
                    
                    for(int i = 0 ; i < categoryArr.size() ; i ++)
                    {

                        String category = categoryArr.get(i);
                        
                        if(sqlStr_1.equals("sql_1"))
                        {
                            
                            sql = "SELECT bill_no, bill_date, item_name, portion, price, quantity, amount, amount, id, item_category FROM billing WHERE  bill_date BETWEEN '" +fromdate+ "' AND '" +todate+ "' AND status='cancelled' AND item_category = '"+category+"' ORDER BY item_category ";
                            displayResultSet(sql,sqlStr_1);
                            
                        }
                        
                        if(sqlStr_2.equals("sql_2"))
                        {
                            
                            sql_ = "SELECT SUM(amount) AS amt FROM billing WHERE bill_date BETWEEN '" +fromdate+ "' AND '" +todate+ "' AND status='cancelled' AND item_category = '"+category+"' GROUP BY item_category ";
                            displayResultSet(sql_,sqlStr_2);
                            
                        }
                        
                        
                    }
                    
                }  
                    
            }

        } catch (Exception e) {

            JOptionPane.showMessageDialog(this, "getBillingDetails(): "+e);
            
        }
        
    }
    
    private void displayResultSet(String  sql, String sqlStr)
    {
        
        Connection con = DatabaseConnection.createConnection();
        
        try
        {

            SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
            SimpleDateFormat sdf2 = new SimpleDateFormat("dd-MM-yyyy", Locale.getDefault());

            String fromdate = sdf1.format(fromdate_jdc.getDate());
            String todate = sdf1.format(todate_jdc.getDate());
            
            DefaultTableModel jTableModel1 = (DefaultTableModel) billreporttable_jt.getModel();
            //jTableModel1.setRowCount(0);

            String[] strarr = null;

            Statement stmt = con.createStatement();
            Statement stmt_2 = con.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
 
            if(sqlStr.equals("sql_1"))
            {
                
                while (rs.next()) {

                    String billno = rs.getString("bill_no");
                    Date billdate = rs.getDate("bill_date");
                    String billdatestr = sdf2.format(billdate);
                    String itemname = rs.getString("item_name");
                    String portion = rs.getString("portion");
                    String price = rs.getString("price");
                    String quantity = rs.getString("quantity");
                    String amount = rs.getString("amount");
                    String id = rs.getString("id");
                    String category = rs.getString("item_category");
                  
                    rowcount = rowcount_ + 1;
                    rowcount_ = rowcount;
                    
                    strarr = new String[]{Integer.toString(rowcount),billno,billdatestr,category,itemname,portion,price,quantity,amount,id,""};
                    jTableModel1.addRow(strarr);

                    String itemcount = Integer.toString(rowcount);
                    totalcount_jtf.setText(itemcount);

                    amountValue = new BigDecimal(amount).add(amountValuetTemp);
                    amountValuetTemp = amountValue;
                    saleratetotalamt_jtf.setText(amountValue.toString());

                }
            }
            if(sqlStr.equals("sql_2"))
            {
                
                while(rs.next())
                {
                    String categoryTotal = rs.getString("amt");

                    //strarr = new String[]{"","","","","","","","","<html><font color='red' ><b>"+categoryTotal+"</b></font></html>","",""};
                    strarr = new String[]{"","","","","","","","",categoryTotal,"",""};
                    jTableModel1.addRow(strarr);
                    
                }
                
            }
            
               

        }catch(Exception e)
        {
            
            JOptionPane.showMessageDialog(this, e);
            
        }
        
    }
    
    private void getDishCategories()
    {
        
        Connection con = DatabaseConnection.createConnection();
        PreparedStatement prepstate = null;
        ResultSet rs = null;
        
        try
        {
            categoryArr.clear();
                    
            String sql = "SELECT DISTINCT item_category FROM billing";
            prepstate = con.prepareStatement(sql);
            rs = prepstate.executeQuery();
            
            while(rs.next())
            {
                
                String dishCategory = rs.getString("item_category");
                categoryArr.add(dishCategory);
               
            }
           
        }
        catch(Exception e)
        {
            
            JOptionPane.showMessageDialog(this, "getDishCategories() :"+e);
            
        }
        
        finally
        {
            
            try
            {
  
                rs.close();
                prepstate.close();
                con.close();
        
            }
            catch(Exception e)
            {
                
                JOptionPane.showMessageDialog(this, e);
                
            }
            
        }
        
    }
    
    class AL_searchby_jcb implements ActionListener
    {

        @Override
        public void actionPerformed(ActionEvent ae) {
            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        
            try {

                    if(searchby_jcb.getSelectedItem().toString().equals("All")) 
                    {

                        ((DefaultTableModel) billreporttable_jt.getModel()).setRowCount(0);
                        totalcount_jtf.setText("");
                        saleratetotalamt_jtf.setText("");

                    }

            } catch (Exception e) {

                JOptionPane.showMessageDialog(null, e);

            }

        }
        
    }
    
    private void writeToExcel()
    {
        
        try
        {
        
            if(billreporttable_jt.getRowCount()==0)
            {

                JOptionPane.showMessageDialog(this,"There are no table data to export.","Error",JOptionPane.ERROR_MESSAGE);

            }
            else
            {

                SimpleDateFormat sdf1 = new SimpleDateFormat("dd-MMM-yyyy",Locale.getDefault());
                
                String filename = "Sales_Report-From_" + sdf1.format(fromdate_jdc.getDate()) + "_To_" + sdf1.format(todate_jdc.getDate());
                
                JFileChooser fileChooser = new JFileChooser();
                fileChooser.setSelectedFile(new File(filename+".xls"));
                FileNameExtensionFilter filter = new FileNameExtensionFilter("Microsoft Excel", ".xls");
                fileChooser.addChoosableFileFilter(filter);
//                fileChooser.setAcceptAllFileFilterUsed(false);
               
                FileWriter fw = null;

                fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
                //System.out.println(new File(System.getProperty("user.dir")));
                
                int result = fileChooser.showSaveDialog(this);
                if (result == JFileChooser.APPROVE_OPTION) 
                {
                    File path = fileChooser.getSelectedFile();
                    
                    if(path!=null)
                    {

                        fw = new FileWriter(path);
                        
                        fw.write("\n");

                        TableModel tm = billreporttable_jt.getModel();

                        for (int i = 0; i < tm.getColumnCount(); i++) {
                            
                            if(i!=9 && i!=10)
                            {
                                fw.write(tm.getColumnName(i) + "\t");
                               
                            }    
                        }

                        fw.write("\n");

                        for (int i = 0; i < tm.getRowCount(); i++) {
                            for (int j = 0; j < tm.getColumnCount(); j++) {   
                                if(j!=9 && j!=10)
                                {
                                    
                                    String cellValue;
                                    
                                    if(tm.getValueAt(i, j)!=null)
                                    {
                                        
                                        cellValue = tm.getValueAt(i, j).toString();
                            
                                        String str = cellValue;
                                        Pattern p = Pattern.compile("(?<=\\<b\\>)(\\s*.*\\s*)(?=\\<\\/b\\>)");
                                        Matcher m = p.matcher(str);
                                        if(m.find())
                                        {

                                            cellValue = m.group();
                                           
                                        }
                                      
                                    }
                                    else
                                    {
                                        
                                        cellValue = "";
                                        
                                    }

                                    fw.write(cellValue + "\t");
                                    
                                }
                            }
                            fw.write("\n");
                        }
                    }
        
                   fw.close();
                }
            }
            
        }
        catch(Exception e)
        {
            
             JOptionPane.showMessageDialog(null,e);
            
        }
        
    }
    
    private void jButton1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MousePressed
        // TODO add your handling code here:
        
        getBillingDetails();
        
    }//GEN-LAST:event_jButton1MousePressed

    private void jButton1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton1KeyPressed
        // TODO add your handling code here:
     
        if(evt.getKeyCode()==KeyEvent.VK_ENTER)
        {
            
            getBillingDetails();
            
        }
       
    }//GEN-LAST:event_jButton1KeyPressed

    private void close_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_close_jbKeyPressed
        // TODO add your handling code here:
        
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            
            close_jb_KeyPressed(evt);
            
        }
        
    }//GEN-LAST:event_close_jbKeyPressed

    private void close_jb_KeyPressed(java.awt.event.KeyEvent evt)
    {
        
        this.dispose();
        
    }
    
    private void writetoexcel_jbMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_writetoexcel_jbMousePressed
        // TODO add your handling code here:
        
        writeToExcel();
        
    }//GEN-LAST:event_writetoexcel_jbMousePressed

    private void writetoexcel_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_writetoexcel_jbKeyPressed
        // TODO add your handling code here:
        
        if(evt.getKeyCode()==KeyEvent.VK_ENTER)
        {
            
            writeToExcel();
            
        }
        
    }//GEN-LAST:event_writetoexcel_jbKeyPressed

    private void writetoexcel_jbMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_writetoexcel_jbMouseEntered
        // TODO add your handling code here:
        
        writetoexcel_jb.setForeground(Color.RED);
        
    }//GEN-LAST:event_writetoexcel_jbMouseEntered

    private void writetoexcel_jbMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_writetoexcel_jbMouseExited
        // TODO add your handling code here:
        
        writetoexcel_jb.setForeground(Color.BLACK);
        
    }//GEN-LAST:event_writetoexcel_jbMouseExited

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        // TODO add your handling code here:
        
        billing_Report_Instance = null;
        
    }//GEN-LAST:event_formInternalFrameClosing

    private void date_jchkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_date_jchkbxActionPerformed
        // TODO add your handling code here:
        
        if(date_jchkbx.isSelected() == true)
        {
            
            fromdate_jdc.setEnabled(true);
            todate_jdc.setEnabled(true);
            
            all_jchkbx.setSelected(false);
            
        }
        
    }//GEN-LAST:event_date_jchkbxActionPerformed

    private void all_jchkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_all_jchkbxActionPerformed
        // TODO add your handling code here:

        if(all_jchkbx.isSelected() == true)
        {

            fromdate_jdc.setEnabled(false);
            todate_jdc.setEnabled(false);

            date_jchkbx.setSelected(false);

        }

    }//GEN-LAST:event_all_jchkbxActionPerformed

    private void billreporttable_jtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_billreporttable_jtKeyPressed
        // TODO add your handling code here:
        
        if(evt.getKeyCode() == KeyEvent.VK_TAB)
        {
            
            writetoexcel_jb.requestFocusInWindow();
            
        }
        
    }//GEN-LAST:event_billreporttable_jtKeyPressed

    private void selectAll_jbMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectAll_jbMouseEntered
        // TODO add your handling code here:
        
         selectAll_jb.setForeground(Color.RED);
        
    }//GEN-LAST:event_selectAll_jbMouseEntered

    private void selectAll_jbMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectAll_jbMouseExited
        // TODO add your handling code here:
        
        selectAll_jb.setForeground(Color.BLACK);
        
    }//GEN-LAST:event_selectAll_jbMouseExited

    private void selectAll_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectAll_jbMouseClicked
        // TODO add your handling code here:
        
        selectAll_jb_MouseClicked();
        
    }//GEN-LAST:event_selectAll_jbMouseClicked

    private void deleteBills_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteBills_jbMouseClicked
        // TODO add your handling code here:
        
        if(billreporttable_jt.getSelectedRowCount() == 0)
        {
            
            JOptionPane.showMessageDialog(this,"Please select atleast one item.","Error",JOptionPane.ERROR_MESSAGE);
            
        }
        else
        {
            int response = JOptionPane.showConfirmDialog(null, "This will delete the selected items permanently. Do you want to proceed?", "Confirm",
            JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

            if (response == JOptionPane.YES_OPTION) 
            {
                deleteBills_jb_MouseClicked();
            }
        }
        
    }//GEN-LAST:event_deleteBills_jbMouseClicked

    private void deleteBills_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_deleteBills_jbKeyPressed
        // TODO add your handling code here:
        
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
        
            if(billreporttable_jt.getSelectedRowCount() == 0)
            {

                JOptionPane.showMessageDialog(this,"Please select atleast one item.","Error",JOptionPane.ERROR_MESSAGE);

            }
            else
            {
                int response = JOptionPane.showConfirmDialog(null, "This will delete the selected items permanently. Do you want to proceed?", "Confirm",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

                if (response == JOptionPane.YES_OPTION) 
                {
                     deleteBills_jb_KeyPressed(evt);
                }
            }
        }
        
    }//GEN-LAST:event_deleteBills_jbKeyPressed

    private void selectAll_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_selectAll_jbKeyPressed
        // TODO add your handling code here:
        
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
        
            selectAll_jb_KeyPressed(evt);
        
        }
        
    }//GEN-LAST:event_selectAll_jbKeyPressed

    private void print_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_print_jbMouseClicked
        // TODO add your handling code here:
        
        print_jb_MouseClicked();
        
    }//GEN-LAST:event_print_jbMouseClicked

    private void print_jb_MouseClicked()
    {
        
        print_bill();
        
    }
    
    void print_bill()
    {
        
        try 
        {
            
            DefaultTableModel model = (DefaultTableModel)billreporttable_jt.getModel();
            SimpleDateFormat sdf1 = new SimpleDateFormat("dd-MM-yyyy",Locale.getDefault());
            //DateFormat dateFormat = new SimpleDateFormat("hh:mm a");
            SimpleDateFormat sdf2 = new SimpleDateFormat("hh:mm a",Locale.getDefault());
            
            String source = "DetailedSalesReport.jasper";
           
            InputStream is = getClass().getResourceAsStream(source);

            Map parameters = new HashMap();
            parameters.put("date", sdf1.format(new Date()));
            parameters.put("time", sdf2.format(new Date()));
            parameters.put("LOGO", getClass().getResourceAsStream("ch_logo.png"));
            
           // parameters.put("logo", getClass().getResourceAsStream("ideal_emblem_2.png"));
           
//            PrintRequestAttributeSet printRequestAttributes = new HashPrintRequestAttributeSet();
//            printRequestAttributes.add(new Copies(2));
           
            JasperPrint print = JasperFillManager.fillReport(is, parameters, new JRTableModelDataSource(model));
            
            JasperViewer.viewReport(print,false);
            
            //JasperPrintManager.printReport(print,false); // Print directly
            
            
        } catch (Exception ex) 
        {
            
            
            JOptionPane.showMessageDialog(null, ex);
            
        }
        
    }
    
    private void close_jb_MouseClicked()
    {
        
        this.dispose();
        
    }
    
    private void selectAll_jb_KeyPressed(java.awt.event.KeyEvent evt)
    {
        
         selectAll_jb_MouseClicked();
        
    }
    
    private void deleteBills_jb_KeyPressed(java.awt.event.KeyEvent evt)
    {

        DefaultTableModel dtm = (DefaultTableModel)billreporttable_jt.getModel();
        int[] selectedRows = billreporttable_jt.getSelectedRows();
        
        for(int i = 0 ; i < selectedRows.length ; i ++)
        {

            String id = dtm.getValueAt(selectedRows[i], 9).toString();
            deleteBills(id);
            JOptionPane.showMessageDialog(null, id);

        }

        if(deleteStatus == true)
        {

            JOptionPane.showMessageDialog(this,"Operation Successful.","Success",JOptionPane.INFORMATION_MESSAGE);
            getBillingDetails();

        }
        
    }
    
    private void deleteBills_jb_MouseClicked()
    {

        DefaultTableModel dtm = (DefaultTableModel)billreporttable_jt.getModel();
        int[] selectedRows = billreporttable_jt.getSelectedRows();
        
        for(int i = 0 ; i < selectedRows.length ; i ++)
        {

            String id = dtm.getValueAt(selectedRows[i], 9).toString();
            deleteBills(id);
           
        }

        if(deleteStatus == true)
        {

            JOptionPane.showMessageDialog(this,"Operation Successful.","Success",JOptionPane.INFORMATION_MESSAGE);
            getBillingDetails();

        }

        
    }
    
    private void deleteBills(String id)
    {
        
        boolean exception = false;
        boolean execute = true;
        
        Connection con = null;
        PreparedStatement prepstmt = null;
        
        try
        {
            
            con = DatabaseConnection.createConnection();
            
            if(id != null && !id.equals(""))
            {
       
                String sql="DELETE FROM billing WHERE id=? ";
                prepstmt = con.prepareStatement(sql);

                prepstmt.setString(1,id);

                prepstmt.executeUpdate();

                execute = true;
            }
            
        }
        catch(Exception e)
        {
            
            JOptionPane.showMessageDialog(null, "Billing_Detialed_Report : deleteBills: "+e);
            exception = true;
            
        }
        finally
        {
            
            try
            {
                
                if(con != null)
                {
                    
                    con.close();
                    
                }
               
                if(prepstmt != null)
                {
                    
                    prepstmt.close();
                    
                }
                
            }
            catch(Exception ex)
            {
                
                JOptionPane.showMessageDialog(null,ex);
                
            }
            
        }
        
        if(exception == false && execute == true)
        {
            
            deleteStatus = true;
        
        }
        
        
    }
    
    private void selectAll_jb_MouseClicked()
    {
        
        billreporttable_jt.selectAll();
        
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox all_jchkbx;
    public static javax.swing.JTable billreporttable_jt;
    private javax.swing.JButton close_jb;
    private javax.swing.JCheckBox date_jchkbx;
    private javax.swing.JButton deleteBills_jb;
    private com.toedter.calendar.JDateChooser fromdate_jdc;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton print_jb;
    public static javax.swing.JTextField saleratetotalamt_jtf;
    public static javax.swing.JComboBox searchby_jcb;
    private javax.swing.JButton selectAll_jb;
    private com.toedter.calendar.JDateChooser todate_jdc;
    private javax.swing.JTextField totalcount_jtf;
    private javax.swing.JButton writetoexcel_jb;
    // End of variables declaration//GEN-END:variables
}

