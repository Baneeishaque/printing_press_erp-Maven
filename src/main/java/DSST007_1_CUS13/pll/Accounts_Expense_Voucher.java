/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package DSST007_1_CUS13.pll;

import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author praveen
 */
public class Accounts_Expense_Voucher extends javax.swing.JInternalFrame {

    private static Accounts_Expense_Voucher instance;
    int initial_rowcnt;
    
    public Accounts_Expense_Voucher() {
        initComponents();
    }

    public static Accounts_Expense_Voucher getInstance()
    {
        
        if (instance == null)
            instance = new Accounts_Expense_Voucher();

        return instance;
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        voucher_jtf = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        date_jdc = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        expenseType_jcb = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        expenseItem_jcb = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        description_jtf = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        paid_to_jtf = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        amount_jtf = new javax.swing.JTextField();
        apply_jb = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        expensedetails_jt = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel3 = new javax.swing.JPanel();
        save_print_jb = new javax.swing.JButton();
        new_jb = new javax.swing.JButton();
        close_jb = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        totalcnt_jtf = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        totalamt_jtf = new javax.swing.JTextField();
        from_bank_jchkbx = new javax.swing.JCheckBox();
        from_cash_jchkbx = new javax.swing.JCheckBox();
        banklist_jcb = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255)));
        setClosable(true);
        setTitle("Transactions -> Expense Voucher");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/DSST007_1_CUS13/InstabizTrader Logo Final 35x35.png"))); // NOI18N
        addInternalFrameListener(new javax.swing.event.InternalFrameListener()
        {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt)
            {
                formInternalFrameOpened(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt)
            {
                formInternalFrameClosing(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt)
            {
                formInternalFrameClosed(evt);
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt)
            {
            }
        });

        jPanel1.setBackground(new java.awt.Color(242, 242, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel1.setText("Voucher No :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel1.add(jLabel1, gridBagConstraints);

        voucher_jtf.setEditable(false);
        voucher_jtf.setBackground(new java.awt.Color(255, 204, 51));
        voucher_jtf.setPreferredSize(new java.awt.Dimension(110, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(voucher_jtf, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel2.setText("Date :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel1.add(jLabel2, gridBagConstraints);

        date_jdc.setBackground(new java.awt.Color(242, 242, 255));
        date_jdc.setDateFormatString("d-MMM- yy");
        date_jdc.setPreferredSize(new java.awt.Dimension(140, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(date_jdc, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel3.setText("Expense Category :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel1.add(jLabel3, gridBagConstraints);

        expenseType_jcb.setPreferredSize(new java.awt.Dimension(200, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(expenseType_jcb, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel4.setText("Expense Item :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel1.add(jLabel4, gridBagConstraints);

        expenseItem_jcb.setPreferredSize(new java.awt.Dimension(200, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel1.add(expenseItem_jcb, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel5.setText("Description :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel5, gridBagConstraints);

        description_jtf.setPreferredSize(new java.awt.Dimension(300, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(description_jtf, gridBagConstraints);

        jLabel6.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel6.setText("To :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel6, gridBagConstraints);

        paid_to_jtf.setPreferredSize(new java.awt.Dimension(300, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(paid_to_jtf, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel7.setText("Amount :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel7, gridBagConstraints);

        amount_jtf.setPreferredSize(new java.awt.Dimension(110, 27));
        amount_jtf.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyTyped(java.awt.event.KeyEvent evt)
            {
                amount_jtfKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(amount_jtf, gridBagConstraints);

        apply_jb.setBackground(new java.awt.Color(185, 197, 31));
        apply_jb.setText("Apply");
        apply_jb.setPreferredSize(new java.awt.Dimension(90, 27));
        apply_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                apply_jbMouseClicked(evt);
            }
        });
        apply_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                apply_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel1.add(apply_jb, gridBagConstraints);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(673, 350));

        expensedetails_jt.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        expensedetails_jt.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "SNo", "ExpenseCategory", "ExpenseItem", "Description", "Amount"
            }
        )
        {
            boolean[] canEdit = new boolean []
            {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        expensedetails_jt.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        expensedetails_jt.setFillsViewportHeight(true);
        expensedetails_jt.setRowHeight(23);
        expensedetails_jt.setSelectionBackground(new java.awt.Color(86, 132, 191));
        expensedetails_jt.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                expensedetails_jtKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(expensedetails_jt);
        if (expensedetails_jt.getColumnModel().getColumnCount() > 0)
        {
            expensedetails_jt.getColumnModel().getColumn(0).setMinWidth(65);
            expensedetails_jt.getColumnModel().getColumn(0).setPreferredWidth(65);
            expensedetails_jt.getColumnModel().getColumn(1).setMinWidth(150);
            expensedetails_jt.getColumnModel().getColumn(1).setPreferredWidth(150);
            expensedetails_jt.getColumnModel().getColumn(2).setMinWidth(150);
            expensedetails_jt.getColumnModel().getColumn(2).setPreferredWidth(150);
            expensedetails_jt.getColumnModel().getColumn(3).setMinWidth(200);
            expensedetails_jt.getColumnModel().getColumn(3).setPreferredWidth(200);
            expensedetails_jt.getColumnModel().getColumn(4).setMinWidth(100);
            expensedetails_jt.getColumnModel().getColumn(4).setPreferredWidth(100);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 0);
        jPanel1.add(jScrollPane1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(jSeparator1, gridBagConstraints);

        jPanel3.setBackground(new java.awt.Color(242, 242, 255));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        save_print_jb.setBackground(new java.awt.Color(185, 197, 31));
        save_print_jb.setText("Save&Print");
        save_print_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        save_print_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                save_print_jbMouseClicked(evt);
            }
        });
        save_print_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                save_print_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel3.add(save_print_jb, gridBagConstraints);

        new_jb.setBackground(new java.awt.Color(185, 197, 31));
        new_jb.setText("New");
        new_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        new_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                new_jbMouseClicked(evt);
            }
        });
        new_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                new_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel3.add(new_jb, gridBagConstraints);

        close_jb.setBackground(new java.awt.Color(86, 132, 191));
        close_jb.setText("Close");
        close_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        close_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                close_jbMouseClicked(evt);
            }
        });
        close_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                close_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        jPanel3.add(close_jb, gridBagConstraints);

        jButton1.setBackground(new java.awt.Color(185, 197, 31));
        jButton1.setText("Clear All");
        jButton1.setPreferredSize(new java.awt.Dimension(100, 27));
        jButton1.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                jButton1KeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        jPanel3.add(jButton1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 15, 0);
        jPanel1.add(jPanel3, gridBagConstraints);

        jPanel4.setBackground(new java.awt.Color(242, 242, 255));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jLabel8.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel8.setText("Total Count :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 165, 0, 0);
        jPanel4.add(jLabel8, gridBagConstraints);

        totalcnt_jtf.setEditable(false);
        totalcnt_jtf.setBackground(new java.awt.Color(255, 204, 51));
        totalcnt_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        jPanel4.add(totalcnt_jtf, gridBagConstraints);

        jLabel9.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel9.setText("Total Amount :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel4.add(jLabel9, gridBagConstraints);

        totalamt_jtf.setEditable(false);
        totalamt_jtf.setBackground(new java.awt.Color(255, 204, 51));
        totalamt_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        jPanel4.add(totalamt_jtf, gridBagConstraints);

        from_bank_jchkbx.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        from_bank_jchkbx.setText("From Bank :");
        from_bank_jchkbx.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                from_bank_jchkbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel4.add(from_bank_jchkbx, gridBagConstraints);

        from_cash_jchkbx.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        from_cash_jchkbx.setText("From Cash");
        from_cash_jchkbx.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                from_cash_jchkbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel4.add(from_cash_jchkbx, gridBagConstraints);

        banklist_jcb.setEditable(true);
        banklist_jcb.setPreferredSize(new java.awt.Dimension(250, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel4.add(banklist_jcb, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        jPanel1.add(jPanel4, gridBagConstraints);

        jPanel2.setBackground(new java.awt.Color(102, 102, 102));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        setBounds(0, 0, 679, 594);
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        // TODO add your handling code here:
        
        instance = null;
        
    }//GEN-LAST:event_formInternalFrameClosed

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        // TODO add your handling code here:
        
        instance = null;
        
    }//GEN-LAST:event_formInternalFrameClosing

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:
        
        Dimension desktopSize = NewMDIApplication.desktopbg_jlbl.getSize();
        Dimension jInternalFrameSize = this.getSize();
        this.setLocation((desktopSize.width - jInternalFrameSize.width)/2,(desktopSize.height- jInternalFrameSize.height)/2);
        
        //---------------------------------------------
        
        get_voucherno();
        date_jdc.setDate(new Date());
        
//        AutoCompleteDecorator.decorate(expenseType_jcb);
        load_expenseType_jcb();
        
//        AutoCompleteDecorator.decorate(expenseItem_jcb);
        load_expenseItem_jcb();
        
        expensedetails_jt.setFocusTraversalKeysEnabled(false);
        
        banklist_jcb.setEnabled(false);
        from_cash_jchkbx.setSelected(true);
        
        load_banklist_jcb();
        AutoCompleteDecorator.decorate(banklist_jcb);
        
    }//GEN-LAST:event_formInternalFrameOpened

    void load_banklist_jcb()
    {
        
        Connection con = DatabaseConnection.createConnection();
        PreparedStatement prepstmt = null;
        banklist_jcb.removeAllItems();

        try {
            
            String sql = "SELECT DISTINCT bank_name FROM banks";
            prepstmt = con.prepareStatement(sql);
            ResultSet rs = prepstmt.executeQuery();
            while (rs.next()) {

                String banknames = rs.getString("bank_name");
               
                banklist_jcb.addItem(banknames);

            }
            
            banklist_jcb.addItem("");
            banklist_jcb.setSelectedItem("");
           
        } catch (Exception e) {

            JOptionPane.showMessageDialog(null, e);

        } finally {

            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex);
                }
            }
            
            if (prepstmt != null) {
                try {
                    prepstmt.close();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex);
                }
            }
            
            
        }       
        
    }
    
    private void load_expenseType_jcb()
    {
        
        Connection con = DatabaseConnection.createConnection();
        
         
        try
        {
            boolean stat = false;
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT DISTINCT expense_type FROM expense_types ");
            
            while(rs.next())
            {

                String expense_type = rs.getString("expense_type");
                expenseType_jcb.addItem(expense_type);
                
            }    
      
            expenseType_jcb.addItem("");
            expenseType_jcb.setSelectedItem("");
            
        }
        catch(Exception e)
        {
             
            JOptionPane.showMessageDialog(null, e);
             
        }
        finally
                {
                    
                    if(con!=null)
                    {
                        try {
                            con.close();
                        } catch (SQLException ex) {
                            JOptionPane.showMessageDialog(null, ex);
                        }
                        
                    }
                    
                }
        
    }
    
    private void load_expenseItem_jcb()
    {
        
        Connection con = DatabaseConnection.createConnection();
        
         
        try
        {
            boolean stat = false;
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT DISTINCT expense_item FROM expense_items ");
            
            while(rs.next())
            {

                String expense_item = rs.getString("expense_item");
                expenseItem_jcb.addItem(expense_item);
                
            }    
      
            expenseItem_jcb.addItem("");
            expenseItem_jcb.setSelectedItem("");
            
        }
        catch(Exception e)
        {
             
            JOptionPane.showMessageDialog(null, e);
             
        }
        finally
                {
                    
                    if(con!=null)
                    {
                        try {
                            con.close();
                        } catch (SQLException ex) {
                            JOptionPane.showMessageDialog(null, ex);
                        }
                        
                    }
                    
                }
        
    }
    
    private void get_voucherno()
    {
        
        Connection con = DatabaseConnection.createConnection();
        
         
        try
        {
            boolean stat = false;
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT voucher_no FROM expense_voucher ");
            
            while(rs.next())
            {

                stat = true;

                int voucher_no = Integer.parseInt(rs.getString("voucher_no"));
                int newvoucher_no = voucher_no + 1;

                voucher_jtf.setText(Integer.toString(newvoucher_no));

            }    
          
            if(stat==false)
            {
                
                voucher_jtf.setText("1000");
                
            }
          
             
        }
        catch(Exception e)
        {
             
            JOptionPane.showMessageDialog(null, e);
             
        }
        finally
        {

            if(con!=null)
            {
                try {
                    con.close();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex);
                }

            }

        }
        
    }
    
    private void amount_jtfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_amount_jtfKeyTyped
        // TODO add your handling code here:
        
        String text = amount_jtf.getText();
        int lastindex = text.lastIndexOf(".");
        
        char c = evt.getKeyChar();

        if(!(Character.isDigit(c)||(c==KeyEvent.VK_BACK_SPACE)||c==KeyEvent.VK_DELETE||evt.getKeyChar() == '.'))
        {
            //  evt.getKeyChar() == '.' does accept point when jtextfield accepts decimal number
            evt.consume();
            getToolkit().beep();
        
        }
        else if(lastindex >= 0 && !Character.isDigit(c))
        {
            
             evt.consume();
            
        }
                
    }//GEN-LAST:event_amount_jtfKeyTyped

    private void apply_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_apply_jbMouseClicked
        // TODO add your handling code here:
        
        if(validation_on_apply() == true)
        {

            apply();
            new_jb.requestFocusInWindow();

        }
        
        
    }//GEN-LAST:event_apply_jbMouseClicked

    private void apply_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_apply_jbKeyPressed
        // TODO add your handling code here:
        
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            
            if(validation_on_apply() == true)
            {

                apply();
                new_jb.requestFocusInWindow();

            }
            
        }
       
        
    }//GEN-LAST:event_apply_jbKeyPressed

    private void expensedetails_jtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_expensedetails_jtKeyPressed
        // TODO add your handling code here:

        if(evt.getKeyCode() == KeyEvent.VK_TAB)
        {
            
            save_print_jb.requestFocusInWindow();
            
        }
        
    }//GEN-LAST:event_expensedetails_jtKeyPressed

    private void save_print_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_save_print_jbMouseClicked
        // TODO add your handling code here:
        
        if(validation_on_save() == true)
        {
            
            savedata();
            
        }
        
    }//GEN-LAST:event_save_print_jbMouseClicked

    private void new_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_new_jbMouseClicked
        // TODO add your handling code here:
        
        clearfield();
        ((JTextField)expenseType_jcb.getEditor().getEditorComponent()).requestFocusInWindow();
        
    }//GEN-LAST:event_new_jbMouseClicked

    private void new_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_new_jbKeyPressed
        // TODO add your handling code here:
        
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            
            clearfield();
            //((JTextField)expenseType_jcb.getEditor().getEditorComponent()).requestFocusInWindow();
            expenseType_jcb.requestFocusInWindow();
            
        }
        
    }//GEN-LAST:event_new_jbKeyPressed

    private void save_print_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_save_print_jbKeyPressed
        // TODO add your handling code here:
        
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            
            if(validation_on_save() == true)
            {

                savedata();

            }
            
        }
        
    }//GEN-LAST:event_save_print_jbKeyPressed

    private void close_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_close_jbMouseClicked
        // TODO add your handling code here:
        
        this.dispose();
        
    }//GEN-LAST:event_close_jbMouseClicked

    private void close_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_close_jbKeyPressed
        // TODO add your handling code here:
        
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            
            this.dispose();
            
        }
        
    }//GEN-LAST:event_close_jbKeyPressed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        
        clearallfields();
        
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton1KeyPressed
        // TODO add your handling code here:
        
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            
            clearallfields();
            
        }
        
    }//GEN-LAST:event_jButton1KeyPressed

    private void from_bank_jchkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_from_bank_jchkbxActionPerformed
        // TODO add your handling code here:
        
        if(from_bank_jchkbx.isSelected() == true)
        {
            
            banklist_jcb.setEnabled(true);
            from_cash_jchkbx.setSelected(false);
            
        }
        if(from_bank_jchkbx.isSelected() == false)
        {
            
            banklist_jcb.setEnabled(false);
            
        }
        
        
    }//GEN-LAST:event_from_bank_jchkbxActionPerformed

    private void from_cash_jchkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_from_cash_jchkbxActionPerformed
        // TODO add your handling code here:
        
        if(from_cash_jchkbx.isSelected() == true)
        {
            
            from_bank_jchkbx.setSelected(false);
            banklist_jcb.setEnabled(false);
            
        }
        
    }//GEN-LAST:event_from_cash_jchkbxActionPerformed

    boolean validation_on_apply()
    {
        
        boolean valid = true;
        
        if(expenseType_jcb.getSelectedItem().toString().equals("") || expenseType_jcb.getSelectedItem() == null)
        {
            
            JOptionPane.showMessageDialog(null, "Specify an Expense Category.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        else if(expenseItem_jcb.getSelectedItem().toString().equals("") || expenseItem_jcb.getSelectedItem() == null)
        {
            
            JOptionPane.showMessageDialog(null, "Specify an Expense Item.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
       
        else if(amount_jtf.getText().equals(""))
        {
            
            JOptionPane.showMessageDialog(null, "Specify the Amount.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        
        return valid;
        
    }
    
    void apply()
    {
        
        try
        {
         
            DefaultTableModel dtm = (DefaultTableModel)expensedetails_jt.getModel();
            
            String exp_category = expenseType_jcb.getSelectedItem().toString();
            String exp_item = expenseItem_jcb.getSelectedItem().toString();
            String description = description_jtf.getText();
            String amount = amount_jtf.getText();
            
            String[] arr = new String[]{Integer.toString(expensedetails_jt.getRowCount()+1),exp_category,exp_item,description,amount};
            dtm.addRow(arr);
            
            gettotals();
            
            clearfield();
            
        }
        catch(Exception e)
        {
            
            JOptionPane.showMessageDialog(null, e);
            
        }
        
    }
    
    private void gettotals()
    {
        
        try
        {
            
            BigDecimal big_totalamt = new BigDecimal("0").setScale(2, RoundingMode.HALF_UP);
            BigDecimal big_temp = new BigDecimal("0").setScale(2, RoundingMode.HALF_UP);
            
            for(int i = 0 ; i < expensedetails_jt.getRowCount() ; i++)
            {
                
                big_totalamt = (new BigDecimal(expensedetails_jt.getValueAt(i, 4).toString())).add(big_temp);
                big_temp = big_totalamt;
                
            }
            
            totalamt_jtf.setText(big_totalamt.toString());
            totalcnt_jtf.setText(Integer.toString(expensedetails_jt.getRowCount()));
            
            
        }
        catch(Exception e)
        {
            
            JOptionPane.showMessageDialog(null, e);
            
        }
        
    }
    
    private void clearfield(){

        expenseType_jcb.setSelectedItem("");
        expenseItem_jcb.setSelectedItem("");
        description_jtf.setText("");
        amount_jtf.setText("");
        
    }
    
    private void clearallfields()
    {
        
        get_voucherno();
        expenseType_jcb.setSelectedItem("");
        expenseItem_jcb.setSelectedItem("");
        description_jtf.setText("");
        amount_jtf.setText("");
        ((DefaultTableModel)expensedetails_jt.getModel()).setRowCount(0);
        
    }
    
    private boolean validation_on_save()
    {
        boolean flag = true;
        
        if(voucher_jtf.getText().equals(""))
        {
            
            JOptionPane.showMessageDialog(this,"Specify a Voucher No.","Error",JOptionPane.ERROR_MESSAGE); 
            flag = false;
            
        }
        else if(date_jdc.getDate() == null)
        {
            JOptionPane.showMessageDialog(this,"Select a Date.","Error",JOptionPane.ERROR_MESSAGE); 
            flag = false;
        }
        else if(expensedetails_jt.getRowCount() == 0)
        {
            
            JOptionPane.showMessageDialog(this,"No Data Found.","Error",JOptionPane.ERROR_MESSAGE); 
            flag= false;
            
        }
        else if(from_bank_jchkbx.isSelected() == false && from_cash_jchkbx.isSelected() == false)
        {
            
            JOptionPane.showMessageDialog(this, "Select Cash or Bank.","Error",JOptionPane.ERROR_MESSAGE);
            flag = false;
            
        }
        else if(from_bank_jchkbx.isSelected() == true && (banklist_jcb.getSelectedItem() == null || banklist_jcb.getSelectedItem().toString().equals("") || banklist_jcb.getSelectedIndex() == -1))
        {
            
            JOptionPane.showMessageDialog(this, "Select a Valid Bank Name.","Error",JOptionPane.ERROR_MESSAGE);
            flag = false;
            
        }

        return flag;
        
    }
    
    private void savedata()
    {
        
        boolean error = false;
        boolean status = false;
        boolean valid = false;
        
        Connection con = DatabaseConnection.createConnection();
        PreparedStatement prepstate_1 = null, prepstate_2 = null, prepstate_3 = null, prepstate_4 = null;
        PreparedStatement prepstate_5 = null, prepstate_6 = null;
        ResultSet rs_1 = null, rs_2 = null;
        
        try 
        {
             
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd",Locale.getDefault());
            DefaultTableModel dtm = (DefaultTableModel)expensedetails_jt.getModel();
            
            String from_cash = null;
            String from_bank = null;
            BigDecimal tot_amount = new BigDecimal(totalamt_jtf.getText());
            
            if(from_bank_jchkbx.isSelected() == true)
            {
                
                Boolean empty = true;
                
                from_bank = banklist_jcb.getSelectedItem().toString();
                from_cash = "NA";
                
                String sql_1 = "SELECT amount,id FROM cash_at_bank_acc WHERE bank_name = ?";
                prepstate_1 = con.prepareStatement(sql_1);
                prepstate_1.setString(1, from_bank);
                rs_1 = prepstate_1.executeQuery();
                
                while(rs_1.next())
                {
                    
                    empty = false;
                    
                    String id = rs_1.getString("id");
                    
                    BigDecimal bank_amount = new BigDecimal(rs_1.getString("amount"));
                    
                    if(tot_amount.compareTo(bank_amount) > 0)
                    {
                        
                        JOptionPane.showMessageDialog(this,"Cash at bank is less than the amount specified.","Error",JOptionPane.ERROR_MESSAGE);
                        
                    }
                    else   
                    {
                    
                        BigDecimal new_amount = bank_amount.subtract(tot_amount);
                      
                        String sql_2 = "UPDATE cash_at_bank_acc SET amount = ? WHERE id = ?";
                        prepstate_2 = con.prepareStatement(sql_2);
                        prepstate_2.setString(1, new_amount.toString());
                        prepstate_2.setString(2, id);
                        prepstate_2.executeUpdate();
                        
                        valid = true;
                        
                    }
                    

                    
                }
                
                if(empty == true)
                {
                    
                    JOptionPane.showMessageDialog(this,"Cash at bank is less than the amount specified.","Error",JOptionPane.ERROR_MESSAGE);
                    
                }
                
                
            }
            
            else if(from_cash_jchkbx.isSelected() == true)
            {
                
                Boolean empty = true;
                
                from_bank = "NA";
                from_cash = "yes";
                
                String sql_4 = "SELECT amount,id FROM cash_at_hand_acc";
                prepstate_4 = con.prepareStatement(sql_4);
                rs_2 = prepstate_4.executeQuery();
                while(rs_2.next())
                {
                    
                    empty = false;
                    
                    String id = rs_2.getString("id");
                    
                    BigDecimal cash_amount = new BigDecimal(rs_2.getString("amount"));
                    
                    if(tot_amount.compareTo(cash_amount) > 0)
                    {
                        
                        JOptionPane.showMessageDialog(this,"Cash at hand is less than the amount specified.","Error",JOptionPane.ERROR_MESSAGE);
                        
                    }
                    else
                    {
                        
                        BigDecimal new_amount = cash_amount.subtract(tot_amount);

                        String sql_5 = "UPDATE cash_at_hand_acc SET amount = ? WHERE id = ?";
                        prepstate_5 = con.prepareStatement(sql_5);
                        prepstate_5.setString(1, new_amount.toString());
                        prepstate_5.setString(2, id);
                        prepstate_5.executeUpdate();
                        
                        valid = true;
                        
                    }
                    
                }
                
                if(empty == true)
                {
                    
                    JOptionPane.showMessageDialog(this,"Cash at hand is less than the amount specified.","Error",JOptionPane.ERROR_MESSAGE);
                    
                }
                
            }
            
            if(valid == true)
            {
            
                for(int i = 0 ; i < expensedetails_jt.getRowCount() ; i++)
                {

                    String sql="INSERT into expense_voucher(voucher_no,entrydate,expense_type,expense_item,description,towards,amount,from_bank,from_cash) values(?,?,?,?,?,?,?,?,?)";
                    PreparedStatement prepstmt = con.prepareStatement(sql);
                    prepstmt.setString(1, voucher_jtf.getText());
                    prepstmt.setString(2, sdf.format(date_jdc.getDate()));
                    prepstmt.setString(3, dtm.getValueAt(i, 1).toString());
                    prepstmt.setString(4, dtm.getValueAt(i, 2).toString());
                    prepstmt.setString(5, dtm.getValueAt(i, 3).toString());
                    prepstmt.setString(6, paid_to_jtf.getText());
                    prepstmt.setString(7, dtm.getValueAt(i, 4).toString());
                    prepstmt.setString(8, from_bank);
                    prepstmt.setString(9, from_cash);

                    prepstmt.executeUpdate();

                }
                
                status = true;     
           
            }
                
        } 
        catch (Exception ex) 
        {
                
            JOptionPane.showMessageDialog( null, ex);
            error = true;    
                
        }
        finally
        {

            if(con!=null)
            {
                try {
                    con.close();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex);
                }

            }

        }
        if(error==false && status==true)
        {

            JOptionPane.showMessageDialog(this,"Operation Successful.","Success",JOptionPane.INFORMATION_MESSAGE);
            //printvoucher();
            clear_fields();
         
        }
        
    }
    
    private void clear_fields()
    {
        
        get_voucherno();
//        expenseType_jcb.setSelectedItem("");
//        expenseItem_jcb.setSelectedItem("");
        description_jtf.setText("");
        amount_jtf.setText("");
        ((DefaultTableModel)expensedetails_jt.getModel()).setRowCount(0);
        
    }
    
//    void printvoucher()
//    {
//        
//        try 
//        {
//            
//            addMoreRows();
//            
//            DefaultTableModel model = (DefaultTableModel)expensedetails_jt.getModel();
//            SimpleDateFormat sdf1 = new SimpleDateFormat("dd-MMM-yyyy",Locale.getDefault());
//            
//            String source = "payment_voucher.jasper";
//           
//            InputStream is = getClass().getResourceAsStream(source);
//
//            Map parameters = new HashMap();
//            parameters.put("logo", getClass().getResourceAsStream("ideal_emblem_2.png"));
//            parameters.put("voucher_no", voucher_jtf.getText());
//            parameters.put("voucher_date", sdf1.format(date_jdc.getDate()));
//            parameters.put("paid_to", paid_to_jtf.getText());
//            String big_amount = new BigDecimal(totalamt_jtf.getText()).setScale(2, RoundingMode.HALF_UP).toString();
//            parameters.put("amount", big_amount);
//           
//            // Convert amount to words:
//            int decimalindex = big_amount.indexOf(".");
//            
//            String amtbeforedecimal = big_amount.substring(0, decimalindex);
//            String amtafterdecimal = big_amount.substring(decimalindex+1);
//
//            int amtbeforedecimal_int = Integer.parseInt(amtbeforedecimal);
//            int amtafterdecimal_int = Integer.parseInt(amtafterdecimal);
//
//            NumberToWords ntw1 = new NumberToWords();
//
//            String amtbeforedecimal_words = ntw1.convert(amtbeforedecimal_int);
//            String amtafterdecimal_words = ntw1.convert(amtafterdecimal_int);
//
//            String amountinwords = "("+amtbeforedecimal_words+" Rupees "+amtafterdecimal_words+" Paise"+" Only)";
//            //End
//
//            parameters.put("amount_inwords", amountinwords);
//            parameters.put("for", description_jtf.getText());
//            
//            JasperPrint print = JasperFillManager.fillReport(is, parameters, new JRTableModelDataSource(model));
//            //JasperPrint print = JasperFillManager.fillReport(is, parameters, new JREmptyDataSource());
//            
//            JasperViewer.viewReport(print,false);
//            
//            removeAdditionalRows();
//            
//            
//        } catch (Exception ex) 
//        {
//            
//            
//            JOptionPane.showMessageDialog(null, ex);
//            
//        }
//        
//    }
    
    private void addMoreRows()
    {
        String[] morerowsarr = null;
        initial_rowcnt = expensedetails_jt.getRowCount();
        int rows_needed = 20;
        if(initial_rowcnt < rows_needed)
        {
            int addmorerows = rows_needed - initial_rowcnt;
            for(int i = 0 ; i < addmorerows ; i++)
            {
                
                morerowsarr = new String[]{"","","","","","","",""};
                ((DefaultTableModel)expensedetails_jt.getModel()).addRow(morerowsarr);
                
            }
        }
        
    }
    
    private void removeAdditionalRows()
    {
        int current_rowcnt = expensedetails_jt.getRowCount();
        int rowstodelete = current_rowcnt-initial_rowcnt;
        for(int i = 0 ; i < rowstodelete ; i++)
        {
            //System.out.println(current_rowcnt = current_rowcnt - 1);
            ((DefaultTableModel)expensedetails_jt.getModel()).removeRow(current_rowcnt = current_rowcnt - 1); 
        }  
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField amount_jtf;
    private javax.swing.JButton apply_jb;
    private javax.swing.JComboBox banklist_jcb;
    private javax.swing.JButton close_jb;
    private com.toedter.calendar.JDateChooser date_jdc;
    private javax.swing.JTextField description_jtf;
    private javax.swing.JComboBox expenseItem_jcb;
    private javax.swing.JComboBox expenseType_jcb;
    private javax.swing.JTable expensedetails_jt;
    private javax.swing.JCheckBox from_bank_jchkbx;
    private javax.swing.JCheckBox from_cash_jchkbx;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton new_jb;
    private javax.swing.JTextField paid_to_jtf;
    private javax.swing.JButton save_print_jb;
    private javax.swing.JTextField totalamt_jtf;
    private javax.swing.JTextField totalcnt_jtf;
    private javax.swing.JTextField voucher_jtf;
    // End of variables declaration//GEN-END:variables
}
