package DSST007_1_CUS13.pll;

import DSST007_1_CUS13.bll.Invoice;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;
import net.sf.jasperreports.view.JasperViewer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author praveen
 */
public class InvoiceAddItems_Edit extends javax.swing.JInternalFrame {

    private static InvoiceAddItems_Edit MyInstance;
    
    String invoiceNo;
    String invoiceDate;
    String purchaseOrderNo;
    String purchaseOrderDate;
    String modeOfTransport;
    String dateOfSupply;
    String timeOfSupply;
    String itemVendorCode;
    String vehicleNo;
    String placeOfSupply;
    String cusName;
    String cusAddressline1;
    String cusAddressline2;
    String cusState;
    String cusStateCode;
    String cusPAN;
    String cusGSTIN;
    String consName;
    String consAddressline1;
    String consAddressline2;
    String consState;
    String consStateCode;
    String consPAN;
    String consGSTIN;
    String bankName;
    String accNo;
    String bank_branch;
    String iFSC;
    String eWayBillNo;
    String electronicRefNo;
    
    JasperViewer jv;
    int initial_rowcnt = 0;
    LSL_itemDetails_jt lSL_itemDetails_jt = new LSL_itemDetails_jt();
    
    public InvoiceAddItems_Edit() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        rate_jtf = new javax.swing.JTextField();
        selectItem_jcb = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        unit_jcb = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        quantity_jtf = new javax.swing.JTextField();
        amount_jtf = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        hsn_sac_jtf = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        itemDetails_jt = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        packingForwarding_jtf = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        anyOtherCharges_jtf = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        discount_jtf = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        grossTotal_jtf = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        cgst_jtf = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        sgst_jtf = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        netTotal_jtf = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        update_jb = new javax.swing.JButton();
        clear_jb = new javax.swing.JButton();
        close_jb = new javax.swing.JButton();
        printOnly_jb = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255)));
        setClosable(true);
        setTitle("View/Edit > Invoice Items");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/DSST007_1_CUS13/InstabizTrader Logo Final 35x35.png"))); // NOI18N
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jPanel1.setBackground(new java.awt.Color(242, 242, 255));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel2.setBackground(new java.awt.Color(242, 242, 255));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel2.setText("Quantity :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(jLabel2, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel3.setText("Unit :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel2.add(jLabel3, gridBagConstraints);

        rate_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        rate_jtf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                rate_jtfKeyTyped(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                rate_jtfKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(rate_jtf, gridBagConstraints);

        selectItem_jcb.setEditable(true);
        selectItem_jcb.setPreferredSize(new java.awt.Dimension(250, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(selectItem_jcb, gridBagConstraints);

        jLabel4.setText("Rate :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel2.add(jLabel4, gridBagConstraints);

        unit_jcb.setEditable(true);
        unit_jcb.setPreferredSize(new java.awt.Dimension(117, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(unit_jcb, gridBagConstraints);

        jLabel5.setText("Amount :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel2.add(jLabel5, gridBagConstraints);

        quantity_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        quantity_jtf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                quantity_jtfKeyTyped(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                quantity_jtfKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(quantity_jtf, gridBagConstraints);

        amount_jtf.setBackground(new java.awt.Color(255, 204, 51));
        amount_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(amount_jtf, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel1.setText("Commodity/Item :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(jLabel1, gridBagConstraints);

        jLabel6.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel6.setText("HSN/SAC :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel2.add(jLabel6, gridBagConstraints);

        hsn_sac_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(hsn_sac_jtf, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 3, 5);
        jPanel1.add(jPanel2, gridBagConstraints);

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setPreferredSize(new java.awt.Dimension(783, 270));

        itemDetails_jt.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SNo", "Commodity/Item", "HSN/SAC", "Quantity", "Rate", "Unit", "Amount", "id"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        itemDetails_jt.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        itemDetails_jt.setFillsViewportHeight(true);
        itemDetails_jt.setRowHeight(23);
        itemDetails_jt.setSelectionBackground(new java.awt.Color(86, 132, 191));
        itemDetails_jt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                itemDetails_jtFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                itemDetails_jtFocusLost(evt);
            }
        });
        jScrollPane1.setViewportView(itemDetails_jt);
        if (itemDetails_jt.getColumnModel().getColumnCount() > 0) {
            itemDetails_jt.getColumnModel().getColumn(0).setMinWidth(60);
            itemDetails_jt.getColumnModel().getColumn(0).setPreferredWidth(60);
            itemDetails_jt.getColumnModel().getColumn(1).setMinWidth(200);
            itemDetails_jt.getColumnModel().getColumn(1).setPreferredWidth(200);
            itemDetails_jt.getColumnModel().getColumn(2).setMinWidth(100);
            itemDetails_jt.getColumnModel().getColumn(2).setPreferredWidth(100);
            itemDetails_jt.getColumnModel().getColumn(3).setMinWidth(100);
            itemDetails_jt.getColumnModel().getColumn(3).setPreferredWidth(100);
            itemDetails_jt.getColumnModel().getColumn(4).setMinWidth(100);
            itemDetails_jt.getColumnModel().getColumn(4).setPreferredWidth(100);
            itemDetails_jt.getColumnModel().getColumn(5).setMinWidth(100);
            itemDetails_jt.getColumnModel().getColumn(5).setPreferredWidth(100);
            itemDetails_jt.getColumnModel().getColumn(6).setMinWidth(100);
            itemDetails_jt.getColumnModel().getColumn(6).setPreferredWidth(100);
            itemDetails_jt.getColumnModel().getColumn(7).setMinWidth(0);
            itemDetails_jt.getColumnModel().getColumn(7).setPreferredWidth(0);
            itemDetails_jt.getColumnModel().getColumn(7).setMaxWidth(0);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(jScrollPane1, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel7.setText("Packing and Forwarding Charges :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel7, gridBagConstraints);

        packingForwarding_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        packingForwarding_jtf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                packingForwarding_jtfKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(packingForwarding_jtf, gridBagConstraints);

        jLabel8.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel8.setText("Any Other Charges :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel8, gridBagConstraints);

        anyOtherCharges_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        anyOtherCharges_jtf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                anyOtherCharges_jtfKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(anyOtherCharges_jtf, gridBagConstraints);

        jLabel9.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel9.setText("Discount :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel9, gridBagConstraints);

        discount_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        discount_jtf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                discount_jtfKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(discount_jtf, gridBagConstraints);

        jPanel3.setBackground(new java.awt.Color(242, 242, 255));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabel10.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel10.setText("Total Amount :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel3.add(jLabel10, gridBagConstraints);

        grossTotal_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel3.add(grossTotal_jtf, gridBagConstraints);

        jLabel11.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel11.setText("CGST :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel3.add(jLabel11, gridBagConstraints);

        cgst_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel3.add(cgst_jtf, gridBagConstraints);

        jLabel12.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel12.setText("SGST :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel3.add(jLabel12, gridBagConstraints);

        sgst_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel3.add(sgst_jtf, gridBagConstraints);

        jLabel14.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jLabel14.setText("Total Invoice Value (Including Tax) :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel3.add(jLabel14, gridBagConstraints);

        netTotal_jtf.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        netTotal_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel3.add(netTotal_jtf, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridheight = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        jPanel1.add(jPanel3, gridBagConstraints);

        jPanel4.setBackground(new java.awt.Color(242, 242, 255));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        update_jb.setBackground(new java.awt.Color(185, 197, 31));
        update_jb.setText("Update");
        update_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        update_jb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                update_jbMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel4.add(update_jb, gridBagConstraints);

        clear_jb.setBackground(new java.awt.Color(86, 132, 191));
        clear_jb.setText("Clear");
        clear_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        jPanel4.add(clear_jb, gridBagConstraints);

        close_jb.setBackground(new java.awt.Color(86, 132, 191));
        close_jb.setText("Close");
        close_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        close_jb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                close_jbActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        jPanel4.add(close_jb, gridBagConstraints);

        printOnly_jb.setBackground(new java.awt.Color(86, 132, 191));
        printOnly_jb.setText("Print");
        printOnly_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        printOnly_jb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                printOnly_jbMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        jPanel4.add(printOnly_jb, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        jPanel1.add(jPanel4, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(jSeparator2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
        jPanel1.add(jSeparator3, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        setBounds(0, 0, 785, 522);
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:
        formWindow_Opened();
    }//GEN-LAST:event_formInternalFrameOpened

    private void formWindow_Opened()
    {

        Dimension desktopSize = NewMDIApplication.desktopbg_jlbl.getSize();
        Dimension jInternalFrameSize = this.getSize();
        this.setLocation((desktopSize.width - jInternalFrameSize.width)/2,(desktopSize.height- jInternalFrameSize.height)/2);
        
        load_selectItem_jcb();
        SearchableCombobox searchableCombobox_1 = new SearchableCombobox(selectItem_jcb);
        ((JTextField)selectItem_jcb.getEditor().getEditorComponent()).addKeyListener(searchableCombobox_1);
        
        itemDetails_jt.setFocusTraversalKeysEnabled(false);
        
        loadItemsDetail();
       
    }
    
    public static InvoiceAddItems_Edit getInstance() // Method
    {
        if (MyInstance == null)
	{
            MyInstance = new InvoiceAddItems_Edit();
	}
        return MyInstance;
    }

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        // TODO add your handling code here:

        MyInstance = null;
        InvoiceEntry_Edit.getInstance().setVisible(true);

    }//GEN-LAST:event_formInternalFrameClosed

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        // TODO add your handling code here:
        
        MyInstance = null;
        InvoiceEntry_Edit.getInstance().setVisible(true);
        
    }//GEN-LAST:event_formInternalFrameClosing

    private void rate_jtfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rate_jtfKeyTyped
        // TODO add your handling code here:

        rate_jtf_KeyTyped(evt);

    }//GEN-LAST:event_rate_jtfKeyTyped

    private void rate_jtf_KeyTyped(java.awt.event.KeyEvent evt)
    {
        
        String rate = rate_jtf.getText();
        int lastindex = rate.lastIndexOf(".");
        
       //System.out.println(lastindex);
       
        char c = evt.getKeyChar();

        if(!(Character.isDigit(c)||(c==KeyEvent.VK_BACK_SPACE)||c==KeyEvent.VK_DELETE||evt.getKeyChar() == '.'))
        {
            //  evt.getKeyChar() == '.' does accept point when jtextfield accepts decimal number
            evt.consume();
            getToolkit().beep();
        
        }
        else if(lastindex >= 0 && !Character.isDigit(c))
        {
            
             evt.consume();
            
        }
        
    }
    
    private void rate_jtfKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rate_jtfKeyReleased
        // TODO add your handling code here:

        rate_jtf_KeyReleased(evt);

    }//GEN-LAST:event_rate_jtfKeyReleased

    private void rate_jtf_KeyReleased(java.awt.event.KeyEvent evt) {                                     
       
        if(!rate_jtf.getText().equals("") && !quantity_jtf.getText().equals(""))
        {

            BigDecimal rate_bd = new BigDecimal(rate_jtf.getText());
            BigDecimal qnty_db = new BigDecimal(quantity_jtf.getText());
            BigDecimal amounty_db = (rate_bd.multiply(qnty_db)).setScale(2, RoundingMode.HALF_UP);

            amount_jtf.setText(amounty_db.toString());

        }
        else if(!rate_jtf.getText().equals("") || !quantity_jtf.getText().equals(""))
        {

            amount_jtf.setText("");

        }

    }
    
    private void quantity_jtfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_quantity_jtfKeyTyped
        // TODO add your handling code here:

        quantity_jtf_KeyTyped(evt);

    }//GEN-LAST:event_quantity_jtfKeyTyped

    private void quantity_jtf_KeyTyped(java.awt.event.KeyEvent evt)
    {
        
        String qnty = quantity_jtf.getText();
        int lastindex = qnty.lastIndexOf(".");
        
       //System.out.println(lastindex);
       
        char c = evt.getKeyChar();

        if(!(Character.isDigit(c)||(c==KeyEvent.VK_BACK_SPACE)||c==KeyEvent.VK_DELETE||evt.getKeyChar() == '.'))
        {
            //  evt.getKeyChar() == '.' does accept point when jtextfield accepts decimal number
            evt.consume();
            getToolkit().beep();
        
        }
        else if(lastindex >= 0 && !Character.isDigit(c))
        {
            
             evt.consume();
            
        }
        
    }
    
    private void quantity_jtfKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_quantity_jtfKeyReleased
        // TODO add your handling code here:

        quantity_jtf_KeyReleased(evt);

    }//GEN-LAST:event_quantity_jtfKeyReleased

    private void quantity_jtf_KeyReleased(java.awt.event.KeyEvent evt)
    {
  
        if(!rate_jtf.getText().equals("") && !quantity_jtf.getText().equals(""))
        {

            BigDecimal rate_bd = new BigDecimal(rate_jtf.getText());
            BigDecimal qnty_db = new BigDecimal(quantity_jtf.getText());
            BigDecimal amounty_db = (rate_bd.multiply(qnty_db)).setScale(2, RoundingMode.HALF_UP);

            amount_jtf.setText(amounty_db.toString());

        }
        else if(!rate_jtf.getText().equals("") || !quantity_jtf.getText().equals(""))
        {

            amount_jtf.setText("");

        }
        
    }
    
    
    private void applyValues_jb_MouseClicked()
    {
        
        applyValues();
        
    }
    
    private void applyValues()
    {
        
        if(validationBeforeApply() == true)
        {
            
            DefaultTableModel dtm = (DefaultTableModel)itemDetails_jt.getModel();

            String item = ((JTextField)selectItem_jcb.getEditor().getEditorComponent()).getText();
            String rate = rate_jtf.getText();
            String hsn_sac = hsn_sac_jtf.getText();
            String quantity = quantity_jtf.getText();
            String unit = ((JTextField)unit_jcb.getEditor().getEditorComponent()).getText();
            String amount = amount_jtf.getText();
            
            String[] strarr = new String[]{Integer.toString(dtm.getRowCount()+1), item, hsn_sac, quantity, rate, unit, amount};
            dtm.addRow(strarr);
            
            getTotalAmount();
            getNetAmount();
            
        }
        
    }
    
    private void packingForwarding_jtfKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_packingForwarding_jtfKeyReleased
        // TODO add your handling code here:

        packingForwarding_jtf_KeyReleased();

    }//GEN-LAST:event_packingForwarding_jtfKeyReleased

    private void packingForwarding_jtf_KeyReleased()
    {
        
        getNetAmount();
        
    }
    
    private void anyOtherCharges_jtfKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_anyOtherCharges_jtfKeyReleased
        // TODO add your handling code here:

        anyOtherCharges_jtf_KeyReleased();

    }//GEN-LAST:event_anyOtherCharges_jtfKeyReleased

    private void anyOtherCharges_jtf_KeyReleased()
    {
        
        getNetAmount();
        
    }
    
    private void discount_jtfKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_discount_jtfKeyReleased
        // TODO add your handling code here:

        discount_jtf_KeyReleased();

    }//GEN-LAST:event_discount_jtfKeyReleased

    private void discount_jtf_KeyReleased()
    {
        
        getNetAmount();
        
    }
    
    private void update_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_update_jbMouseClicked
        // TODO add your handling code here:

        update_jb_MouseClicked();

    }//GEN-LAST:event_update_jbMouseClicked

    private void update_jb_MouseClicked()
    {
        
        updateData();
        
    }
    
    private void close_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_close_jbActionPerformed
        // TODO add your handling code here:

        this.dispose();

    }//GEN-LAST:event_close_jbActionPerformed

    private void printOnly_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_printOnly_jbMouseClicked
        // TODO add your handling code here:

        printOnly_jb_MouseClicked();

    }//GEN-LAST:event_printOnly_jbMouseClicked

    private void itemDetails_jtFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_itemDetails_jtFocusGained
    {//GEN-HEADEREND:event_itemDetails_jtFocusGained
        itemDetails_jt.getSelectionModel().addListSelectionListener(lSL_itemDetails_jt);
        
        if(itemDetails_jt.getRowCount() > 0)
        {
            if(itemDetails_jt.getSelectedRow() != -1)
            {
                int sel_row = itemDetails_jt.getSelectedRow();

                itemDetails_jt.setRowSelectionInterval(sel_row, sel_row);
                itemDetails_jt.setColumnSelectionInterval(0, 0);
            }
            else
            {
                itemDetails_jt.setRowSelectionInterval(0, 0);
                itemDetails_jt.setColumnSelectionInterval(0, 0);
            }
	}
    }//GEN-LAST:event_itemDetails_jtFocusGained

    private void itemDetails_jtFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_itemDetails_jtFocusLost
    {//GEN-HEADEREND:event_itemDetails_jtFocusLost
        itemDetails_jt.getSelectionModel().removeListSelectionListener(lSL_itemDetails_jt);
    }//GEN-LAST:event_itemDetails_jtFocusLost

    private void printOnly_jb_MouseClicked()
    {
        printBill();
    }

    private void updateData()
    {
        boolean process = false;
        boolean error = false;
        
        try
        {
            DefaultTableModel dtm = (DefaultTableModel)itemDetails_jt.getModel();
            int rowCount = dtm.getRowCount();
            int selRow = itemDetails_jt.getSelectedRow();
            String id = dtm.getValueAt(selRow, 7).toString();
            
            for (int i = 0; i < rowCount; i++) 
            {
                String item_name = ((JTextField)selectItem_jcb.getEditor().getEditorComponent()).getText();
                String hsn_sac = hsn_sac_jtf.getText();
                String quantity = quantity_jtf.getText();
                String rate = rate_jtf.getText();
                String unit = ((JTextField)unit_jcb.getEditor().getEditorComponent()).getText();
                String gross_amount = grossTotal_jtf.getText();
                
                String packing_forwarding_charges = packingForwarding_jtf.getText();
                String any_other_charges = anyOtherCharges_jtf.getText();
                String discount = discount_jtf.getText();
                String sgst = sgst_jtf.getText();
                String cgst = cgst_jtf.getText();
                String net_amount = netTotal_jtf.getText();
                
                Invoice invoice = new Invoice();
                invoice.setItem_name(item_name);
                invoice.setHsn_sac(hsn_sac);
                invoice.setQuantity(quantity);
                invoice.setRate(rate);
                invoice.setUnit(unit);
                invoice.setPacking_forwarding_charges(packing_forwarding_charges);
                invoice.setAny_other_charges(any_other_charges);
                invoice.setDiscount(discount);
                invoice.setGross_amount(gross_amount);
                invoice.setSgst(sgst);
                invoice.setCgst(cgst);
                invoice.setNet_amount(net_amount);
                invoice.setId(id);
                invoice.setProcess("UPDATE");
                invoice.updateItemsDetail();
                
                process = true;
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, "updateData() :"+e);
            error = true;
        }
        
        if(process == true && error == false)
        {
            JOptionPane.showMessageDialog(this, "Operation Successful.", "Success", JOptionPane.INFORMATION_MESSAGE);
            loadItemsDetail();
        }
    }    

    public void getValues(String invoiceNo, String invoiceDate, String purchaseOrderNo, String purOrderDate, String modeOfTransport, String dateOfSupply, String timeOfSupply, String itemVendorCode, String vehicleNo, String placeOfSupply, String cusName, String cusAddressline1, String cusAddressline2, String cusState, String cusStateCode, String cusPAN, String cusGSTIN, String consName, String consAddressline1, String consAddressline2, String consState, String consStateCode, String consPAN, String consGSTIN, String bankName, String accNo, String branch, String iFSC, String eWayBillNo, String electronicRefNo)
    {
        
        this.invoiceNo = invoiceNo;
        this.invoiceDate = invoiceDate;
        this.purchaseOrderNo = purchaseOrderNo;
        this.purchaseOrderDate = purOrderDate;
        this.modeOfTransport = modeOfTransport;
        this.dateOfSupply = dateOfSupply;
        this.timeOfSupply = timeOfSupply;
        this.itemVendorCode = itemVendorCode;
        this.vehicleNo = vehicleNo;
        this.placeOfSupply = placeOfSupply;
        this.cusName = cusName;
        this.cusAddressline1 = cusAddressline1;
        this.cusAddressline2 = cusAddressline2;
        this.cusState = cusState;
        this.cusStateCode = cusStateCode;
        this.cusPAN = cusPAN;
        this.cusGSTIN = cusGSTIN;
        this.consName = consName;
        this.consAddressline1 = consAddressline1;
        this.consAddressline2 = consAddressline2;
        this.consState = consState;
        this.consStateCode = consStateCode;
        this.consPAN = consPAN;
        this.consGSTIN = consGSTIN;
        this.bankName = bankName;
        this.accNo = accNo;
        this.bank_branch = branch;
        this.iFSC =  iFSC;
        this.eWayBillNo = eWayBillNo;
        this.electronicRefNo = electronicRefNo;
        
    }
    
    private boolean validationBeforeApply()
    {
        
        boolean valid = true;
        
        if(selectItem_jcb.getSelectedItem() == null || selectItem_jcb.getSelectedItem().toString().equals(""))
        {
            
            JOptionPane.showMessageDialog(this, "Enter a valid Item.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        if(rate_jtf.getText().equals(""))
        {
            
            JOptionPane.showMessageDialog(this, "Specify the Rate.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        else if(hsn_sac_jtf.getText().equals(""))
        {
            
            JOptionPane.showMessageDialog(this, "Specify HSN/SAC.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        else if(quantity_jtf.getText().equals(""))
        {
            
            JOptionPane.showMessageDialog(this, "Specify Quantity.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        else if(unit_jcb.getSelectedItem() == null || unit_jcb.getSelectedItem().toString().equals("") || unit_jcb.getSelectedIndex() != -1)
        {
            
            JOptionPane.showMessageDialog(this, "Specify Unit.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        else if(amount_jtf.getText().equals(""))
        {
            
            JOptionPane.showMessageDialog(this, "Specify Amount.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        
        return valid;
        
    }
    
    private void load_selectItem_jcb()
    {
        
        selectItem_jcb.removeAllItems();
        
        Invoice invoice = new Invoice();
        List itemList = invoice.getItemNames();
        
        for (int i = 0; i < itemList.size(); i++) 
        {
            
            selectItem_jcb.addItem(itemList.get(i).toString());
            
        }
        
        ((JTextField)selectItem_jcb.getEditor().getEditorComponent()).setText("");
        
    }
    
    private void getTotalAmount()
    {
        
        try {
            
            
            DefaultTableModel dtm = (DefaultTableModel)itemDetails_jt.getModel();
            
            int rowCount = dtm.getRowCount();
            BigDecimal totalAmt_db = new BigDecimal(BigInteger.ZERO);
            BigDecimal totalAmtTemp_db = new BigDecimal(BigInteger.ZERO);
            
            for (int i = 0; i < rowCount; i++) {
                
                String amount = dtm.getValueAt(i, 6).toString();
                
                totalAmt_db = new BigDecimal(amount).add(totalAmtTemp_db);
                totalAmtTemp_db = totalAmt_db;
                
            }
            
            grossTotal_jtf.setText(totalAmtTemp_db.toString());
            
            
        } catch (Exception e) {
            
            JOptionPane.showMessageDialog(this, e);
            
        }
        
    }
    
    private void getNetAmount()
    {
        
        BigDecimal grossAmt_bd = new BigDecimal(grossTotal_jtf.getText());
        BigDecimal netAmt_bd = new BigDecimal(BigInteger.ZERO);
        BigDecimal temp_1 = new BigDecimal(BigInteger.ZERO);
        BigDecimal temp_2 = new BigDecimal(BigInteger.ZERO);
       
        BigDecimal packingForwardingCharges_bd = new BigDecimal(BigInteger.ZERO);
        BigDecimal otherCharges_bd = new BigDecimal(BigInteger.ZERO);
        BigDecimal discount_bd = new BigDecimal(BigInteger.ZERO);
        
        BigDecimal tax_Percent_bd = new BigDecimal("12");
       
        BigDecimal percent_db = new BigDecimal("100");
        
        //True:False:False
        if(!packingForwarding_jtf.getText().equals("") && (anyOtherCharges_jtf.getText().equals("") && discount_jtf.getText().equals("")))
        {
            
            packingForwardingCharges_bd = new BigDecimal(packingForwarding_jtf.getText());
            netAmt_bd = grossAmt_bd.add(packingForwardingCharges_bd);
            
        }

        //True:True:False
        if((!packingForwarding_jtf.getText().equals("") && !anyOtherCharges_jtf.getText().equals("")) && discount_jtf.getText().equals(""))
        {
            
            packingForwardingCharges_bd = new BigDecimal(packingForwarding_jtf.getText());
            otherCharges_bd = new BigDecimal(anyOtherCharges_jtf.getText());
            netAmt_bd = grossAmt_bd.add(temp_1.add(packingForwardingCharges_bd).add(otherCharges_bd));
           
            
        }
        
        //True:True:True
        if(!packingForwarding_jtf.getText().equals("") && !anyOtherCharges_jtf.getText().equals("") && !discount_jtf.getText().equals(""))
        {
            
            packingForwardingCharges_bd = new BigDecimal(packingForwarding_jtf.getText());
            otherCharges_bd = new BigDecimal(anyOtherCharges_jtf.getText());
            discount_bd = new BigDecimal(discount_jtf.getText());
            netAmt_bd = (grossAmt_bd.add(temp_1.add(packingForwardingCharges_bd).add(otherCharges_bd))).subtract(discount_bd);
            
        }
        
        //False:False:True
        if(packingForwarding_jtf.getText().equals("") && anyOtherCharges_jtf.getText().equals("") && !discount_jtf.getText().equals(""))
        {
            
            discount_bd = new BigDecimal(discount_jtf.getText());
            netAmt_bd = grossAmt_bd.subtract(discount_bd);
            
        }
        
        //False:True:False
        if(packingForwarding_jtf.getText().equals("") && !anyOtherCharges_jtf.getText().equals("") && discount_jtf.getText().equals(""))
        {
            
            otherCharges_bd = new BigDecimal(anyOtherCharges_jtf.getText());
            netAmt_bd = grossAmt_bd.add(otherCharges_bd);
            
        }
        
        //True:False:True
        if(!packingForwarding_jtf.getText().equals("") && anyOtherCharges_jtf.getText().equals("") && !discount_jtf.getText().equals(""))
        {
            
            packingForwardingCharges_bd = new BigDecimal(packingForwarding_jtf.getText());
            discount_bd = new BigDecimal(discount_jtf.getText());
            netAmt_bd = (grossAmt_bd.add(packingForwardingCharges_bd)).subtract(discount_bd);
            
        }
        
        //False:True:True
        if(packingForwarding_jtf.getText().equals("") && !anyOtherCharges_jtf.getText().equals("") && !discount_jtf.getText().equals(""))
        {
            
            otherCharges_bd = new BigDecimal(anyOtherCharges_jtf.getText());
            discount_bd = new BigDecimal(discount_jtf.getText());
            netAmt_bd = (grossAmt_bd.add(otherCharges_bd)).subtract(discount_bd);
            
        }

        //False:False:False
        if(packingForwarding_jtf.getText().equals("") && anyOtherCharges_jtf.getText().equals("") && discount_jtf.getText().equals(""))
        {
            
            netAmt_bd = new BigDecimal(grossTotal_jtf.getText());
            
        }
        
        BigDecimal amountAfterTax = ((netAmt_bd.multiply(tax_Percent_bd)).divide(percent_db));
        BigDecimal netAmtAfterTax = netAmt_bd.add(amountAfterTax);
        
        BigDecimal cgstAmt = netAmtAfterTax.divide(new BigDecimal("2"));
        BigDecimal sgstAmt = netAmtAfterTax.divide(new BigDecimal("2"));
   
        cgst_jtf.setText(cgstAmt.toString());
        sgst_jtf.setText(sgstAmt.toString());
        netTotal_jtf.setText(netAmtAfterTax.toString());

    }
    
    private void printBill()
    {
        
        try
        {
            
            addMoreRows();

            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd",Locale.getDefault());
            SimpleDateFormat sdf1 = new SimpleDateFormat("dd-MMM-yyyy",Locale.getDefault());

            DefaultTableModel model = (DefaultTableModel)itemDetails_jt.getModel();

            String source = "RegalOffsetPrinters_Invoice.jasper";
            InputStream is = getClass().getResourceAsStream(source);

            Map parameters = new HashMap();
            parameters.put("InvoiceNo", invoiceNo);
            parameters.put("InvoiceDate", invoiceDate);
            
            parameters.put("PONumber",  purchaseOrderNo);
            if(purchaseOrderDate == null)
            {
                parameters.put("PODate",  "");
            }
            else
            {
                parameters.put("PODate", purchaseOrderDate);
            }
            parameters.put("ModeOfTransport", modeOfTransport);
            if(dateOfSupply == null)
            {
                parameters.put("DateOfSupply",  "");
            }
            else
            {
                parameters.put("DateOfSupply",  dateOfSupply);
            } 
            if(timeOfSupply == null)
            {
                parameters.put("TimeOfSupply",  "");
            }
            else
            {
                 parameters.put("TimeOfSupply", timeOfSupply);
            }
            parameters.put("VendorCode",itemVendorCode);
            parameters.put("VehicleNo",vehicleNo);
            parameters.put("PlaceOfSupply",placeOfSupply);
            if(cusName == null)
            {
                parameters.put("CustomerName","");
            }
            else
            {
                parameters.put("CustomerName",cusName);
            }
            parameters.put("CusAddress",cusAddressline1+","+cusAddressline2);
            parameters.put("CusState",cusState);
            parameters.put("CusStateCode",cusStateCode);
            parameters.put("CusPAN",cusPAN);
            parameters.put("CusGSTIN",cusGSTIN);
            if(consName == null)
            {
                parameters.put("ConsigneeName","");
            }
            else
            {
                parameters.put("ConsigneeName",consName);
            }
            parameters.put("ConAddress",consAddressline1+","+consAddressline2);
            parameters.put("ConsState",consState);
            parameters.put("ConsStateCode",consStateCode);
            parameters.put("ConsPAN",consPAN);
            parameters.put("ConsGSTIN",consGSTIN);
            parameters.put("EWayBillNo",eWayBillNo);
            parameters.put("EleReferanceNo",electronicRefNo);
            parameters.put("BankName",bankName);
            parameters.put("BankBranch",bank_branch);
            parameters.put("IFSCode",iFSC);
            parameters.put("BillAmount",grossTotal_jtf.getText());
            parameters.put("PackingForwardingCharges",packingForwarding_jtf.getText());
            parameters.put("OtherCharges",anyOtherCharges_jtf.getText());
            parameters.put("Discount",discount_jtf.getText());
            parameters.put("CGST",cgst_jtf.getText());
            parameters.put("SGST",sgst_jtf.getText());
            parameters.put("NetTotal",netTotal_jtf.getText());

            //Convert TotalAmt to words in Dirhams
            //String amount = amttopay_jtf.getText();
            String amount = "101.45";
            int decimalindex = amount.indexOf(".");

            //System.out.println(decimalindex);

            String amtbeforedecimal = amount.substring(0, decimalindex);
            String amtafterdecimal = amount.substring(decimalindex+1);

            int amtbeforedecimal_int = Integer.parseInt(amtbeforedecimal);
            int amtafterdecimal_int = Integer.parseInt(amtafterdecimal);

            NumberToWords ntw1 = new NumberToWords();

            String amtbeforedecimal_words = ntw1.convert(amtbeforedecimal_int);
            String amtafterdecimal_words = ntw1.convert(amtafterdecimal_int);

            String amountinwords = "("+amtbeforedecimal_words+" Rupees "+amtafterdecimal_words+" Paisa"+" Only)";
            parameters.put("amt_in_words",amountinwords);
            //parameters.put("logo", getClass().getResourceAsStream("Sharp_Logo.png"));

            JasperPrint print = JasperFillManager.fillReport(is, parameters, new JRTableModelDataSource(model));
            jv = new JasperViewer(print,false);
            jv.viewReport(print,false);

//            if(print != null)
//            {
//                
//            JasperPrintManager.printReport(print, true);
//           
//            }

            removeAdditionalRows();
            
        }
        catch(Exception ex)
        {
            
            JOptionPane.showMessageDialog(null, ex);
            
        }
        
    }
    
    private void addMoreRows()
    {
        String[] morerowsarr = null;
        initial_rowcnt = itemDetails_jt.getRowCount();
        if(initial_rowcnt < 18)
        {
            int addmorerows = 18 - initial_rowcnt;
            for(int i = 0 ; i < addmorerows ; i++)
            {
                
                morerowsarr = new String[]{"","","","","","","","","","","","","","","","","","","","","","",""};
                ((DefaultTableModel)itemDetails_jt.getModel()).addRow(morerowsarr);
                
            }
        }
        
    }
    
    private void removeAdditionalRows()
    {
        int current_rowcnt = itemDetails_jt.getRowCount();
        int rowstodelete = current_rowcnt-initial_rowcnt;
        for(int i = 0 ; i < rowstodelete ; i++)
        {
            //System.out.println(current_rowcnt = current_rowcnt - 1);
            ((DefaultTableModel)itemDetails_jt.getModel()).removeRow(current_rowcnt = current_rowcnt - 1); 
        }  
    }
    
    public void loadItemsDetail()
    {
        try
        {
            DefaultTableModel dtm = (DefaultTableModel)itemDetails_jt.getModel();
            dtm.setRowCount(0);
            
            Invoice invoice = new Invoice();
            List<Invoice> invoiceItemsDetList = invoice.getItemsDetail(InvoiceEntry_Edit.invNo);

            for (int i = 0; i < invoiceItemsDetList.size(); i++)
            {
                String itemName = invoiceItemsDetList.get(i).getItem_name();
                String hsn_sac = invoiceItemsDetList.get(i).getHsn_sac();
                String quantity = invoiceItemsDetList.get(i).getQuantity();
                String rate = invoiceItemsDetList.get(i).getRate();
                String unit = invoiceItemsDetList.get(i).getUnit();
                String amount = new BigDecimal(rate).multiply(new BigDecimal(quantity)).toString();
                String id = invoiceItemsDetList.get(i).getId();
               
                String colCount = Integer.toString(itemDetails_jt.getRowCount()+1);
                
                String[] strarr = new String[]{colCount, itemName, hsn_sac, quantity, rate, unit, amount, id};
                dtm.addRow(strarr);
                
                String pack_forw_charges = invoiceItemsDetList.get(i).getPacking_forwarding_charges();
                String anyOtherCharges = invoiceItemsDetList.get(i).getAny_other_charges();
                String discount = invoiceItemsDetList.get(i).getDiscount();
                String grossAmt = invoiceItemsDetList.get(i).getGross_amount();
                String cgst = invoiceItemsDetList.get(i).getCgst();
                String sgst = invoiceItemsDetList.get(i).getSgst();
                String netAmt = invoiceItemsDetList.get(i).getNet_amount();
                
                packingForwarding_jtf.setText(pack_forw_charges);
                anyOtherCharges_jtf.setText(anyOtherCharges);
                discount_jtf.setText(discount);
                grossTotal_jtf.setText(grossAmt);
                cgst_jtf.setText(cgst);
                sgst_jtf.setText(sgst);
                netTotal_jtf.setText(netAmt);
            }
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(this, "loadItemsDetail() : "+e);
        }
        
        if(itemDetails_jt.getRowCount() > 0)
        {
            itemDetails_jt.requestFocusInWindow();
        }
        
    }
    
    class LSL_itemDetails_jt implements ListSelectionListener
    {

        @Override
        public void valueChanged(ListSelectionEvent e) {
            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            
            try 
            {
                int selrow = itemDetails_jt.getSelectedRow();

                String itemName = itemDetails_jt.getValueAt(selrow, 1).toString();
                String rate = itemDetails_jt.getValueAt(selrow, 4).toString();
                String hsn_sac = itemDetails_jt.getValueAt(selrow, 2).toString();
                String quantity = itemDetails_jt.getValueAt(selrow, 3).toString();
                String unit = itemDetails_jt.getValueAt(selrow, 5).toString();
                String amount = itemDetails_jt.getValueAt(selrow, 6).toString();

                ((JTextField)selectItem_jcb.getEditor().getEditorComponent()).setText(itemName);
                rate_jtf.setText(rate);
                hsn_sac_jtf.setText(hsn_sac);
                quantity_jtf.setText(quantity);
                ((JTextField)unit_jcb.getEditor().getEditorComponent()).setText(unit);
                amount_jtf.setText(amount);
            } 
            catch (Exception ex) 
            {
                JOptionPane.showMessageDialog(null,"Class LSL_items_table_jt_: " +ex);
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField amount_jtf;
    private javax.swing.JTextField anyOtherCharges_jtf;
    private javax.swing.JTextField cgst_jtf;
    private javax.swing.JButton clear_jb;
    private javax.swing.JButton close_jb;
    private javax.swing.JTextField discount_jtf;
    private javax.swing.JTextField grossTotal_jtf;
    private javax.swing.JTextField hsn_sac_jtf;
    private javax.swing.JTable itemDetails_jt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTextField netTotal_jtf;
    private javax.swing.JTextField packingForwarding_jtf;
    private javax.swing.JButton printOnly_jb;
    private javax.swing.JTextField quantity_jtf;
    private javax.swing.JTextField rate_jtf;
    private javax.swing.JComboBox<String> selectItem_jcb;
    private javax.swing.JTextField sgst_jtf;
    private javax.swing.JComboBox<String> unit_jcb;
    private javax.swing.JButton update_jb;
    // End of variables declaration//GEN-END:variables
}
