/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package DSST007_1_CUS13.pll;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;
import net.sf.jasperreports.view.JasperViewer;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author praveen
 */
public class Accounts_Expenses_Report extends javax.swing.JInternalFrame {

    private static Accounts_Expenses_Report instance;
     int initial_rowcnt;
    
    public Accounts_Expenses_Report() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        fromdate_jdc = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        todate_jdc = new com.toedter.calendar.JDateChooser();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        searchby_jcb = new javax.swing.JComboBox();
        searchitem_jcb = new javax.swing.JComboBox();
        displayfeedetails_jb = new javax.swing.JButton();
        search_by_all_jchkbx = new javax.swing.JCheckBox();
        search_by_date_jchkbx = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        expensedetails_jt = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        totalcount_jtf = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        totalamount_jtf = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        printdetails_jb = new javax.swing.JButton();
        refresh_jb = new javax.swing.JButton();
        close_jb = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255)));
        setClosable(true);
        setTitle("Reports -> Accounts -> Expenses");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/DSST007_1_CUS13/InstabizTrader Logo Final 35x35.png"))); // NOI18N
        addInternalFrameListener(new javax.swing.event.InternalFrameListener()
        {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt)
            {
                formInternalFrameOpened(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt)
            {
                formInternalFrameClosing(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt)
            {
                formInternalFrameClosed(evt);
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt)
            {
            }
        });

        jPanel1.setBackground(new java.awt.Color(242, 242, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel2.setBackground(new java.awt.Color(242, 242, 255));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel2.setText("From :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel2.add(jLabel2, gridBagConstraints);

        fromdate_jdc.setBackground(new java.awt.Color(242, 242, 255));
        fromdate_jdc.setDateFormatString("d-MMM-yyyy");
        fromdate_jdc.setPreferredSize(new java.awt.Dimension(140, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel2.add(fromdate_jdc, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel3.setText("To :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel2.add(jLabel3, gridBagConstraints);

        todate_jdc.setBackground(new java.awt.Color(242, 242, 255));
        todate_jdc.setDateFormatString("d-MMM-yyyy");
        todate_jdc.setPreferredSize(new java.awt.Dimension(140, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        jPanel2.add(todate_jdc, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 32, 0, 0);
        jPanel1.add(jPanel2, gridBagConstraints);

        jPanel3.setBackground(new java.awt.Color(242, 242, 255));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabel4.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel4.setText("Search By :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel3.add(jLabel4, gridBagConstraints);

        searchby_jcb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-Select-", "All", "Expense Category", "Bank", "Cash" }));
        searchby_jcb.setPreferredSize(new java.awt.Dimension(150, 25));
        searchby_jcb.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                searchby_jcbActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel3.add(searchby_jcb, gridBagConstraints);

        searchitem_jcb.setEditable(true);
        searchitem_jcb.setPreferredSize(new java.awt.Dimension(200, 25));
        searchitem_jcb.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                searchitem_jcbActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel3.add(searchitem_jcb, gridBagConstraints);

        displayfeedetails_jb.setBackground(new java.awt.Color(185, 197, 31));
        displayfeedetails_jb.setText("Display");
        displayfeedetails_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        displayfeedetails_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                displayfeedetails_jbMouseClicked(evt);
            }
        });
        displayfeedetails_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                displayfeedetails_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        jPanel3.add(displayfeedetails_jb, gridBagConstraints);

        search_by_all_jchkbx.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        search_by_all_jchkbx.setText("All");
        search_by_all_jchkbx.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                search_by_all_jchkbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel3.add(search_by_all_jchkbx, gridBagConstraints);

        search_by_date_jchkbx.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        search_by_date_jchkbx.setText("Date");
        search_by_date_jchkbx.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                search_by_date_jchkbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel3.add(search_by_date_jchkbx, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jPanel3, gridBagConstraints);

        jPanel4.setBackground(new java.awt.Color(242, 242, 255));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jScrollPane2.setPreferredSize(new java.awt.Dimension(958, 400));

        expensedetails_jt.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        expensedetails_jt.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "SNo", "VoucherNo", "Date", "ExpenseType", "ExpenseItem", "Description", "To", "Amount"
            }
        )
        {
            boolean[] canEdit = new boolean []
            {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        expensedetails_jt.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        expensedetails_jt.setFillsViewportHeight(true);
        expensedetails_jt.setRowHeight(23);
        expensedetails_jt.setSelectionBackground(new java.awt.Color(86, 132, 191));
        expensedetails_jt.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                expensedetails_jtKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(expensedetails_jt);
        if (expensedetails_jt.getColumnModel().getColumnCount() > 0)
        {
            expensedetails_jt.getColumnModel().getColumn(0).setMinWidth(50);
            expensedetails_jt.getColumnModel().getColumn(0).setPreferredWidth(50);
            expensedetails_jt.getColumnModel().getColumn(1).setMinWidth(100);
            expensedetails_jt.getColumnModel().getColumn(1).setPreferredWidth(100);
            expensedetails_jt.getColumnModel().getColumn(2).setMinWidth(100);
            expensedetails_jt.getColumnModel().getColumn(2).setPreferredWidth(100);
            expensedetails_jt.getColumnModel().getColumn(3).setMinWidth(150);
            expensedetails_jt.getColumnModel().getColumn(3).setPreferredWidth(150);
            expensedetails_jt.getColumnModel().getColumn(4).setMinWidth(150);
            expensedetails_jt.getColumnModel().getColumn(4).setPreferredWidth(150);
            expensedetails_jt.getColumnModel().getColumn(5).setMinWidth(150);
            expensedetails_jt.getColumnModel().getColumn(5).setPreferredWidth(150);
            expensedetails_jt.getColumnModel().getColumn(6).setMinWidth(150);
            expensedetails_jt.getColumnModel().getColumn(6).setPreferredWidth(150);
            expensedetails_jt.getColumnModel().getColumn(7).setMinWidth(100);
            expensedetails_jt.getColumnModel().getColumn(7).setPreferredWidth(100);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel4.add(jScrollPane2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        jPanel1.add(jPanel4, gridBagConstraints);

        jPanel5.setBackground(new java.awt.Color(242, 242, 255));
        jPanel5.setLayout(new java.awt.GridBagLayout());

        jLabel5.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel5.setText("Total Count :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel5.add(jLabel5, gridBagConstraints);

        totalcount_jtf.setEditable(false);
        totalcount_jtf.setBackground(new java.awt.Color(255, 204, 51));
        totalcount_jtf.setPreferredSize(new java.awt.Dimension(120, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel5.add(totalcount_jtf, gridBagConstraints);

        jLabel6.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel6.setText("Total Amount :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel5.add(jLabel6, gridBagConstraints);

        totalamount_jtf.setEditable(false);
        totalamount_jtf.setBackground(new java.awt.Color(255, 204, 51));
        totalamount_jtf.setPreferredSize(new java.awt.Dimension(120, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        jPanel5.add(totalamount_jtf, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        jPanel1.add(jPanel5, gridBagConstraints);

        jPanel6.setBackground(new java.awt.Color(242, 242, 255));
        jPanel6.setLayout(new java.awt.GridBagLayout());

        printdetails_jb.setBackground(new java.awt.Color(185, 197, 31));
        printdetails_jb.setText("Print");
        printdetails_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        printdetails_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                printdetails_jbMouseClicked(evt);
            }
        });
        printdetails_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                printdetails_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel6.add(printdetails_jb, gridBagConstraints);

        refresh_jb.setBackground(new java.awt.Color(185, 197, 31));
        refresh_jb.setText("Refresh");
        refresh_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        refresh_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                refresh_jbMouseClicked(evt);
            }
        });
        refresh_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                refresh_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel6.add(refresh_jb, gridBagConstraints);

        close_jb.setBackground(new java.awt.Color(86, 132, 191));
        close_jb.setText("Close");
        close_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        close_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                close_jbMouseClicked(evt);
            }
        });
        close_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                close_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        jPanel6.add(close_jb, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 15, 0);
        jPanel1.add(jPanel6, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(jSeparator2, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        setBounds(0, 0, 962, 578);
    }// </editor-fold>//GEN-END:initComponents

    public static Accounts_Expenses_Report getInstance()
    {
        
        if (instance == null)
            instance = new Accounts_Expenses_Report();

        return instance;
        
    }
    
    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        // TODO add your handling code here:
        
        instance = null;
        
    }//GEN-LAST:event_formInternalFrameClosed

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        // TODO add your handling code here:
        
        instance = null;
        
    }//GEN-LAST:event_formInternalFrameClosing

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:
        
        Dimension desktopSize = NewMDIApplication.desktopbg_jlbl.getSize();
        Dimension jInternalFrameSize = this.getSize();
        this.setLocation((desktopSize.width - jInternalFrameSize.width)/2,(desktopSize.height- jInternalFrameSize.height)/2);
        
        //-----------------------------
        
        todate_jdc.setDate(new Date());
        
        AutoCompleteDecorator.decorate(searchitem_jcb);
        
        getfirstdate();
        
        expensedetails_jt.setFocusTraversalKeysEnabled(false);
        
    }//GEN-LAST:event_formInternalFrameOpened

    private void getfirstdate()
    {
        
        Connection con = DatabaseConnection.createConnection();

        try {

            SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
            SimpleDateFormat sdf2 = new SimpleDateFormat("dd-MM-yyyy", Locale.getDefault());

            Date expvoucher_date_val;

            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT entrydate FROM expense_voucher");

            if (rs.first()) {

                String expvouch_date = rs.getString("entrydate");
                expvoucher_date_val = sdf2.parse(sdf2.format(sdf1.parse(expvouch_date)));
                fromdate_jdc.setDate(expvoucher_date_val);

            }

        } catch (Exception e) {

            JOptionPane.showMessageDialog(null, e);

        } finally {

            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex);
                }

            }

        }

        
    }
    
    private void searchby_jcbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchby_jcbActionPerformed
        // TODO add your handling code here:
        
        ((DefaultTableModel)expensedetails_jt.getModel()).setRowCount(0);
        totalcount_jtf.setText("");
        totalamount_jtf.setText("");
        
        if(searchby_jcb.getSelectedItem().toString().equals("All"))
        {
            
            searchitem_jcb.removeAllItems();
            searchitem_jcb.setEnabled(false);
            
        }
        else if(searchby_jcb.getSelectedItem().toString().equals("Expense Category"))
        {
            
            searchitem_jcb.setEnabled(true);
            load_expensetypes_searchitem_jcb();
            
        }
        else if(searchby_jcb.getSelectedItem().toString().equals("Bank"))
        {
            
            searchitem_jcb.removeAllItems();
            searchitem_jcb.setEnabled(false);
            
        }
        else if(searchby_jcb.getSelectedItem().toString().equals("Cash"))
        {
            
            searchitem_jcb.removeAllItems();
            searchitem_jcb.setEnabled(false);
            
        }
        
    }//GEN-LAST:event_searchby_jcbActionPerformed

    private void displayfeedetails_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_displayfeedetails_jbMouseClicked
        // TODO add your handling code here:
        
        if(validation() == true)
        {
            
         
            displayexpensedetails();
                
      
        }
        
    }//GEN-LAST:event_displayfeedetails_jbMouseClicked

    private void refresh_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refresh_jbMouseClicked
        // TODO add your handling code here:
        
        if(fromdate_jdc.getDate() != null && todate_jdc.getDate() != null && !searchby_jcb.getSelectedItem().toString().equals("-Select-"))
        {
           
            
            displayexpensedetails();
        
            
        }
        
    }//GEN-LAST:event_refresh_jbMouseClicked

    private void searchitem_jcbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchitem_jcbActionPerformed
        // TODO add your handling code here:
        
        ((DefaultTableModel)expensedetails_jt.getModel()).setRowCount(0);
        totalcount_jtf.setText("");
        totalamount_jtf.setText("");
        
    }//GEN-LAST:event_searchitem_jcbActionPerformed

    private void displayfeedetails_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_displayfeedetails_jbKeyPressed
        // TODO add your handling code here:
        
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            
            if(validation() == true)
            {

                displayexpensedetails();

            }
            
        }
        
    }//GEN-LAST:event_displayfeedetails_jbKeyPressed

    private void refresh_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_refresh_jbKeyPressed
        // TODO add your handling code here:
        
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            
            if(validation() == true)
            {

                displayexpensedetails();

            }
            
        }
        
    }//GEN-LAST:event_refresh_jbKeyPressed

    private void close_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_close_jbMouseClicked
        // TODO add your handling code here:
        
        this.dispose();
        
    }//GEN-LAST:event_close_jbMouseClicked

    private void close_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_close_jbKeyPressed
        // TODO add your handling code here:
        
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            
            this.dispose();
            
        }
        
    }//GEN-LAST:event_close_jbKeyPressed

    private void expensedetails_jtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_expensedetails_jtKeyPressed
        // TODO add your handling code here:
        
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            
            printdetails_jb.requestFocusInWindow();
            
        }
        
    }//GEN-LAST:event_expensedetails_jtKeyPressed

    private void printdetails_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_printdetails_jbMouseClicked
        // TODO add your handling code here:
        
        if(validationforprint() == true)
        {
            
            //printdetails();
            
        }
        
        
    }//GEN-LAST:event_printdetails_jbMouseClicked

    private void printdetails_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_printdetails_jbKeyPressed
        // TODO add your handling code here:
        
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            
            if(validationforprint() == true)
            {

                //printdetails();

            }
            
        }
        
    }//GEN-LAST:event_printdetails_jbKeyPressed

    private void search_by_all_jchkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_by_all_jchkbxActionPerformed
        // TODO add your handling code here:
        
        if(search_by_all_jchkbx.isSelected() == true)
        {
           
            fromdate_jdc.setEnabled(false);
            todate_jdc.setEnabled(false);
            
            search_by_date_jchkbx.setSelected(false);
            
        }
        
    }//GEN-LAST:event_search_by_all_jchkbxActionPerformed

    private void search_by_date_jchkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_by_date_jchkbxActionPerformed
        // TODO add your handling code here:
        
        if(search_by_date_jchkbx.isSelected() == true)
        {
            
            fromdate_jdc.setEnabled(true);
            ((JTextField)fromdate_jdc.getDateEditor().getUiComponent()).setBackground(Color.white);
            todate_jdc.setEnabled(true);
            ((JTextField)todate_jdc.getDateEditor().getUiComponent()).setBackground(Color.white);
            
            search_by_all_jchkbx.setSelected(false);
            
        }
        
    }//GEN-LAST:event_search_by_date_jchkbxActionPerformed

    boolean validationforprint()
    {
        
        boolean valid = true;
        
        if(fromdate_jdc.getDate() == null)
        {
            
            JOptionPane.showMessageDialog(this, "Specify From Date.", "Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
            
        }
        else if(todate_jdc.getDate() == null)
        {
            
            JOptionPane.showMessageDialog(this, "Specify To Date.", "Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        else if(expensedetails_jt.getRowCount() == 0)
        {
            
            JOptionPane.showMessageDialog(this, "No data found.", "Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
       
        return valid;
        
    }
    
//    private void printdetails()
//    {
//        
//        try 
//        {
//            
//            DefaultTableModel model = (DefaultTableModel)expensedetails_jt.getModel();
//            SimpleDateFormat sdf1 = new SimpleDateFormat("dd-MMM-yyyy",Locale.getDefault());
//            
//            BigDecimal bigtemp = new BigDecimal("0").setScale(2,RoundingMode.HALF_UP);
//            BigDecimal bigtotalamount = new BigDecimal("0").setScale(2,RoundingMode.HALF_UP);;
//            for(int i = 0 ; i < expensedetails_jt.getRowCount(); i ++)
//            {
//
//                  bigtotalamount = new BigDecimal(model.getValueAt(i,7).toString()).add(bigtemp);
//                  bigtemp = bigtotalamount;
//                
//            }
//            
//            addMoreRows();
//            
//            String source = "expense_report.jasper";
//           
//            InputStream is = getClass().getResourceAsStream(source);
//
//            Map parameters = new HashMap();
//            parameters.put("from_date", sdf1.format(fromdate_jdc.getDate()));
//            parameters.put("to_date", sdf1.format(todate_jdc.getDate()));
//            parameters.put("logo", getClass().getResourceAsStream("ideal_emblem_2.png"));
//            
//            // Convert amount to words:
//            int decimalindex = bigtotalamount.toString().indexOf(".");
//            
//            String amtbeforedecimal = bigtotalamount.toString().substring(0, decimalindex);
//            String amtafterdecimal = bigtotalamount.toString().substring(decimalindex+1);
//
//            int amtbeforedecimal_int = Integer.parseInt(amtbeforedecimal);
//            int amtafterdecimal_int = Integer.parseInt(amtafterdecimal);
//
//            NumberToWords ntw1 = new NumberToWords();
//
//            String amtbeforedecimal_words = ntw1.convert(amtbeforedecimal_int);
//            String amtafterdecimal_words = ntw1.convert(amtafterdecimal_int);
//
//            String amountinwords = "("+amtbeforedecimal_words+" Rupees "+amtafterdecimal_words+" Paise"+" Only)";
//            
//            //End
//
//            parameters.put("total_amount",bigtotalamount.toString());
//            
//            //JasperPrint print = JasperFillManager.fillReport(is, parameters, new JRTableModelDataSource(model));
//            JasperPrint print = JasperFillManager.fillReport(is, parameters, new JRTableModelDataSource(model));
//            
//            JasperViewer.viewReport(print,false);
//            
//            removeAdditionalRows();
//            
//        } catch (Exception ex) 
//        {
//            
//            
//            JOptionPane.showMessageDialog(null, ex);
//            
//        }
//        
//    }
    
    private void addMoreRows()
    {
        String[] morerowsarr = null;
        initial_rowcnt = expensedetails_jt.getRowCount();
        int rows_needed = 27;
        if(initial_rowcnt < rows_needed)
        {
            int addmorerows = rows_needed - initial_rowcnt;
            for(int i = 0 ; i < addmorerows ; i++)
            {
                
                morerowsarr = new String[]{"","","","","","","",""};
                ((DefaultTableModel)expensedetails_jt.getModel()).addRow(morerowsarr);
                
            }
        }
        
    }
    
    private void removeAdditionalRows()
    {
        int current_rowcnt = expensedetails_jt.getRowCount();
        int rowstodelete = current_rowcnt-initial_rowcnt;
        for(int i = 0 ; i < rowstodelete ; i++)
        {
            //System.out.println(current_rowcnt = current_rowcnt - 1);
            ((DefaultTableModel)expensedetails_jt.getModel()).removeRow(current_rowcnt = current_rowcnt - 1); 
        }  
    }
    
    private void displayexpensedetails()
    {
        
        
        Connection con = DatabaseConnection.createConnection();

        try {

            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd",Locale.getDefault());
            SimpleDateFormat sdf2 = new SimpleDateFormat("dd-MMM-yyyy",Locale.getDefault());
            DefaultTableModel dtm = (DefaultTableModel)expensedetails_jt.getModel();
            dtm.setRowCount(0);
           
            String fromdate = sdf.format(fromdate_jdc.getDate());
            String todate = sdf.format(todate_jdc.getDate());
            
            String sql = null;
           
            if(searchby_jcb.getSelectedItem().toString().equals("All"))
            {   
                
                   System.out.println(sql);
                
                if(search_by_all_jchkbx.isSelected() == true)
                {

                    sql = "SELECT * FROM expense_voucher";

                }

                if(search_by_date_jchkbx.isSelected() == true)
                {

                   sql = "SELECT * FROM expense_voucher WHERE entrydate BETWEEN '" + fromdate + "' AND '" + todate + "' ";

                }
            
            }
            
            if(searchby_jcb.getSelectedItem().toString().equals("Expense Category"))
            {   
                
                String search_item = searchitem_jcb.getSelectedItem().toString();
                
                if(search_by_all_jchkbx.isSelected() == true)
                {

                    sql = "SELECT * FROM expense_voucher WHERE expense_type = '"+search_item+"' ";

                }

                if(search_by_date_jchkbx.isSelected() == true)
                {

                    sql = "SELECT * FROM expense_voucher WHERE expense_type = '"+search_item+"' AND entrydate BETWEEN '" + fromdate + "' AND '" + todate + "' ";

                }
            
            }

            if(searchby_jcb.getSelectedItem().toString().equals("Bank"))
            {   
               
                if(search_by_all_jchkbx.isSelected() == true)
                {

                    sql = "SELECT * FROM expense_voucher WHERE to_bank != 'NA' ";

                }

                if(search_by_date_jchkbx.isSelected() == true)
                {

                    sql = "SELECT * FROM expense_voucher WHERE to_bank != 'NA' AND entrydate BETWEEN '" + fromdate + "' AND '" + todate + "' ";

                }
            
            } 
            
            if(searchby_jcb.getSelectedItem().toString().equals("Cash"))
            {   
                 
                if(search_by_all_jchkbx.isSelected() == true)
                {

                    sql = "SELECT * FROM expense_voucher WHERE to_cash = 'yes' ";

                }

                if(search_by_date_jchkbx.isSelected() == true)
                {

                    sql = "SELECT * FROM expense_voucher WHERE to_cash = 'yes' AND entrydate BETWEEN '" + fromdate + "' AND '" + todate + "' ";

                }
            
            } 
            
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            
            while (rs.next()) {

                String voucher_no = rs.getString("voucher_no");
                String expense_type = rs.getString("expense_type");
                String expense_item = rs.getString("expense_item");
                String amount = rs.getString("amount");
                String description = rs.getString("description");
                String to_ = rs.getString("towards");
                Date expense_date = sdf.parse(rs.getString("entrydate"));
                String exp_date_str = sdf2.format(expense_date);
                
                int rowcnt = expensedetails_jt.getRowCount();
                
                String[] strarr = new String[]{Integer.toString(rowcnt+1),voucher_no,exp_date_str,expense_type,expense_item,description,to_,amount};
                
                dtm.addRow(strarr);
                
            }

            gettotals();
            
        } catch (Exception e) {

            JOptionPane.showMessageDialog(null, e);

        } finally {

            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex);
                }

            }

        }
        
    }
 
    private void gettotals()
    {
        
        int rowcount = expensedetails_jt.getRowCount();
        BigDecimal big_amounttotal = new BigDecimal("0");
        BigDecimal  big_temp = new BigDecimal("0");
        
        for(int i = 0 ; i < rowcount ; i++)
        {
     
            big_amounttotal = new BigDecimal(expensedetails_jt.getValueAt(i, 7).toString()).setScale(2, RoundingMode.HALF_UP).add(big_temp);
            big_temp = big_amounttotal;
           
        }
        
        totalamount_jtf.setText(big_amounttotal.toString());
        totalcount_jtf.setText(Integer.toString(rowcount));
        
        
    }
    
    private boolean validation()
    {
        
        boolean valid = true;
        
        if(searchby_jcb.getSelectedItem().toString().equals("-Select-"))
        {
            
            JOptionPane.showMessageDialog(this,"Please select from Search By.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
          else if(search_by_all_jchkbx.isSelected() == false && search_by_date_jchkbx.isSelected() == false)
        {
            
            JOptionPane.showMessageDialog(this,"Select All or Date.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        else if(search_by_date_jchkbx.isSelected() == true)
        {
            
            if(fromdate_jdc.getDate() == null)
            {

                JOptionPane.showMessageDialog(this,"Please select From Date.","Error",JOptionPane.ERROR_MESSAGE);
                valid = false;

            }
            else if(todate_jdc.getDate() == null)
            {

                JOptionPane.showMessageDialog(this,"Please select To Date.","Error",JOptionPane.ERROR_MESSAGE);
                valid = false;

            } 
            
        }
        else if(searchby_jcb.getSelectedItem().toString().equals("Expense Category") && (searchitem_jcb.getSelectedItem().toString().equals("") || searchitem_jcb.getSelectedIndex() == -1 || searchitem_jcb.getSelectedItem() == null))
        {
            
            JOptionPane.showMessageDialog(this,"Please specify a valid Search Item.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
               
                
        return valid;        
        
    }
    
    private void load_expensetypes_searchitem_jcb()
    {
        
        Connection con = DatabaseConnection.createConnection();

        try {

            searchitem_jcb.removeAllItems();
            
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT DISTINCT expense_type FROM expense_voucher");

            while (rs.next()) 
            {

                String expense_type = rs.getString("expense_type");  
                searchitem_jcb.addItem(expense_type);
                
            }

            searchitem_jcb.setSelectedItem("");
            
        } catch (Exception e) {

            JOptionPane.showMessageDialog(null, e);

        } finally {

            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex);
                }

            }

        }
        
    }
    
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton close_jb;
    private javax.swing.JButton displayfeedetails_jb;
    private javax.swing.JTable expensedetails_jt;
    private com.toedter.calendar.JDateChooser fromdate_jdc;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JButton printdetails_jb;
    private javax.swing.JButton refresh_jb;
    private javax.swing.JCheckBox search_by_all_jchkbx;
    private javax.swing.JCheckBox search_by_date_jchkbx;
    private javax.swing.JComboBox searchby_jcb;
    private javax.swing.JComboBox searchitem_jcb;
    private com.toedter.calendar.JDateChooser todate_jdc;
    private javax.swing.JTextField totalamount_jtf;
    private javax.swing.JTextField totalcount_jtf;
    // End of variables declaration//GEN-END:variables
}
