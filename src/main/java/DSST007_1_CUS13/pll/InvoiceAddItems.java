package DSST007_1_CUS13.pll;

import DSST007_1_CUS13.bll.Invoice;
import DSST007_1_CUS13.bll.InvoiceItems_BLL;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;
import net.sf.jasperreports.view.JasperViewer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author praveen
 */
public class InvoiceAddItems extends javax.swing.JInternalFrame {

    private static InvoiceAddItems MyInstance;
    
    String invoiceNo;
    String invoiceDate;
    String purchaseOrderNo;
    String purchaseOrderDate;
    String modeOfTransport;
    String dateOfSupply;
    String timeOfSupply;
    String itemVendorCode;
    String vehicleNo;
    String placeOfSupply;
    String cusName;
    String cusAddressline1;
    String cusAddressline2;
    String cusState;
    String cusStateCode;
    String cusPAN;
    String cusGSTIN;
    String consName;
    String consAddressline1;
    String consAddressline2;
    String consState;
    String consStateCode;
    String consPAN;
    String consGSTIN;
    String bankName;
    String accNo;
    String bank_branch;
    String iFSC;
    String eWayBillNo;
    String electronicRefNo;
    String phone1;
    
    JasperViewer jv;
    int initial_rowcnt = 0;
    BigDecimal amount_db;
    
    public InvoiceAddItems() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        rate_jtf = new javax.swing.JTextField();
        selectItem_jcb = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        unit_jcb = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        quantity_jtf = new javax.swing.JTextField();
        amount_jtf = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        applyValues_jb = new javax.swing.JButton();
        new_jb = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        hsn_sac_jtf = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        tax_jtf = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        code_jtf = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        itemDetails_jt = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        packingForwarding_jtf = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        anyOtherCharges_jtf = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        discount_jtf = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        grossTotal_jtf = new javax.swing.JTextField();
        cgst_jlbl = new javax.swing.JLabel();
        cgst_jtf = new javax.swing.JTextField();
        sgst_jlbl = new javax.swing.JLabel();
        sgst_jtf = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        netTotal_jtf = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        saveAndPrint_jb = new javax.swing.JButton();
        clear_jb = new javax.swing.JButton();
        close_jb = new javax.swing.JButton();
        printOnly_jb = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255)));
        setClosable(true);
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/DSST007_1_CUS13/InstabizTrader Logo Final 35x35.png"))); // NOI18N
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jPanel1.setBackground(new java.awt.Color(242, 242, 255));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel2.setBackground(new java.awt.Color(242, 242, 255));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel2.setText("Quantity :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(jLabel2, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel3.setText("Unit :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel2.add(jLabel3, gridBagConstraints);

        rate_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        rate_jtf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                rate_jtfKeyTyped(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                rate_jtfKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(rate_jtf, gridBagConstraints);

        selectItem_jcb.setEditable(true);
        selectItem_jcb.setPreferredSize(new java.awt.Dimension(250, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(selectItem_jcb, gridBagConstraints);

        jLabel4.setText("Rate :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel2.add(jLabel4, gridBagConstraints);

        unit_jcb.setEditable(true);
        unit_jcb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "  ", "kg", "mtr", "sheet" }));
        unit_jcb.setPreferredSize(new java.awt.Dimension(117, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(unit_jcb, gridBagConstraints);

        jLabel5.setText("Amount :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel2.add(jLabel5, gridBagConstraints);

        quantity_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        quantity_jtf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                quantity_jtfKeyTyped(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                quantity_jtfKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(quantity_jtf, gridBagConstraints);

        amount_jtf.setBackground(new java.awt.Color(255, 204, 51));
        amount_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(amount_jtf, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel1.setText("Commodity/Item :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(jLabel1, gridBagConstraints);

        applyValues_jb.setBackground(new java.awt.Color(185, 197, 31));
        applyValues_jb.setText("Apply");
        applyValues_jb.setPreferredSize(new java.awt.Dimension(84, 27));
        applyValues_jb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyValues_jbActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        jPanel2.add(applyValues_jb, gridBagConstraints);

        new_jb.setBackground(new java.awt.Color(86, 132, 191));
        new_jb.setText("New");
        new_jb.setPreferredSize(new java.awt.Dimension(84, 27));
        new_jb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                new_jbActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 1;
        jPanel2.add(new_jb, gridBagConstraints);

        jLabel6.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel6.setText("HSN/SAC :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel2.add(jLabel6, gridBagConstraints);

        hsn_sac_jtf.setEnabled(false);
        hsn_sac_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(hsn_sac_jtf, gridBagConstraints);

        jLabel13.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel13.setText("Tax :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 11;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel2.add(jLabel13, gridBagConstraints);

        tax_jtf.setEnabled(false);
        tax_jtf.setPreferredSize(new java.awt.Dimension(80, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 12;
        gridBagConstraints.gridy = 0;
        jPanel2.add(tax_jtf, gridBagConstraints);

        jLabel15.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel15.setText("Code :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(jLabel15, gridBagConstraints);

        code_jtf.setEnabled(false);
        code_jtf.setPreferredSize(new java.awt.Dimension(150, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel2.add(code_jtf, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 3, 5);
        jPanel1.add(jPanel2, gridBagConstraints);

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setPreferredSize(new java.awt.Dimension(942, 270));

        itemDetails_jt.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SNo", "Commodity/Item", "HSN/SAC", "Quantity", "Rate", "Unit", "Amount", "AmtBfrTax"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        itemDetails_jt.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        itemDetails_jt.setFillsViewportHeight(true);
        jScrollPane1.setViewportView(itemDetails_jt);
        if (itemDetails_jt.getColumnModel().getColumnCount() > 0) {
            itemDetails_jt.getColumnModel().getColumn(0).setMinWidth(60);
            itemDetails_jt.getColumnModel().getColumn(0).setPreferredWidth(60);
            itemDetails_jt.getColumnModel().getColumn(1).setMinWidth(200);
            itemDetails_jt.getColumnModel().getColumn(1).setPreferredWidth(200);
            itemDetails_jt.getColumnModel().getColumn(2).setMinWidth(250);
            itemDetails_jt.getColumnModel().getColumn(2).setPreferredWidth(250);
            itemDetails_jt.getColumnModel().getColumn(3).setMinWidth(100);
            itemDetails_jt.getColumnModel().getColumn(3).setPreferredWidth(100);
            itemDetails_jt.getColumnModel().getColumn(4).setMinWidth(100);
            itemDetails_jt.getColumnModel().getColumn(4).setPreferredWidth(100);
            itemDetails_jt.getColumnModel().getColumn(5).setMinWidth(100);
            itemDetails_jt.getColumnModel().getColumn(5).setPreferredWidth(100);
            itemDetails_jt.getColumnModel().getColumn(6).setMinWidth(108);
            itemDetails_jt.getColumnModel().getColumn(6).setPreferredWidth(108);
            itemDetails_jt.getColumnModel().getColumn(7).setMinWidth(0);
            itemDetails_jt.getColumnModel().getColumn(7).setPreferredWidth(0);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(jScrollPane1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(jSeparator1, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel7.setText("Packing and Forwarding Charges :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel7, gridBagConstraints);

        packingForwarding_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        packingForwarding_jtf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                packingForwarding_jtfKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(packingForwarding_jtf, gridBagConstraints);

        jLabel8.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel8.setText("Any Other Charges :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel8, gridBagConstraints);

        anyOtherCharges_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        anyOtherCharges_jtf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                anyOtherCharges_jtfKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(anyOtherCharges_jtf, gridBagConstraints);

        jLabel9.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel9.setText("Discount :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel9, gridBagConstraints);

        discount_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        discount_jtf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                discount_jtfKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(discount_jtf, gridBagConstraints);

        jPanel3.setBackground(new java.awt.Color(242, 242, 255));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabel10.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel10.setText("Total Amount :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel3.add(jLabel10, gridBagConstraints);

        grossTotal_jtf.setEditable(false);
        grossTotal_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel3.add(grossTotal_jtf, gridBagConstraints);

        cgst_jlbl.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        cgst_jlbl.setText("CGST(-) :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel3.add(cgst_jlbl, gridBagConstraints);

        cgst_jtf.setEditable(false);
        cgst_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel3.add(cgst_jtf, gridBagConstraints);

        sgst_jlbl.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        sgst_jlbl.setText("SGST(-) :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel3.add(sgst_jlbl, gridBagConstraints);

        sgst_jtf.setEditable(false);
        sgst_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel3.add(sgst_jtf, gridBagConstraints);

        jLabel14.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        jLabel14.setText("Total Invoice Value (Including Tax) :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel3.add(jLabel14, gridBagConstraints);

        netTotal_jtf.setEditable(false);
        netTotal_jtf.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        netTotal_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel3.add(netTotal_jtf, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridheight = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        jPanel1.add(jPanel3, gridBagConstraints);

        jPanel4.setBackground(new java.awt.Color(242, 242, 255));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        saveAndPrint_jb.setBackground(new java.awt.Color(185, 197, 31));
        saveAndPrint_jb.setText("Save&Print");
        saveAndPrint_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        saveAndPrint_jb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAndPrint_jbActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel4.add(saveAndPrint_jb, gridBagConstraints);

        clear_jb.setBackground(new java.awt.Color(86, 132, 191));
        clear_jb.setText("Clear");
        clear_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        clear_jb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clear_jbActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        jPanel4.add(clear_jb, gridBagConstraints);

        close_jb.setBackground(new java.awt.Color(86, 132, 191));
        close_jb.setText("Close");
        close_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        close_jb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                close_jbActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        jPanel4.add(close_jb, gridBagConstraints);

        printOnly_jb.setBackground(new java.awt.Color(86, 132, 191));
        printOnly_jb.setText("Print");
        printOnly_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        printOnly_jb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                printOnly_jbMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        jPanel4.add(printOnly_jb, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        jPanel1.add(jPanel4, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(jSeparator2, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        setBounds(0, 0, 983, 522);
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:
 
        formWindow_Opened();

        
    }//GEN-LAST:event_formInternalFrameOpened

    private void formWindow_Opened()
    {

        Dimension desktopSize = NewMDIApplication.desktopbg_jlbl.getSize();
        Dimension jInternalFrameSize = this.getSize();
        this.setLocation((desktopSize.width - jInternalFrameSize.width)/2,(desktopSize.height- jInternalFrameSize.height)/2);
        
        load_selectItem_jcb();
        SearchableCombobox searchableCombobox_1 = new SearchableCombobox(selectItem_jcb);
        ((JTextField)selectItem_jcb.getEditor().getEditorComponent()).addKeyListener(searchableCombobox_1);
        
        selectItem_jcb_ActionListener();
       
    }
    
    private void showItemDetails() {
        try {
            
            String itemName = ((JTextField)selectItem_jcb.getEditor().getEditorComponent()).getText();
            Invoice invoice = new Invoice();
            List<InvoiceItems_BLL> itemsDetList = invoice.getItemDetails(itemName);
            
            for (int i = 0; i < itemsDetList.size(); i++) {
                
                String item = itemsDetList.get(i).getItemname();
                String hsnSac = itemsDetList.get(i).getHsn_sac();
                String code = itemsDetList.get(i).getCode();
                String tax = itemsDetList.get(i).getTax();
                String unit = itemsDetList.get(i).getUnit();
                
                BigDecimal new_tax_bd = new BigDecimal(tax).divide(new BigDecimal("2")).setScale(2,RoundingMode.HALF_UP);
                
                String cgstString = "CGST("+new_tax_bd+"%) :";
                String sgstString = "SGST("+new_tax_bd+"%) :";
                cgst_jlbl.setText(cgstString);
                sgst_jlbl.setText(sgstString);
                code_jtf.setText(code);
                hsn_sac_jtf.setText(hsnSac);
                tax_jtf.setText(tax);
                ((JTextField)unit_jcb.getEditor().getEditorComponent()).setText(unit);
            }
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, "InvoiceAddItems: "+e);
        }
    }
    
    public void selectItem_jcb_ActionListener() {
        selectItem_jcb.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                showItemDetails();
            }
        });
    }
    
    public static InvoiceAddItems getInstance() // Method
    {
        if (MyInstance == null)
	{
            MyInstance = new InvoiceAddItems();
	}
        return MyInstance;
    }

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        // TODO add your handling code here:

        MyInstance = null;

    }//GEN-LAST:event_formInternalFrameClosed

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        // TODO add your handling code here:
        
         MyInstance = null;
        
    }//GEN-LAST:event_formInternalFrameClosing

    private void rate_jtfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rate_jtfKeyTyped
        // TODO add your handling code here:

        rate_jtf_KeyTyped(evt);

    }//GEN-LAST:event_rate_jtfKeyTyped

    private void rate_jtf_KeyTyped(java.awt.event.KeyEvent evt)
    {
        
        String rate = rate_jtf.getText();
        int lastindex = rate.lastIndexOf(".");
        
       //System.out.println(lastindex);
       
        char c = evt.getKeyChar();

        if(!(Character.isDigit(c)||(c==KeyEvent.VK_BACK_SPACE)||c==KeyEvent.VK_DELETE||evt.getKeyChar() == '.'))
        {
            //  evt.getKeyChar() == '.' does accept point when jtextfield accepts decimal number
            evt.consume();
            getToolkit().beep();
        
        }
        else if(lastindex >= 0 && !Character.isDigit(c))
        {
            
             evt.consume();
            
        }
        
    }
    
    private void rate_jtfKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rate_jtfKeyReleased
        // TODO add your handling code here:

        rate_jtf_KeyReleased(evt);

    }//GEN-LAST:event_rate_jtfKeyReleased

    private void rate_jtf_KeyReleased(java.awt.event.KeyEvent evt) {                                     
       
        if(!rate_jtf.getText().equals("") && !quantity_jtf.getText().equals(""))
        {

            BigDecimal rate_bd = new BigDecimal(rate_jtf.getText());
            BigDecimal qnty_db = new BigDecimal(quantity_jtf.getText());
            BigDecimal tax_bd = new BigDecimal(tax_jtf.getText());
            amount_db = (rate_bd.multiply(qnty_db)).setScale(2, RoundingMode.HALF_UP);
            BigDecimal percOfAmt_db = amount_db.multiply(tax_bd).divide(new BigDecimal("100")).setScale(2, RoundingMode.HALF_UP);;
            BigDecimal amtAftrAddingPerc = amount_db.add(percOfAmt_db);
            amount_jtf.setText(amtAftrAddingPerc.toString());

        }
        else if(!rate_jtf.getText().equals("") || !quantity_jtf.getText().equals(""))
        {
            amount_jtf.setText("");
        }

    }
    
    private void quantity_jtfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_quantity_jtfKeyTyped
        // TODO add your handling code here:

        quantity_jtf_KeyTyped(evt);

    }//GEN-LAST:event_quantity_jtfKeyTyped

    private void quantity_jtf_KeyTyped(java.awt.event.KeyEvent evt)
    {
        
        String qnty = quantity_jtf.getText();
        int lastindex = qnty.lastIndexOf(".");
        
       //System.out.println(lastindex);
       
        char c = evt.getKeyChar();

        if(!(Character.isDigit(c)||(c==KeyEvent.VK_BACK_SPACE)||c==KeyEvent.VK_DELETE||evt.getKeyChar() == '.'))
        {
            //  evt.getKeyChar() == '.' does accept point when jtextfield accepts decimal number
            evt.consume();
            getToolkit().beep();
        
        }
        else if(lastindex >= 0 && !Character.isDigit(c))
        {
            evt.consume();
        }
        
    }
    
    private void quantity_jtfKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_quantity_jtfKeyReleased
        // TODO add your handling code here:

        quantity_jtf_KeyReleased(evt);

    }//GEN-LAST:event_quantity_jtfKeyReleased

    private void quantity_jtf_KeyReleased(java.awt.event.KeyEvent evt)
    {
  
        if(!rate_jtf.getText().equals("") && !quantity_jtf.getText().equals(""))
        {

            BigDecimal rate_bd = new BigDecimal(rate_jtf.getText());
            BigDecimal qnty_db = new BigDecimal(quantity_jtf.getText());
            BigDecimal tax_bd = new BigDecimal(tax_jtf.getText());
            amount_db = (rate_bd.multiply(qnty_db)).setScale(2, RoundingMode.HALF_UP);
            BigDecimal percOfAmt_db = amount_db.multiply(tax_bd).divide(new BigDecimal("100")).setScale(2, RoundingMode.HALF_UP);;
            BigDecimal amtAftrAddingPerc = amount_db.add(percOfAmt_db);
            amount_jtf.setText(amtAftrAddingPerc.toString());

        }
        else if(!rate_jtf.getText().equals("") || !quantity_jtf.getText().equals(""))
        {
            amount_jtf.setText("");
        }
        
    }

    private void applyValues()
    {
        if(applyValues_jb.isEnabled() == true) {
            if(validationBeforeApply() == true)
            {
                DefaultTableModel dtm = (DefaultTableModel)itemDetails_jt.getModel();

                String item = ((JTextField)selectItem_jcb.getEditor().getEditorComponent()).getText();
                String rate = rate_jtf.getText();
                String hsn_sac = hsn_sac_jtf.getText();
                String quantity = quantity_jtf.getText();
                String unit = ((JTextField)unit_jcb.getEditor().getEditorComponent()).getText();
                String code = code_jtf.getText();
                //String amount = amount_jtf.getText();

                String[] strarr = new String[]{Integer.toString(dtm.getRowCount()+1), item, hsn_sac+"-"+code, quantity, rate, unit, amount_db.toString() };
                dtm.addRow(strarr);

                getTotalAmount();
                getNetAmount();

                applyValues_jb.setEnabled(false);
                new_jb.requestFocusInWindow();
            }
        }
        
    }
    
    private void packingForwarding_jtfKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_packingForwarding_jtfKeyReleased
        // TODO add your handling code here:
        //packingForwarding_jtf_KeyReleased();

    }//GEN-LAST:event_packingForwarding_jtfKeyReleased

    private void packingForwarding_jtf_KeyReleased()
    {
        
        getNetAmount();
        
    }
    
    private void anyOtherCharges_jtfKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_anyOtherCharges_jtfKeyReleased
        // TODO add your handling code here:
        //anyOtherCharges_jtf_KeyReleased();

    }//GEN-LAST:event_anyOtherCharges_jtfKeyReleased

    private void anyOtherCharges_jtf_KeyReleased()
    {
        
        getNetAmount();
        
    }
    
    private void discount_jtfKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_discount_jtfKeyReleased
        // TODO add your handling code here:
        //discount_jtf_KeyReleased();

    }//GEN-LAST:event_discount_jtfKeyReleased

    private void discount_jtf_KeyReleased()
    {
        getNetAmount();   
    }
    
    private void saveOnly_jb_MouseClicked()
    {
        saveData();   
    }
    
    private void close_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_close_jbActionPerformed
        // TODO add your handling code here:

        this.dispose();

    }//GEN-LAST:event_close_jbActionPerformed

    private void printOnly_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_printOnly_jbMouseClicked
        // TODO add your handling code here:

        printOnly_jb_MouseClicked();

    }//GEN-LAST:event_printOnly_jbMouseClicked

    private void applyValues_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyValues_jbActionPerformed
        // TODO add your handling code here:
        applyValues();
    }//GEN-LAST:event_applyValues_jbActionPerformed

    private void new_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_new_jbActionPerformed
        // TODO add your handling code here:
        newEntry();
        applyValues_jb.setEnabled(true);
    }//GEN-LAST:event_new_jbActionPerformed

    private void clear_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clear_jbActionPerformed
        // TODO add your handling code here:
        clearAll();
    }//GEN-LAST:event_clear_jbActionPerformed

    private void clearAll() {
        ((JTextField)selectItem_jcb.getEditor().getEditorComponent()).setText("");
        rate_jtf.setText("");
        hsn_sac_jtf.setText("");
        tax_jtf.setText("");
        quantity_jtf.setText("");
        amount_jtf.setText("");
        ((JTextField)unit_jcb.getEditor().getEditorComponent()).setText("");
        ((DefaultTableModel)itemDetails_jt.getModel()).setRowCount(0);
        packingForwarding_jtf.setText("");
        anyOtherCharges_jtf.setText("");
        discount_jtf.setText("");
        grossTotal_jtf.setText("");
        cgst_jtf.setText("");
        sgst_jtf.setText("");
        netTotal_jtf.setText("");
        ((JTextField)selectItem_jcb.getEditor().getEditorComponent()).requestFocusInWindow();
        saveAndPrint_jb.setEnabled(true);
    }
    
    private void saveAndPrint_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAndPrint_jbActionPerformed
        // TODO add your handling code here:
        if(saveAndPrint_jb.isEnabled() == true) {
            if(itemDetails_jt.getRowCount() == 0) {
                JOptionPane.showMessageDialog(this,"No data to save.","Error",JOptionPane.ERROR_MESSAGE);
            }
            else {
                saveData();
            }
        }
    }//GEN-LAST:event_saveAndPrint_jbActionPerformed

    private void newEntry() {
        ((JTextField)selectItem_jcb.getEditor().getEditorComponent()).setText("");
        rate_jtf.setText("");
        hsn_sac_jtf.setText("");
        tax_jtf.setText("");
        quantity_jtf.setText("");
        amount_jtf.setText("");
        ((JTextField)unit_jcb.getEditor().getEditorComponent()).setText("");
        ((JTextField)selectItem_jcb.getEditor().getEditorComponent()).requestFocusInWindow();
    }
    
    private void printOnly_jb_MouseClicked()
    {
        
        printBill();
        
    }

    private void saveData()
    {
        boolean error = false;
        try
        {
            
            DefaultTableModel dtm = (DefaultTableModel)itemDetails_jt.getModel();
            int rowCount = dtm.getRowCount();
            
            for (int i = 0; i < rowCount; i++) 
            {  
                 
                String invoice_no = invoiceNo;
                String invoice_date = invoiceDate;
                String purchase_order_no = purchaseOrderNo;
                String purchase_order_date = purchaseOrderDate;
                String mode_of_transport = modeOfTransport;
                String date_of_supply = dateOfSupply;
                String time_of_supplyString = timeOfSupply;
                String item_vendor_code = itemVendorCode;
                String vehicle_no = vehicleNo;
                String place_of_supply = placeOfSupply;
                String customer_name = cusName;
                String cus_addressline1String = cusAddressline1;
                String cus_addressline2 = cusAddressline2;
                String cus_state = cusState;
                String cus_state_code = cusStateCode;
                String cus_pan = cusPAN;
                String cus_gstin = cusGSTIN;
                String consignee_name = consName;
                String cons_addressline1 = consAddressline1;
                String cons_addressline2 = consAddressline2;
                String cons_state = consState;
                String cons_state_code = consStateCode;
                String cons_pan = consPAN;
                String cons_gstin = consGSTIN;
                String bank_name = bankName;
                String acc_no = accNo;
                String branch = bank_branch;
                String ifsc = iFSC;
                String e_way_bill_no = eWayBillNo;
                String electronic_ref_no = electronicRefNo;
                
                String item_name = dtm.getValueAt(i, 1).toString();
                String hsn_sac = dtm.getValueAt(i, 2).toString();
                String quantity = dtm.getValueAt(i, 3).toString();
                String rate = dtm.getValueAt(i, 4).toString();
                String unit = dtm.getValueAt(i, 5).toString();
                String amount = dtm.getValueAt(i, 6).toString();
                
                String packing_forwarding_charges = packingForwarding_jtf.getText();
                String any_other_charges = anyOtherCharges_jtf.getText();
                String discount = discount_jtf.getText();
                String sgst = sgst_jtf.getText();
                String cgst = cgst_jtf.getText();
                String net_amount = netTotal_jtf.getText();
                
                Invoice invoice = new Invoice();
                invoice.passInvoiceDataToSave(invoice_no, invoice_date, purchase_order_no, purchase_order_date, mode_of_transport, date_of_supply, time_of_supplyString, item_vendor_code, vehicle_no, place_of_supply, customer_name, cus_addressline1String, cus_addressline2, cus_state, cus_state_code, cus_pan, cus_gstin, consignee_name, cons_addressline1, cons_addressline2, cons_state, cons_state_code, cons_pan, cons_gstin, bank_name, acc_no, branch, ifsc, e_way_bill_no, electronic_ref_no, item_name, rate, hsn_sac, quantity, unit, net_amount, packing_forwarding_charges, any_other_charges, discount, sgst, cgst, net_amount);
                
            }
            
        }
        catch(Exception e)
        {
            
            JOptionPane.showMessageDialog(this, e);
            error = true;
            
        }
        
        if(error == false) {
            JOptionPane.showMessageDialog(this, "Operation Successful.", "Success", JOptionPane.INFORMATION_MESSAGE);
            saveAndPrint_jb.setEnabled(true);
            clear_jb.requestFocusInWindow();
            printBill();
        }
        
    }    

    public void getValues(String invoiceNo, String invoiceDate, String purchaseOrderNo, String purOrderDate, String modeOfTransport, String dateOfSupply, String timeOfSupply, String itemVendorCode, String vehicleNo, String placeOfSupply, String cusName, String cusAddressline1, String cusAddressline2, String cusState, String cusStateCode, String cusPAN, String cusGSTIN, String consName, String consAddressline1, String consAddressline2, String consState, String consStateCode, String consPAN, String consGSTIN, String bankName, String accNo, String branch, String iFSC, String eWayBillNo, String electronicRefNo, String phone1)
    {
        
        this.invoiceNo = invoiceNo;
        this.invoiceDate = invoiceDate;
        this.purchaseOrderNo = purchaseOrderNo;
        this.purchaseOrderDate = purOrderDate;
        this.modeOfTransport = modeOfTransport;
        this.dateOfSupply = dateOfSupply;
        this.timeOfSupply = timeOfSupply;
        this.itemVendorCode = itemVendorCode;
        this.vehicleNo = vehicleNo;
        this.placeOfSupply = placeOfSupply;
        this.cusName = cusName;
        this.cusAddressline1 = cusAddressline1;
        this.cusAddressline2 = cusAddressline2;
        this.cusState = cusState;
        this.cusStateCode = cusStateCode;
        this.cusPAN = cusPAN;
        this.cusGSTIN = cusGSTIN;
        this.consName = consName;
        this.consAddressline1 = consAddressline1;
        this.consAddressline2 = consAddressline2;
        this.consState = consState;
        this.consStateCode = consStateCode;
        this.consPAN = consPAN;
        this.consGSTIN = consGSTIN;
        this.bankName = bankName;
        this.accNo = accNo;
        this.bank_branch = branch;
        this.iFSC =  iFSC;
        this.eWayBillNo = eWayBillNo;
        this.electronicRefNo = electronicRefNo;
        this.phone1 = phone1;
        
    }
    
    private boolean validationBeforeApply()
    {
        
        boolean valid = true;
        
        if(selectItem_jcb.getSelectedItem() == null || selectItem_jcb.getSelectedItem().toString().equals(""))
        {
            
            JOptionPane.showMessageDialog(this, "Enter a valid Item.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        if(rate_jtf.getText().equals(""))
        {
            
            JOptionPane.showMessageDialog(this, "Specify the Rate.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        else if(hsn_sac_jtf.getText().equals(""))
        {
            
            JOptionPane.showMessageDialog(this, "Specify HSN/SAC.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        else if(quantity_jtf.getText().equals(""))
        {
            
            JOptionPane.showMessageDialog(this, "Specify Quantity.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        else if(((JTextField)unit_jcb.getEditor().getEditorComponent()).getText().equals(""))
        {
            
            JOptionPane.showMessageDialog(this, "Specify Unit.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        else if(amount_jtf.getText().equals(""))
        {
            
            JOptionPane.showMessageDialog(this, "Specify Amount.","Error",JOptionPane.ERROR_MESSAGE);
            valid = false;
            
        }
        
        return valid;
        
    }
    
    private void load_selectItem_jcb()
    {
        
        selectItem_jcb.removeAllItems();
        
        Invoice invoice = new Invoice();
        List itemList = invoice.getItemNames();
        
        for (int i = 0; i < itemList.size(); i++) 
        {
            selectItem_jcb.addItem(itemList.get(i).toString());   
        }
        
        ((JTextField)selectItem_jcb.getEditor().getEditorComponent()).setText("");
    }
    
    private void getTotalAmount()
    {
        
        try {
            
            
            DefaultTableModel dtm = (DefaultTableModel)itemDetails_jt.getModel();
            
            int rowCount = dtm.getRowCount();
            BigDecimal totalAmt_db = new BigDecimal(BigInteger.ZERO);
            BigDecimal totalAmtTemp_db = new BigDecimal(BigInteger.ZERO);
            
            for (int i = 0; i < rowCount; i++) {
                
                String amount = dtm.getValueAt(i, 6).toString();
                
                totalAmt_db = new BigDecimal(amount).add(totalAmtTemp_db);
                totalAmtTemp_db = totalAmt_db;
                
            }
            
            grossTotal_jtf.setText(totalAmtTemp_db.toString());
            
            
        } catch (Exception e) {
            
            JOptionPane.showMessageDialog(this, e);
            
        }
        
    }
    
    private void getNetAmount()
    {
        
        BigDecimal grossAmt_bd = new BigDecimal(grossTotal_jtf.getText());
        BigDecimal netAmt_bd = new BigDecimal(BigInteger.ZERO);
        BigDecimal temp_1 = new BigDecimal(BigInteger.ZERO);
        BigDecimal temp_2 = new BigDecimal(BigInteger.ZERO);
       
        BigDecimal packingForwardingCharges_bd = new BigDecimal(BigInteger.ZERO);
        BigDecimal otherCharges_bd = new BigDecimal(BigInteger.ZERO);
        BigDecimal discount_bd = new BigDecimal(BigInteger.ZERO);
        
//        BigDecimal tax_Percent_bd = new BigDecimal("12");
//        BigDecimal percent_db = new BigDecimal("100");
//        
//        //True:False:False
//        if(!packingForwarding_jtf.getText().equals("") && (anyOtherCharges_jtf.getText().equals("") && discount_jtf.getText().equals("")))
//        {
//            
//            packingForwardingCharges_bd = new BigDecimal(packingForwarding_jtf.getText());
//            netAmt_bd = grossAmt_bd.add(packingForwardingCharges_bd);
//            
//        }
//
//        //True:True:False
//        if((!packingForwarding_jtf.getText().equals("") && !anyOtherCharges_jtf.getText().equals("")) && discount_jtf.getText().equals(""))
//        {
//            
//            packingForwardingCharges_bd = new BigDecimal(packingForwarding_jtf.getText());
//            otherCharges_bd = new BigDecimal(anyOtherCharges_jtf.getText());
//            netAmt_bd = grossAmt_bd.add(temp_1.add(packingForwardingCharges_bd).add(otherCharges_bd));
//           
//            
//        }
//        
//        //True:True:True
//        if(!packingForwarding_jtf.getText().equals("") && !anyOtherCharges_jtf.getText().equals("") && !discount_jtf.getText().equals(""))
//        {
//            
//            packingForwardingCharges_bd = new BigDecimal(packingForwarding_jtf.getText());
//            otherCharges_bd = new BigDecimal(anyOtherCharges_jtf.getText());
//            discount_bd = new BigDecimal(discount_jtf.getText());
//            netAmt_bd = (grossAmt_bd.add(temp_1.add(packingForwardingCharges_bd).add(otherCharges_bd))).subtract(discount_bd);
//            
//        }
//        
//        //False:False:True
//        if(packingForwarding_jtf.getText().equals("") && anyOtherCharges_jtf.getText().equals("") && !discount_jtf.getText().equals(""))
//        {
//            
//            discount_bd = new BigDecimal(discount_jtf.getText());
//            netAmt_bd = grossAmt_bd.subtract(discount_bd);
//            
//        }
//        
//        //False:True:False
//        if(packingForwarding_jtf.getText().equals("") && !anyOtherCharges_jtf.getText().equals("") && discount_jtf.getText().equals(""))
//        {
//            
//            otherCharges_bd = new BigDecimal(anyOtherCharges_jtf.getText());
//            netAmt_bd = grossAmt_bd.add(otherCharges_bd);
//            
//        }
//        
//        //True:False:True
//        if(!packingForwarding_jtf.getText().equals("") && anyOtherCharges_jtf.getText().equals("") && !discount_jtf.getText().equals(""))
//        {
//            
//            packingForwardingCharges_bd = new BigDecimal(packingForwarding_jtf.getText());
//            discount_bd = new BigDecimal(discount_jtf.getText());
//            netAmt_bd = (grossAmt_bd.add(packingForwardingCharges_bd)).subtract(discount_bd);
//            
//        }
//        
//        //False:True:True
//        if(packingForwarding_jtf.getText().equals("") && !anyOtherCharges_jtf.getText().equals("") && !discount_jtf.getText().equals(""))
//        {
//            
//            otherCharges_bd = new BigDecimal(anyOtherCharges_jtf.getText());
//            discount_bd = new BigDecimal(discount_jtf.getText());
//            netAmt_bd = (grossAmt_bd.add(otherCharges_bd)).subtract(discount_bd);
//            
//        }
//
//        //False:False:False
//        if(packingForwarding_jtf.getText().equals("") && anyOtherCharges_jtf.getText().equals("") && discount_jtf.getText().equals(""))
//        {
//            
//            netAmt_bd = new BigDecimal(grossTotal_jtf.getText());
//            
//        }
        
        //BigDecimal amountAfterTax = ((netAmt_bd.multiply(tax_Percent_bd)).divide(percent_db));
        //BigDecimal netAmtAfterTax = netAmt_bd.add(amountAfterTax);
        
        BigDecimal new_tax_bd = new BigDecimal(tax_jtf.getText()).divide(new BigDecimal("2")).setScale(2,RoundingMode.HALF_UP);
        
        BigDecimal cgstAmt = (grossAmt_bd.multiply(new_tax_bd)).divide(new BigDecimal("100")).setScale(2,RoundingMode.HALF_UP);
        BigDecimal sgstAmt = (grossAmt_bd.multiply(new_tax_bd)).divide(new BigDecimal("100")).setScale(2,RoundingMode.HALF_UP);
   
        cgst_jtf.setText(cgstAmt.toString());
        sgst_jtf.setText(sgstAmt.toString());
        netTotal_jtf.setText(grossAmt_bd.add(cgstAmt.add(sgstAmt)).toString());

    }
    
    private void printBill()
    {
        
        try
        {
            
            addMoreRows();

            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd",Locale.getDefault());
            SimpleDateFormat sdf1 = new SimpleDateFormat("dd-MMM-yyyy",Locale.getDefault());

            DefaultTableModel model = (DefaultTableModel)itemDetails_jt.getModel();

            String source = "RegalOffsetPrinters_Invoice.jasper";
            InputStream is = getClass().getResourceAsStream(source);

            Map parameters = new HashMap();
            parameters.put("InvoiceNo", invoiceNo);
            parameters.put("InvoiceDate", sdf1.format(sdf.parse(invoiceDate)));
            parameters.put("PONumber",  purchaseOrderNo);
            if(purchaseOrderDate == null)
            {
                parameters.put("PODate",  "");
            }
            else
            {
                parameters.put("PODate",  sdf1.format(sdf.parse(purchaseOrderDate)));
            }
            parameters.put("ModeOfTransport", modeOfTransport);
            if(dateOfSupply == null)
            {
                parameters.put("DateOfSupply",  "");
            }
            else
            {
                parameters.put("DateOfSupply",  sdf1.format(sdf.parse(dateOfSupply)));
            } 
            if(timeOfSupply == null)
            {
                parameters.put("TimeOfSupply",  "");
            }
            else
            {
                 parameters.put("TimeOfSupply", timeOfSupply);
            }
            parameters.put("VendorCode",itemVendorCode);
            parameters.put("VehicleNo",vehicleNo);
            parameters.put("PlaceOfSupply",placeOfSupply);
            if(cusName == null)
            {
                parameters.put("CustomerName","");
            }
            else
            {
                parameters.put("CustomerName",cusName);
            }
            parameters.put("CusAddress",cusAddressline1+","+cusAddressline2);
            parameters.put("CusState",cusState);
            parameters.put("CusStateCode",cusStateCode);
            parameters.put("CusPhone1",phone1);
            parameters.put("CusGSTIN",cusGSTIN);
            if(consName == null)
            {
                parameters.put("ConsigneeName","");
            }
            else
            {
                parameters.put("ConsigneeName",consName);
            }
            parameters.put("ConAddress",consAddressline1+","+consAddressline2);
            parameters.put("ConsState",consState);
            parameters.put("ConsStateCode",consStateCode);
            parameters.put("ConsPAN",consPAN);
            parameters.put("ConsGSTIN",consGSTIN);
            parameters.put("EWayBillNo",eWayBillNo);
            parameters.put("EleReferanceNo",electronicRefNo);
            parameters.put("BankName",bankName);
            parameters.put("BankBranch",bank_branch);
            parameters.put("IFSCode",iFSC);
            parameters.put("BillAmount",grossTotal_jtf.getText());
            parameters.put("PackingForwardingCharges",packingForwarding_jtf.getText());
            parameters.put("OtherCharges",anyOtherCharges_jtf.getText());
            parameters.put("Discount",discount_jtf.getText());
            parameters.put("CgstTax",cgst_jlbl.getText());
            parameters.put("SgstTax",sgst_jlbl.getText());
            parameters.put("CGST",cgst_jtf.getText());
            parameters.put("SGST",sgst_jtf.getText());
            parameters.put("NetTotal",netTotal_jtf.getText());

            //Convert TotalAmt to words in Dirhams
            //String amount = amttopay_jtf.getText();
            String amount = netTotal_jtf.getText();
            int decimalindex = amount.indexOf(".");

            //System.out.println(decimalindex);

            String amtbeforedecimal = amount.substring(0, decimalindex);
            String amtafterdecimal = amount.substring(decimalindex+1);

            int amtbeforedecimal_int = Integer.parseInt(amtbeforedecimal);
            int amtafterdecimal_int = Integer.parseInt(amtafterdecimal);

            NumberToWords ntw1 = new NumberToWords();

            String amtbeforedecimal_words = ntw1.convert(amtbeforedecimal_int);
            String amtafterdecimal_words = ntw1.convert(amtafterdecimal_int);

            String amountinwords = "("+amtbeforedecimal_words+" Rupees "+amtafterdecimal_words+" Paise"+" Only)";
            parameters.put("amt_in_words",amountinwords);
            //parameters.put("logo", getClass().getResourceAsStream("Sharp_Logo.png"));

            JasperPrint print = JasperFillManager.fillReport(is, parameters, new JRTableModelDataSource(model));
            jv = new JasperViewer(print,false);
            jv.viewReport(print,false);

//            if(print != null)
//            {
//                
//            JasperPrintManager.printReport(print, true);
//           
//            }

            removeAdditionalRows();
            
        }
        catch(Exception ex)
        {
            
            JOptionPane.showMessageDialog(null, ex);
            
        }
        
    }
    
    private void addMoreRows()
    {
        String[] morerowsarr = null;
        initial_rowcnt = itemDetails_jt.getRowCount();
        if(initial_rowcnt < 18)
        {
            int addmorerows = 18 - initial_rowcnt;
            for(int i = 0 ; i < addmorerows ; i++)
            {
                
                morerowsarr = new String[]{"","","","","","","","","","","","","","","","","","","","","","",""};
                ((DefaultTableModel)itemDetails_jt.getModel()).addRow(morerowsarr);
                
            }
        }
        
    }
    
    private void removeAdditionalRows()
    {
        int current_rowcnt = itemDetails_jt.getRowCount();
        int rowstodelete = current_rowcnt-initial_rowcnt;
        for(int i = 0 ; i < rowstodelete ; i++)
        {
            //System.out.println(current_rowcnt = current_rowcnt - 1);
            ((DefaultTableModel)itemDetails_jt.getModel()).removeRow(current_rowcnt = current_rowcnt - 1); 
        }  
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField amount_jtf;
    private javax.swing.JTextField anyOtherCharges_jtf;
    private javax.swing.JButton applyValues_jb;
    private javax.swing.JLabel cgst_jlbl;
    private javax.swing.JTextField cgst_jtf;
    private javax.swing.JButton clear_jb;
    private javax.swing.JButton close_jb;
    private javax.swing.JTextField code_jtf;
    private javax.swing.JTextField discount_jtf;
    private javax.swing.JTextField grossTotal_jtf;
    private javax.swing.JTextField hsn_sac_jtf;
    private javax.swing.JTable itemDetails_jt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField netTotal_jtf;
    private javax.swing.JButton new_jb;
    private javax.swing.JTextField packingForwarding_jtf;
    private javax.swing.JButton printOnly_jb;
    private javax.swing.JTextField quantity_jtf;
    private javax.swing.JTextField rate_jtf;
    private javax.swing.JButton saveAndPrint_jb;
    private javax.swing.JComboBox<String> selectItem_jcb;
    private javax.swing.JLabel sgst_jlbl;
    private javax.swing.JTextField sgst_jtf;
    private javax.swing.JTextField tax_jtf;
    private javax.swing.JComboBox<String> unit_jcb;
    // End of variables declaration//GEN-END:variables
}
