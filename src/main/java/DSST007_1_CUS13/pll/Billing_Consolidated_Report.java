package DSST007_1_CUS13.pll;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.io.FileWriter;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import javax.swing.BorderFactory;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableModel;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author praveen
 */
public class Billing_Consolidated_Report extends javax.swing.JInternalFrame {

    private static Billing_Consolidated_Report billing_Report_Instance;
    
    public Billing_Consolidated_Report() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        saleratetotalamt_jtf = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        totalcount_jtf = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        billreporttable_jt = new javax.swing.JTable();
        writetoexcel_jb = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        fromdate_jdc = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        todate_jdc = new com.toedter.calendar.JDateChooser();
        searchby_jcb = new javax.swing.JComboBox();
        all_jchkbx = new javax.swing.JCheckBox();
        date_jchkbx = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255)));
        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Reports - > Consolidated Sales");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/DSST007_1_CUS13/InstabizTrader Logo Final 35x35.png"))); // NOI18N
        addInternalFrameListener(new javax.swing.event.InternalFrameListener()
        {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt)
            {
                formInternalFrameOpened(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt)
            {
                formInternalFrameClosing(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt)
            {
                formInternalFrameClosed(evt);
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt)
            {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt)
            {
            }
        });

        jPanel1.setBackground(new java.awt.Color(242, 242, 255));

        jPanel3.setBackground(new java.awt.Color(242, 242, 255));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabel4.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        jLabel4.setText("Total Amt :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 3, 0);
        jPanel3.add(jLabel4, gridBagConstraints);

        saleratetotalamt_jtf.setEditable(false);
        saleratetotalamt_jtf.setBackground(new java.awt.Color(255, 255, 153));
        saleratetotalamt_jtf.setFocusable(false);
        saleratetotalamt_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 5);
        jPanel3.add(saleratetotalamt_jtf, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        jLabel2.setText("Total Count :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 3, 0);
        jPanel3.add(jLabel2, gridBagConstraints);

        totalcount_jtf.setEditable(false);
        totalcount_jtf.setBackground(new java.awt.Color(255, 255, 153));
        totalcount_jtf.setFocusable(false);
        totalcount_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 2, 0);
        jPanel3.add(totalcount_jtf, gridBagConstraints);

        jPanel4.setBackground(new java.awt.Color(242, 242, 255));
        jPanel4.setFocusable(false);
        jPanel4.setLayout(new java.awt.BorderLayout());

        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setPreferredSize(new java.awt.Dimension(900, 385));

        billreporttable_jt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        billreporttable_jt.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "SNo", "BillNo", "BillDate", "NetAmount"
            }
        )
        {
            boolean[] canEdit = new boolean []
            {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        billreporttable_jt.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        billreporttable_jt.setFillsViewportHeight(true);
        billreporttable_jt.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        billreporttable_jt.setRowHeight(23);
        billreporttable_jt.setSelectionBackground(new java.awt.Color(86, 132, 191));
        billreporttable_jt.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                billreporttable_jtKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(billreporttable_jt);
        if (billreporttable_jt.getColumnModel().getColumnCount() > 0)
        {
            billreporttable_jt.getColumnModel().getColumn(0).setMinWidth(50);
            billreporttable_jt.getColumnModel().getColumn(0).setPreferredWidth(50);
            billreporttable_jt.getColumnModel().getColumn(1).setMinWidth(100);
            billreporttable_jt.getColumnModel().getColumn(1).setPreferredWidth(100);
            billreporttable_jt.getColumnModel().getColumn(2).setMinWidth(100);
            billreporttable_jt.getColumnModel().getColumn(2).setPreferredWidth(100);
            billreporttable_jt.getColumnModel().getColumn(3).setMinWidth(100);
            billreporttable_jt.getColumnModel().getColumn(3).setPreferredWidth(100);
        }
        billreporttable_jt.getAccessibleContext().setAccessibleName("");

        jPanel4.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        writetoexcel_jb.setBackground(new java.awt.Color(86, 132, 191));
        writetoexcel_jb.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        writetoexcel_jb.setText("Write to Excel");
        writetoexcel_jb.setPreferredSize(new java.awt.Dimension(125, 20));
        writetoexcel_jb.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseEntered(java.awt.event.MouseEvent evt)
            {
                writetoexcel_jbMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt)
            {
                writetoexcel_jbMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt)
            {
                writetoexcel_jbMousePressed(evt);
            }
        });
        writetoexcel_jb.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                writetoexcel_jbKeyPressed(evt);
            }
        });

        jPanel8.setBackground(new java.awt.Color(242, 242, 255));
        jPanel8.setLayout(new java.awt.GridBagLayout());

        jLabel9.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel9.setText("From :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel8.add(jLabel9, gridBagConstraints);

        fromdate_jdc.setBackground(new java.awt.Color(242, 242, 255));
        fromdate_jdc.setDateFormatString("d-MMM-yyyy");
        fromdate_jdc.setPreferredSize(new java.awt.Dimension(140, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel8.add(fromdate_jdc, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel1.setText("To :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 0);
        jPanel8.add(jLabel1, gridBagConstraints);

        todate_jdc.setBackground(new java.awt.Color(242, 242, 255));
        todate_jdc.setDateFormatString("d-MMM-yyyy");
        todate_jdc.setPreferredSize(new java.awt.Dimension(140, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        jPanel8.add(todate_jdc, gridBagConstraints);

        searchby_jcb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-Search By-", "Billed", "Cancelled" }));
        searchby_jcb.setPreferredSize(new java.awt.Dimension(150, 25));
        searchby_jcb.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                searchby_jcbActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
        jPanel8.add(searchby_jcb, gridBagConstraints);

        all_jchkbx.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        all_jchkbx.setText("All");
        all_jchkbx.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                all_jchkbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel8.add(all_jchkbx, gridBagConstraints);

        date_jchkbx.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        date_jchkbx.setText("Date");
        date_jchkbx.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                date_jchkbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel8.add(date_jchkbx, gridBagConstraints);

        jButton1.setBackground(new java.awt.Color(185, 197, 31));
        jButton1.setText("Search >>");
        jButton1.setPreferredSize(new java.awt.Dimension(100, 27));
        jButton1.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mousePressed(java.awt.event.MouseEvent evt)
            {
                jButton1MousePressed(evt);
            }
        });
        jButton1.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                jButton1KeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 10);
        jPanel8.add(jButton1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(30, 10, 10, 10);
        jPanel8.add(jSeparator1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel8.add(jSeparator2, gridBagConstraints);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(writetoexcel_jb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 463, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(writetoexcel_jb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, 0)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel2.setBackground(new java.awt.Color(242, 242, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jButton3.setBackground(new java.awt.Color(86, 132, 191));
        jButton3.setMnemonic('s');
        jButton3.setText("Close");
        jButton3.setPreferredSize(new java.awt.Dimension(100, 27));
        jButton3.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton3ActionPerformed(evt);
            }
        });
        jButton3.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                jButton3KeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 15, 0);
        jPanel2.add(jButton3, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        setBounds(0, 0, 579, 572);
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:

        Dimension desktopSize = NewMDIApplication.desktopbg_jlbl.getSize();
        Dimension jInternalFrameSize = this.getSize();
        this.setLocation((desktopSize.width - jInternalFrameSize.width)/2,(desktopSize.height- jInternalFrameSize.height)/2);
        
        //--------------------

        ((JTextField) fromdate_jdc.getDateEditor().getUiComponent()).setEditable(false);

        jScrollPane2.getVerticalScrollBar().setUnitIncrement(12);

        getFirstBillDate();
     
        todate_jdc.setDate(new Date());
        
        searchby_jcb.requestFocusInWindow();
        
        searchby_jcb.setSelectedItem("Billed");
        date_jchkbx.setSelected(true);
        
        billreporttable_jt.setFocusTraversalKeysEnabled(false);

    }//GEN-LAST:event_formInternalFrameOpened

    public static Billing_Consolidated_Report getInstance() // Method
    {
        if (billing_Report_Instance == null)
	{
            billing_Report_Instance = new Billing_Consolidated_Report();
	}
        return billing_Report_Instance;
    }
    
    private void getFirstBillDate()
    {
        
        Connection con = DatabaseConnection.createConnection();

        try {

            SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
            SimpleDateFormat sdf2 = new SimpleDateFormat("dd-MM-yyyy", Locale.getDefault());

            Date stockdateval;

            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * FROM billing");

            if (rs.first()) {

                String stockdate = rs.getString("bill_date");
                stockdateval = sdf2.parse(sdf2.format(sdf1.parse(stockdate)));
                fromdate_jdc.setDate(stockdateval);

            }

        } catch (Exception e) {

            JOptionPane.showMessageDialog(null, e);

        } finally {

            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex);
                }

            }

        }

        
    }
    
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:

        this.dispose();

    }//GEN-LAST:event_jButton3ActionPerformed

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        // TODO add your handling code here:

        billing_Report_Instance = null;

    }//GEN-LAST:event_formInternalFrameClosed

    private void getBillingDetails()
    {
        
        Connection con = DatabaseConnection.createConnection();

        try {
            if (((JTextField) fromdate_jdc.getDateEditor().getUiComponent()).getText().equals("")) {

                JOptionPane.showMessageDialog(this, "Please specify From Date.", "Error", JOptionPane.ERROR_MESSAGE);

            } else if (((JTextField) todate_jdc.getDateEditor().getUiComponent()).getText().equals("")) {

                JOptionPane.showMessageDialog(this, "Please specify To Date.", "Error", JOptionPane.ERROR_MESSAGE);

            } else if (todate_jdc.getDate().compareTo(fromdate_jdc.getDate()) == -1) {

                JOptionPane.showMessageDialog(this, "'From Date' should be lower than 'To Date'.", "Error", JOptionPane.ERROR_MESSAGE);

            } else if (searchby_jcb.getSelectedItem().toString().equals("-Search By-")) {

                JOptionPane.showMessageDialog(this, "Please specify a Search Option.", "Error", JOptionPane.ERROR_MESSAGE);

            }
            else if(all_jchkbx.isSelected() == false && date_jchkbx.isSelected() == false)
            {
                
                JOptionPane.showMessageDialog(this, "Select All/Date.", "Error", JOptionPane.ERROR_MESSAGE);
                
            }
            else 
            {

                SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
                SimpleDateFormat sdf2 = new SimpleDateFormat("dd-MM-yyyy", Locale.getDefault());
                DefaultTableModel jTableModel1 = (DefaultTableModel) billreporttable_jt.getModel();

                String fromdate = sdf1.format(fromdate_jdc.getDate());
                String todate = sdf1.format(todate_jdc.getDate());
                
                Statement stmt = con.createStatement();
                Statement stmt_2 = con.createStatement();
 
                String sql = null;
                
                if (searchby_jcb.getSelectedItem().toString().equals("Billed") && all_jchkbx.isSelected() == true) 
                {
                 
                    sql = "SELECT DISTINCT bill_no,bill_date,net_amount FROM billing WHERE status='billed' ";
                    
                }  
                else if (searchby_jcb.getSelectedItem().toString().equals("Billed") && date_jchkbx.isSelected() == true) 
                {
                 
                    sql = "SELECT DISTINCT bill_no,bill_date,net_amount FROM billing WHERE bill_date BETWEEN '" + fromdate + "' AND '" + todate + "' AND status='billed' ";
                    
                }  
                else if (searchby_jcb.getSelectedItem().toString().equals("Cancelled") && all_jchkbx.isSelected() == true) 
                {
                 
                    sql = "SELECT DISTINCT bill_no,bill_date,net_amount FROM billing WHERE status='cancelled' ";
                    
                }  
                else if (searchby_jcb.getSelectedItem().toString().equals("Cancelled") && date_jchkbx.isSelected() == true) 
                {
                 
                    sql = "SELECT DISTINCT bill_no,bill_date,net_amount FROM billing WHERE bill_date BETWEEN '" + fromdate + "' AND '" + todate + "' AND status='cancelled' ";
                    
                }  
                    
                    jTableModel1.setRowCount(0);

                    String[] strarr = null;
                    
                    ResultSet rs = stmt.executeQuery(sql);
                  
                    BigDecimal amount_temp2 = new BigDecimal("0"); 
                    BigDecimal qntynexval = new BigDecimal("0");

                    while (rs.next()) {

                        String billno = rs.getString("bill_no");
                        Date billdate = rs.getDate("bill_date");
                        String billdatestr = sdf2.format(billdate);
                        String net_amt = rs.getString("net_amount");
                      
                        int rowcnt = billreporttable_jt.getRowCount()+1;

                        strarr = new String[]{Integer.toString(rowcnt),billno,billdatestr,net_amt};

                        jTableModel1.addRow(strarr);

                        String itemcount = Integer.toString(rowcnt);
                        totalcount_jtf.setText(itemcount);

                        BigDecimal netamoutvalue = new BigDecimal(net_amt).add(amount_temp2);
                        amount_temp2 = netamoutvalue;
                        saleratetotalamt_jtf.setText(netamoutvalue.toString());
                            
                       
                    }

            }

        } catch (Exception e) {

            JOptionPane.showMessageDialog(null, e);

        } finally {

            if (con != null) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex);
                }

            }

        }
        
    }
    
    private void searchby_jcbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchby_jcbActionPerformed
        // TODO add your handling code here:

        try {
            
                if(searchby_jcb.getSelectedItem()!=null)
                {
                    if (((JTextField) fromdate_jdc.getDateEditor().getUiComponent()).getText().equals("")) {

                        JOptionPane.showMessageDialog(this, "Please specify From Date.", "Error", JOptionPane.ERROR_MESSAGE);

                    } else if (((JTextField) todate_jdc.getDateEditor().getUiComponent()).getText().equals("")) {

                        JOptionPane.showMessageDialog(this, "Please specify To Date.", "Error", JOptionPane.ERROR_MESSAGE);

                    } else if (todate_jdc.getDate().compareTo(fromdate_jdc.getDate()) == -1) {

                        JOptionPane.showMessageDialog(this, "'From Date' should be lower than 'To Date'.", "Error", JOptionPane.ERROR_MESSAGE);

                    } else {
                        if (searchby_jcb.getSelectedItem().toString().equals("All")) {
                            
                           ((DefaultTableModel) billreporttable_jt.getModel()).setRowCount(0);
                            totalcount_jtf.setText("");
                            saleratetotalamt_jtf.setText("");

                        }
                        
                    }
                }
        } catch (Exception e) {

            JOptionPane.showMessageDialog(null, e);

        }


    }//GEN-LAST:event_searchby_jcbActionPerformed

    private void writeToExcel()
    {
        
        try
        {
        
            if(billreporttable_jt.getRowCount()==0)
            {

                JOptionPane.showMessageDialog(this,"There are no table data to export.","Error",JOptionPane.ERROR_MESSAGE);

            }
            else
            {

                SimpleDateFormat sdf1 = new SimpleDateFormat("dd-MMM-yyyy",Locale.getDefault());
                
                String filename = "Sales_Report-From_" + sdf1.format(fromdate_jdc.getDate()) + "_To_" + sdf1.format(todate_jdc.getDate());
                
                JFileChooser fileChooser = new JFileChooser();
                fileChooser.setSelectedFile(new File(filename+".xls"));
                FileNameExtensionFilter filter = new FileNameExtensionFilter("Microsoft Excel", ".xls");
                fileChooser.addChoosableFileFilter(filter);
//                fileChooser.setAcceptAllFileFilterUsed(false);
               
                FileWriter fw = null;

                fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
                //System.out.println(new File(System.getProperty("user.dir")));
                
                int result = fileChooser.showSaveDialog(this);
                if (result == JFileChooser.APPROVE_OPTION) 
                {
                    File path = fileChooser.getSelectedFile();
                    
                    if(path!=null)
                    {

                        fw = new FileWriter(path);
                        
                        fw.write("\n");

                        TableModel tm = billreporttable_jt.getModel();

                        for (int i = 0; i < tm.getColumnCount(); i++) {
                            
                           // if(i!=9)
                           // {
                                fw.write(tm.getColumnName(i) + "\t");
                               
                           // }    
                        }

                        fw.write("\n");

                        for (int i = 0; i < tm.getRowCount(); i++) {
                            for (int j = 0; j < tm.getColumnCount(); j++) {   
                                //if(j!=9)
                               // {
                                    
                                    String cellValue;
                                    
                                    if(tm.getValueAt(i, j)!=null)
                                    {
                                     
                                        cellValue = tm.getValueAt(i, j).toString();
                                        
                                    }
                                    else
                                    {
                                        
                                        cellValue = "";
                                        
                                    }

                                    fw.write(cellValue + "\t");
                                    
                               // }
                            }
                            fw.write("\n");
                        }
                    }
        
                   fw.close();
                }
            }
            
        }
        catch(Exception e)
        {
            
             JOptionPane.showMessageDialog(null,e);
            
        }
        
    }
    
    private void jButton1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MousePressed
        // TODO add your handling code here:
        
        getBillingDetails();
        
    }//GEN-LAST:event_jButton1MousePressed

    private void jButton1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton1KeyPressed
        // TODO add your handling code here:
     
        if(evt.getKeyCode()==KeyEvent.VK_ENTER)
        {
            
             getBillingDetails();
            
        }
       
    }//GEN-LAST:event_jButton1KeyPressed

    private void jButton3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton3KeyPressed
        // TODO add your handling code here:
        
         this.dispose();
        
    }//GEN-LAST:event_jButton3KeyPressed

    private void writetoexcel_jbMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_writetoexcel_jbMousePressed
        // TODO add your handling code here:
        
        writeToExcel();
        
    }//GEN-LAST:event_writetoexcel_jbMousePressed

    private void writetoexcel_jbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_writetoexcel_jbKeyPressed
        // TODO add your handling code here:
        
        if(evt.getKeyCode()==KeyEvent.VK_ENTER)
        {
            
            writeToExcel();
            
        }
        
    }//GEN-LAST:event_writetoexcel_jbKeyPressed

    private void writetoexcel_jbMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_writetoexcel_jbMouseEntered
        // TODO add your handling code here:
        
        writetoexcel_jb.setForeground(Color.RED);
        
    }//GEN-LAST:event_writetoexcel_jbMouseEntered

    private void writetoexcel_jbMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_writetoexcel_jbMouseExited
        // TODO add your handling code here:
        
        writetoexcel_jb.setForeground(Color.BLACK);
        
    }//GEN-LAST:event_writetoexcel_jbMouseExited

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        // TODO add your handling code here:
        
        billing_Report_Instance = null;
        
    }//GEN-LAST:event_formInternalFrameClosing

    private void date_jchkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_date_jchkbxActionPerformed
        // TODO add your handling code here:
        
        if(date_jchkbx.isSelected() == true)
        {
            
            fromdate_jdc.setEnabled(true);
            todate_jdc.setEnabled(true);
            
            all_jchkbx.setSelected(false);
            
        }
        
    }//GEN-LAST:event_date_jchkbxActionPerformed

    private void all_jchkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_all_jchkbxActionPerformed
        // TODO add your handling code here:

        if(all_jchkbx.isSelected() == true)
        {

            fromdate_jdc.setEnabled(false);
            todate_jdc.setEnabled(false);

            date_jchkbx.setSelected(false);

        }

    }//GEN-LAST:event_all_jchkbxActionPerformed

    private void billreporttable_jtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_billreporttable_jtKeyPressed
        // TODO add your handling code here:
        
        if(evt.getKeyCode() == KeyEvent.VK_TAB)
        {
            
            writetoexcel_jb.requestFocusInWindow();
            
        }
        
    }//GEN-LAST:event_billreporttable_jtKeyPressed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox all_jchkbx;
    public static javax.swing.JTable billreporttable_jt;
    private javax.swing.JCheckBox date_jchkbx;
    private com.toedter.calendar.JDateChooser fromdate_jdc;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    public static javax.swing.JTextField saleratetotalamt_jtf;
    public static javax.swing.JComboBox searchby_jcb;
    private com.toedter.calendar.JDateChooser todate_jdc;
    private javax.swing.JTextField totalcount_jtf;
    private javax.swing.JButton writetoexcel_jb;
    // End of variables declaration//GEN-END:variables
}
