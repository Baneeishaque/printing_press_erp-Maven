package DSST007_1_CUS13.pll;

import DSST007_1_CUS13.bll.WorkOrder;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.InputStream;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import javax.imageio.ImageIO;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.filechooser.FileNameExtensionFilter;
import ndk.printing_press.bll.CustomerBLL;
import ndk.printing_press.bll.ManufacturBLL;
import ndk.printing_press.bll.WorkOrderBLL;
import ndk.printing_press.model.CustomerModal;
import ndk.printing_press.model.ManufacturerModal;
import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author praveen
 */
public class WorkOrderEdit extends javax.swing.JInternalFrame {

    private static WorkOrderEdit MyInstance;
    File imagefile;
    BufferedImage imageFromDB = null;
    String imageFormat;

    public WorkOrderEdit() {
        initComponents();

        orderDate_jdc.setDate(new Date());
        //setNilForColours();
        jScrollPane1.getVerticalScrollBar().setUnitIncrement(12);
        plateCharge_jcb_KeyListener();
        gsm_jcb_KeyListener();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        orderDate_jdc = new com.toedter.calendar.JDateChooser();
        jPanel2 = new javax.swing.JPanel();
        demi_jchkbx = new javax.swing.JRadioButton();
        doubleDemi_jchkbx = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        colourAndPlate_jcb = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        colour1_jcb = new javax.swing.JComboBox<>();
        colour2_jcb = new javax.swing.JComboBox<>();
        colour3_jcb = new javax.swing.JComboBox<>();
        colour4_jcb = new javax.swing.JComboBox<>();
        jLabel20 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        cyanDefault_jb = new javax.swing.JButton();
        magentaDefault_jb = new javax.swing.JButton();
        yellowDefault_jb = new javax.swing.JButton();
        blackDefault_jb = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        sheets_jtf = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        gsm_jcb = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        length_jtf = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        width_jtf = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        plate_jcb = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        design_jcb = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        supplier_jcb = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        deliveryTime_jtf = new javax.swing.JTextField();
        am_pm_jcb = new javax.swing.JComboBox<>();
        deliveryDate_jdc = new com.toedter.calendar.JDateChooser();
        jLabel15 = new javax.swing.JLabel();
        rate_jtf = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        printerNote_jtf = new javax.swing.JTextField();
        cutterNote_jtf = new javax.swing.JTextField();
        deliveryNote_jtf = new javax.swing.JTextField();
        photo_jlbl = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        customer_jcb = new javax.swing.JComboBox<>();
        jLabel21 = new javax.swing.JLabel();
        deliveryBy_jcb = new javax.swing.JComboBox<>();
        jPanel6 = new javax.swing.JPanel();
        jLabel25 = new javax.swing.JLabel();
        workOrders_jcb = new javax.swing.JComboBox<>();
        showWorkOrderDetails_jb = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JSeparator();
        jLabel26 = new javax.swing.JLabel();
        jobName_jcb = new javax.swing.JComboBox<>();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator7 = new javax.swing.JSeparator();
        jLabel27 = new javax.swing.JLabel();
        mfrname_jcb = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        plateCharge_jcb = new javax.swing.JComboBox<>();
        designCharge_jtf = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        printSheetsCnt_jtf = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        finalShtsCnt_jtf = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        browseImage_jb = new javax.swing.JButton();
        removeImage_jb = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        updateWorkOrder_jb = new javax.swing.JButton();
        newData_jb = new javax.swing.JButton();
        closeWindow_jb = new javax.swing.JButton();
        print_jb = new javax.swing.JButton();
        print_jb1 = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255)));
        setClosable(true);
        setTitle("View/Edit > Print Work Order");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/DSST007_1_CUS13/InstabizTrader Logo Final 35x35.png"))); // NOI18N
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(242, 242, 255));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel3.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel3.setText("Customer :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel1.add(jLabel3, gridBagConstraints);

        orderDate_jdc.setBackground(new java.awt.Color(242, 242, 255));
        orderDate_jdc.setDateFormatString("dd-MMM-yyyy");
        orderDate_jdc.setPreferredSize(new java.awt.Dimension(140, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel1.add(orderDate_jdc, gridBagConstraints);

        jPanel2.setBackground(new java.awt.Color(242, 242, 255));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        demi_jchkbx.setBackground(new java.awt.Color(242, 242, 255));
        demi_jchkbx.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        demi_jchkbx.setText("Demi");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel2.add(demi_jchkbx, gridBagConstraints);

        doubleDemi_jchkbx.setBackground(new java.awt.Color(242, 242, 255));
        doubleDemi_jchkbx.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        doubleDemi_jchkbx.setText("Double Demi");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel2.add(doubleDemi_jchkbx, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 2, 3, 0);
        jPanel1.add(jPanel2, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel4.setText("Colour & Plate :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel4, gridBagConstraints);

        colourAndPlate_jcb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Select-", "Single Colour", "Two Colour", "Three Colour", "Multi Colour" }));
        colourAndPlate_jcb.setPreferredSize(new java.awt.Dimension(170, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel1.add(colourAndPlate_jcb, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel5.setText("Select Colour :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel1.add(jLabel5, gridBagConstraints);

        jPanel3.setBackground(new java.awt.Color(242, 242, 255));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        colour1_jcb.setEditable(true);
        colour1_jcb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nil", "Normal", "Red", "Yellow", "Green", "White", "Cyan", "Magenta", "Blue", " " }));
        colour1_jcb.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel3.add(colour1_jcb, gridBagConstraints);

        colour2_jcb.setEditable(true);
        colour2_jcb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nil", "Normal", "Red", "Yellow", "Green", "White", "Cyan", "Magenta", "Blue" }));
        colour2_jcb.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel3.add(colour2_jcb, gridBagConstraints);

        colour3_jcb.setEditable(true);
        colour3_jcb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nil", "Normal", "Red", "Yellow", "Green", "White", "Cyan", "Magenta", "Blue" }));
        colour3_jcb.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel3.add(colour3_jcb, gridBagConstraints);

        colour4_jcb.setEditable(true);
        colour4_jcb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nil", "Normal", "Red", "Yellow", "Green", "White", "Cyan", "Magenta", "Blue" }));
        colour4_jcb.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel3.add(colour4_jcb, gridBagConstraints);

        jLabel20.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel20.setText("Cyan");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel3.add(jLabel20, gridBagConstraints);

        jLabel22.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel22.setText("Magenta");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel3.add(jLabel22, gridBagConstraints);

        jLabel23.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel23.setText("Yellow");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel3.add(jLabel23, gridBagConstraints);

        jLabel24.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel24.setText("Black");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel3.add(jLabel24, gridBagConstraints);

        cyanDefault_jb.setText("Default");
        cyanDefault_jb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cyanDefault_jbActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        jPanel3.add(cyanDefault_jb, gridBagConstraints);

        magentaDefault_jb.setText("Default");
        magentaDefault_jb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                magentaDefault_jbActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        jPanel3.add(magentaDefault_jb, gridBagConstraints);

        yellowDefault_jb.setText("Default");
        yellowDefault_jb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yellowDefault_jbActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        jPanel3.add(yellowDefault_jb, gridBagConstraints);

        blackDefault_jb.setText("Default");
        blackDefault_jb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blackDefault_jbActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        jPanel3.add(blackDefault_jb, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jPanel3, gridBagConstraints);

        jLabel6.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel6.setText("Sheets :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel6, gridBagConstraints);

        sheets_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        sheets_jtf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                sheets_jtfKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel1.add(sheets_jtf, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel7.setText("GSM :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel1.add(jLabel7, gridBagConstraints);

        gsm_jcb.setEditable(true);
        gsm_jcb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "110" }));
        gsm_jcb.setPreferredSize(new java.awt.Dimension(100, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel1.add(gsm_jcb, gridBagConstraints);

        jLabel8.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel8.setText("Length :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel8, gridBagConstraints);

        length_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        length_jtf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                length_jtfKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel1.add(length_jtf, gridBagConstraints);

        jLabel9.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel9.setText("Width :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel1.add(jLabel9, gridBagConstraints);

        width_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        width_jtf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                width_jtfKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel1.add(width_jtf, gridBagConstraints);

        jLabel10.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel10.setText("Plate :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel10, gridBagConstraints);

        plate_jcb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Select-", "Old", "New" }));
        plate_jcb.setPreferredSize(new java.awt.Dimension(100, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel1.add(plate_jcb, gridBagConstraints);

        jLabel11.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel11.setText("Design :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel1.add(jLabel11, gridBagConstraints);

        design_jcb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Select-", "Yes", "No" }));
        design_jcb.setPreferredSize(new java.awt.Dimension(100, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel1.add(design_jcb, gridBagConstraints);

        jLabel12.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel12.setText("Supplier :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel12, gridBagConstraints);

        supplier_jcb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Select-", "Richa Combines", "Party" }));
        supplier_jcb.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel1.add(supplier_jcb, gridBagConstraints);

        jLabel13.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel13.setText("Manufacturer :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel13, gridBagConstraints);

        jLabel14.setText("Delivery On :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 19;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel14, gridBagConstraints);

        jPanel4.setBackground(new java.awt.Color(242, 242, 255));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        deliveryTime_jtf.setPreferredSize(new java.awt.Dimension(80, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel4.add(deliveryTime_jtf, gridBagConstraints);

        am_pm_jcb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AM", "PM" }));
        am_pm_jcb.setPreferredSize(new java.awt.Dimension(55, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        jPanel4.add(am_pm_jcb, gridBagConstraints);

        deliveryDate_jdc.setBackground(new java.awt.Color(242, 242, 255));
        deliveryDate_jdc.setDateFormatString("dd-MMM-yyyy");
        deliveryDate_jdc.setPreferredSize(new java.awt.Dimension(140, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel4.add(deliveryDate_jdc, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 19;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel1.add(jPanel4, gridBagConstraints);

        jLabel15.setText("Rate :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel15, gridBagConstraints);

        rate_jtf.setPreferredSize(new java.awt.Dimension(100, 27));
        rate_jtf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                rate_jtfKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel1.add(rate_jtf, gridBagConstraints);

        jLabel16.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel16.setText("Printer Note :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel16, gridBagConstraints);

        jLabel17.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel17.setText("Cutter Note :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 21;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel17, gridBagConstraints);

        jLabel18.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel18.setText("Delivery Note :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 22;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 10, 0);
        jPanel1.add(jLabel18, gridBagConstraints);

        printerNote_jtf.setPreferredSize(new java.awt.Dimension(300, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel1.add(printerNote_jtf, gridBagConstraints);

        cutterNote_jtf.setPreferredSize(new java.awt.Dimension(300, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 21;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel1.add(cutterNote_jtf, gridBagConstraints);

        deliveryNote_jtf.setPreferredSize(new java.awt.Dimension(300, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 22;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 10, 0);
        jPanel1.add(deliveryNote_jtf, gridBagConstraints);

        photo_jlbl.setBackground(new java.awt.Color(255, 255, 255));
        photo_jlbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        photo_jlbl.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        photo_jlbl.setPreferredSize(new java.awt.Dimension(560, 430));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 17;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanel1.add(photo_jlbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 3, 0);
        jPanel1.add(jSeparator2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 0);
        jPanel1.add(jSeparator3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 0);
        jPanel1.add(jSeparator4, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 0);
        jPanel1.add(jSeparator5, gridBagConstraints);

        customer_jcb.setEditable(true);
        customer_jcb.setPreferredSize(new java.awt.Dimension(250, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 2, 0, 0);
        jPanel1.add(customer_jcb, gridBagConstraints);

        jLabel21.setText("Delivery By :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 18;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel21, gridBagConstraints);

        deliveryBy_jcb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Select-", "Richa Combines", "Party" }));
        deliveryBy_jcb.setPreferredSize(new java.awt.Dimension(250, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 18;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel1.add(deliveryBy_jcb, gridBagConstraints);

        jPanel6.setBackground(new java.awt.Color(242, 242, 255));
        jPanel6.setLayout(new java.awt.GridBagLayout());

        jLabel25.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel25.setText("Select Work Orders :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel6.add(jLabel25, gridBagConstraints);

        workOrders_jcb.setEditable(true);
        workOrders_jcb.setPreferredSize(new java.awt.Dimension(170, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        jPanel6.add(workOrders_jcb, gridBagConstraints);

        showWorkOrderDetails_jb.setBackground(new java.awt.Color(185, 197, 31));
        showWorkOrderDetails_jb.setText("Show");
        showWorkOrderDetails_jb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showWorkOrderDetails_jbMouseClicked(evt);
            }
        });
        showWorkOrderDetails_jb.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                showWorkOrderDetails_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 0;
        jPanel6.add(showWorkOrderDetails_jb, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanel1.add(jPanel6, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 0);
        jPanel1.add(jSeparator6, gridBagConstraints);

        jLabel26.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel26.setText("Job Name :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel26, gridBagConstraints);

        jobName_jcb.setEditable(true);
        jobName_jcb.setPreferredSize(new java.awt.Dimension(300, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel1.add(jobName_jcb, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 5, 3, 0);
        jPanel1.add(jSeparator1, gridBagConstraints);

        jSeparator7.setOrientation(javax.swing.SwingConstants.VERTICAL);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jSeparator7, gridBagConstraints);

        jLabel27.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel27.setText("Order Date :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel27, gridBagConstraints);

        mfrname_jcb.setEditable(true);
        mfrname_jcb.setPreferredSize(new java.awt.Dimension(250, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel1.add(mfrname_jcb, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel1.setText("Plate Charge :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel1, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel2.setText("Design Charge :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel2, gridBagConstraints);

        plateCharge_jcb.setEditable(true);
        plateCharge_jcb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "500", "1000", "1500", "2000" }));
        plateCharge_jcb.setPreferredSize(new java.awt.Dimension(110, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(plateCharge_jcb, gridBagConstraints);

        designCharge_jtf.setPreferredSize(new java.awt.Dimension(110, 27));
        designCharge_jtf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                designCharge_jtfKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(designCharge_jtf, gridBagConstraints);

        jLabel28.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel28.setText("Printed Sheets Count :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 21;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel28, gridBagConstraints);

        printSheetsCnt_jtf.setPreferredSize(new java.awt.Dimension(110, 27));
        printSheetsCnt_jtf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                printSheetsCnt_jtfKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 21;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 0);
        jPanel1.add(printSheetsCnt_jtf, gridBagConstraints);

        jLabel29.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel29.setText("Final Sheets Count :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 22;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 10, 0);
        jPanel1.add(jLabel29, gridBagConstraints);

        finalShtsCnt_jtf.setPreferredSize(new java.awt.Dimension(110, 27));
        finalShtsCnt_jtf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                finalShtsCnt_jtfKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 22;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 10, 0);
        jPanel1.add(finalShtsCnt_jtf, gridBagConstraints);

        jPanel5.setBackground(new java.awt.Color(242, 242, 255));
        jPanel5.setLayout(new java.awt.GridBagLayout());

        jLabel19.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel19.setText("Image :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel5.add(jLabel19, gridBagConstraints);

        browseImage_jb.setBackground(new java.awt.Color(86, 132, 191));
        browseImage_jb.setText("Select >>");
        browseImage_jb.setPreferredSize(new java.awt.Dimension(100, 27));
        browseImage_jb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                browseImage_jbMouseClicked(evt);
            }
        });
        browseImage_jb.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                browseImage_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel5.add(browseImage_jb, gridBagConstraints);

        removeImage_jb.setBackground(new java.awt.Color(86, 132, 191));
        removeImage_jb.setText("<< Remove");
        removeImage_jb.setPreferredSize(new java.awt.Dimension(102, 27));
        removeImage_jb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                removeImage_jbMouseClicked(evt);
            }
        });
        removeImage_jb.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                removeImage_jbKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel5.add(removeImage_jb, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(jPanel5, gridBagConstraints);

        jScrollPane1.setViewportView(jPanel1);

        jPanel7.setBackground(new java.awt.Color(242, 242, 255));

        updateWorkOrder_jb.setBackground(new java.awt.Color(185, 197, 31));
        updateWorkOrder_jb.setText("Update");
        updateWorkOrder_jb.setPreferredSize(new java.awt.Dimension(110, 27));
        updateWorkOrder_jb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateWorkOrder_jbActionPerformed(evt);
            }
        });

        newData_jb.setBackground(new java.awt.Color(86, 132, 191));
        newData_jb.setText("New");
        newData_jb.setPreferredSize(new java.awt.Dimension(110, 27));
        newData_jb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newData_jbActionPerformed(evt);
            }
        });

        closeWindow_jb.setBackground(new java.awt.Color(86, 132, 191));
        closeWindow_jb.setText("Close");
        closeWindow_jb.setPreferredSize(new java.awt.Dimension(110, 27));
        closeWindow_jb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeWindow_jbActionPerformed(evt);
            }
        });

        print_jb.setBackground(new java.awt.Color(86, 132, 191));
        print_jb.setText("Print");
        print_jb.setPreferredSize(new java.awt.Dimension(110, 27));
        print_jb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                print_jbActionPerformed(evt);
            }
        });

        print_jb1.setBackground(new java.awt.Color(86, 132, 191));
        print_jb1.setFont(new java.awt.Font("DejaVu Sans", 0, 11)); // NOI18N
        print_jb1.setText("Cut Work Print");
        print_jb1.setPreferredSize(new java.awt.Dimension(110, 27));
        print_jb1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                print_jb1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(updateWorkOrder_jb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(newData_jb, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(closeWindow_jb, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(print_jb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(print_jb1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(194, 194, 194)
                .addComponent(print_jb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(print_jb1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(updateWorkOrder_jb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(newData_jb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(closeWindow_jb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1000, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 551, Short.MAX_VALUE)
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:

        formInternalFrame_Opened();

    }//GEN-LAST:event_formInternalFrameOpened

    private void formInternalFrame_Opened() {
        Dimension desktopSize = NewMDIApplication.desktopbg_jlbl.getSize();
        Dimension jInternalFrameSize = this.getSize();
        this.setLocation((desktopSize.width - jInternalFrameSize.width) / 2, (desktopSize.height - jInternalFrameSize.height) / 2);

        ButtonGroup bg = new ButtonGroup();
        bg.add(demi_jchkbx);
        bg.add(doubleDemi_jchkbx);

        SearchableCombobox searchableCombobox = new SearchableCombobox(customer_jcb);
        customer_jcb.getEditor().getEditorComponent().addKeyListener(searchableCombobox);

        CustomerBLL customerBLL = new CustomerBLL();
        customerBLL.loadCustomerJComboBox(customer_jcb);
        load_workOrders_jcb();

//        SearchableCombobox searchableCombobox3 = new SearchableCombobox(deliveryBy_jcb);
//        ((JTextField)deliveryBy_jcb.getEditor().getEditorComponent()).addKeyListener(searchableCombobox3);
//        load_deliveryBy_jcb();
        SearchableCombobox searchableCombobox4 = new SearchableCombobox(mfrname_jcb);
        mfrname_jcb.getEditor().getEditorComponent().addKeyListener(searchableCombobox4);
        ManufacturBLL manufacturBLL = new ManufacturBLL();
        manufacturBLL.loadManufacturerJComboBox(mfrname_jcb);

        SearchableCombobox searchableCombobox5 = new SearchableCombobox(jobName_jcb);
        jobName_jcb.getEditor().getEditorComponent().addKeyListener(searchableCombobox5);
        workOrderBLL.loadJobNameJComboBox(jobName_jcb);
    }

    private void setNilForColours() {
//        colour1_jcb.setSelectedItem("Nil");
//        colour2_jcb.setSelectedItem("Nil");
//        colour3_jcb.setSelectedItem("Nil");
//        colour4_jcb.setSelectedItem("Nil");

        ((JTextField) colour1_jcb.getEditor().getEditorComponent()).setText("Nil");
        ((JTextField) colour2_jcb.getEditor().getEditorComponent()).setText("Nil");
        ((JTextField) colour3_jcb.getEditor().getEditorComponent()).setText("Nil");
        ((JTextField) colour4_jcb.getEditor().getEditorComponent()).setText("Nil");

    }

    private void plateCharge_jcb_KeyListener() {
        plateCharge_jcb.getEditor().getEditorComponent().addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
                String text = ((JTextField) plateCharge_jcb.getEditor().getEditorComponent()).getText();
                int lastindex = text.lastIndexOf(".");

                char c = e.getKeyChar();

                if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE || e.getKeyChar() == '.')) {
                    //  evt.getKeyChar() == '.' does accept point when jtextfield accepts decimal number
                    e.consume();
                    getToolkit().beep();

                } else if (lastindex >= 0 && !Character.isDigit(c)) {
                    e.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");	
            }

            @Override
            public void keyReleased(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

        });
    }

    private void gsm_jcb_KeyListener() {
        gsm_jcb.getEditor().getEditorComponent().addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
                String text = ((JTextField) gsm_jcb.getEditor().getEditorComponent()).getText();
                int lastindex = text.lastIndexOf(".");

                char c = e.getKeyChar();

                if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE || e.getKeyChar() == '.')) {
                    //  evt.getKeyChar() == '.' does accept point when jtextfield accepts decimal number
                    e.consume();
                    getToolkit().beep();

                } else if (lastindex >= 0 && !Character.isDigit(c)) {
                    e.consume();
                }
            }

            @Override
            public void keyPressed(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");	
            }

            @Override
            public void keyReleased(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

        });
    }

    public static WorkOrderEdit getInstance() // Method
    {
        if (MyInstance == null) {
            MyInstance = new WorkOrderEdit();
        }
        return MyInstance;
    }

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        // TODO add your handling code here:

        MyInstance = null;

    }//GEN-LAST:event_formInternalFrameClosed

    private void browseImage_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_browseImage_jbMouseClicked
        // TODO add your handling code here:

        browseImage_jb_MouseClicked();

    }//GEN-LAST:event_browseImage_jbMouseClicked

    private void showWorkOrderDetails_jbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showWorkOrderDetails_jbMouseClicked
        // TODO add your handling code here:

        showWorkOrderDetails_jb_MouseClicked();

    }//GEN-LAST:event_showWorkOrderDetails_jbMouseClicked

    private void showWorkOrderDetails_jbKeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_showWorkOrderDetails_jbKeyPressed
    {//GEN-HEADEREND:event_showWorkOrderDetails_jbKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            getWorkOrderDetails();
        }
    }//GEN-LAST:event_showWorkOrderDetails_jbKeyPressed

    private void browseImage_jbKeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_browseImage_jbKeyPressed
    {//GEN-HEADEREND:event_browseImage_jbKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            loadImage();
        }
    }//GEN-LAST:event_browseImage_jbKeyPressed

    private void removeImage_jbMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_removeImage_jbMouseClicked
    {//GEN-HEADEREND:event_removeImage_jbMouseClicked
        photo_jlbl.setIcon(null);
    }//GEN-LAST:event_removeImage_jbMouseClicked

    private void removeImage_jbKeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_removeImage_jbKeyPressed
    {//GEN-HEADEREND:event_removeImage_jbKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            photo_jlbl.setIcon(null);
        }
    }//GEN-LAST:event_removeImage_jbKeyPressed

    private void updateWorkOrder_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateWorkOrder_jbActionPerformed
        // TODO add your handling code here:
        if (updateWorkOrder_jb.isEnabled() == true) {
            updateWorkOrderDetails();
        }

    }//GEN-LAST:event_updateWorkOrder_jbActionPerformed

    private void newData_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newData_jbActionPerformed
        // TODO add your handling code here:
        newData();
    }//GEN-LAST:event_newData_jbActionPerformed

    private void closeWindow_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeWindow_jbActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_closeWindow_jbActionPerformed

    private void print_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_print_jbActionPerformed
        // TODO add your handling code here:
        if (validationBeforeUpdate() == true) {
            printWorkOrder();
        }
    }//GEN-LAST:event_print_jbActionPerformed

    private void cyanDefault_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cyanDefault_jbActionPerformed
        // TODO add your handling code here:
        ((JTextField) colour1_jcb.getEditor().getEditorComponent()).setText("Cyan");
    }//GEN-LAST:event_cyanDefault_jbActionPerformed

    private void magentaDefault_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_magentaDefault_jbActionPerformed
        // TODO add your handling code here:
        ((JTextField) colour2_jcb.getEditor().getEditorComponent()).setText("Magenta");
    }//GEN-LAST:event_magentaDefault_jbActionPerformed

    private void yellowDefault_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yellowDefault_jbActionPerformed
        // TODO add your handling code here:
        ((JTextField) colour3_jcb.getEditor().getEditorComponent()).setText("Yellow");
    }//GEN-LAST:event_yellowDefault_jbActionPerformed

    private void blackDefault_jbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blackDefault_jbActionPerformed
        // TODO add your handling code here:
        ((JTextField) colour4_jcb.getEditor().getEditorComponent()).setText("Black");
    }//GEN-LAST:event_blackDefault_jbActionPerformed

    private void designCharge_jtfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_designCharge_jtfKeyTyped
        // TODO add your handling code here:
        String text = designCharge_jtf.getText();
        int lastindex = text.lastIndexOf(".");

        char c = evt.getKeyChar();

        if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE || evt.getKeyChar() == '.')) {
            //  evt.getKeyChar() == '.' does accept point when jtextfield accepts decimal number
            evt.consume();
            getToolkit().beep();

        } else if (lastindex >= 0 && !Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_designCharge_jtfKeyTyped

    private void sheets_jtfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sheets_jtfKeyTyped
        // TODO add your handling code here:
        String text = sheets_jtf.getText();
        int lastindex = text.lastIndexOf(".");

        char c = evt.getKeyChar();

        if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE || evt.getKeyChar() == '.')) {
            //  evt.getKeyChar() == '.' does accept point when jtextfield accepts decimal number
            evt.consume();
            getToolkit().beep();

        } else if (lastindex >= 0 && !Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_sheets_jtfKeyTyped

    private void length_jtfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_length_jtfKeyTyped
        // TODO add your handling code here:
        String text = length_jtf.getText();
        int lastindex = text.lastIndexOf(".");

        char c = evt.getKeyChar();

        if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE || evt.getKeyChar() == '.')) {
            //  evt.getKeyChar() == '.' does accept point when jtextfield accepts decimal number
            evt.consume();
            getToolkit().beep();

        } else if (lastindex >= 0 && !Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_length_jtfKeyTyped

    private void width_jtfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_width_jtfKeyTyped
        // TODO add your handling code here:
        String text = width_jtf.getText();
        int lastindex = text.lastIndexOf(".");

        char c = evt.getKeyChar();

        if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE || evt.getKeyChar() == '.')) {
            //  evt.getKeyChar() == '.' does accept point when jtextfield accepts decimal number
            evt.consume();
            getToolkit().beep();

        } else if (lastindex >= 0 && !Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_width_jtfKeyTyped

    private void rate_jtfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rate_jtfKeyTyped
        // TODO add your handling code here:
        String text = rate_jtf.getText();
        int lastindex = text.lastIndexOf(".");

        char c = evt.getKeyChar();

        if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE || evt.getKeyChar() == '.')) {
            //  evt.getKeyChar() == '.' does accept point when jtextfield accepts decimal number
            evt.consume();
            getToolkit().beep();

        } else if (lastindex >= 0 && !Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_rate_jtfKeyTyped

    private void printSheetsCnt_jtfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_printSheetsCnt_jtfKeyTyped
        // TODO add your handling code here:
        String text = printSheetsCnt_jtf.getText();
        int lastindex = text.lastIndexOf(".");

        char c = evt.getKeyChar();

        if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE || evt.getKeyChar() == '.')) {
            //  evt.getKeyChar() == '.' does accept point when jtextfield accepts decimal number
            evt.consume();
            getToolkit().beep();

        } else if (lastindex >= 0 && !Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_printSheetsCnt_jtfKeyTyped

    private void finalShtsCnt_jtfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_finalShtsCnt_jtfKeyTyped
        // TODO add your handling code here:
        String text = finalShtsCnt_jtf.getText();
        int lastindex = text.lastIndexOf(".");

        char c = evt.getKeyChar();

        if (!(Character.isDigit(c) || (c == KeyEvent.VK_BACK_SPACE) || c == KeyEvent.VK_DELETE || evt.getKeyChar() == '.')) {
            //  evt.getKeyChar() == '.' does accept point when jtextfield accepts decimal number
            evt.consume();
            getToolkit().beep();

        } else if (lastindex >= 0 && !Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_finalShtsCnt_jtfKeyTyped

    private void print_jb1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_print_jb1ActionPerformed
        // TODO add your handling code here:
        if (validationBeforeCutWorkOrderPrint() == true) {
            cutWorkPrint();
        }
    }//GEN-LAST:event_print_jb1ActionPerformed

    private void cutWorkPrint() {
        try {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
            SimpleDateFormat sdf1 = new SimpleDateFormat("dd-MMM-yyyy", Locale.getDefault());

            String source = "WorkOrderForm_Cutting.jasper";
            InputStream is = getClass().getResourceAsStream(source);

            Map parameters = new HashMap();
            parameters.put("Date", sdf1.format(new Date()));
            parameters.put("Customer", ((JTextField) customer_jcb.getEditor().getEditorComponent()).getText());
            parameters.put("JobName", ((JTextField) jobName_jcb.getEditor().getEditorComponent()).getText());
            parameters.put("OrderDate", sdf1.format(orderDate_jdc.getDate()));
            String mechine = null;
            if (demi_jchkbx.isSelected() == true) {
                mechine = "Demi";
            } else if (doubleDemi_jchkbx.isSelected() == true) {
                mechine = "Double Demi";
            }
            parameters.put("Mechine", mechine);
            parameters.put("WorkOrderId", ((JTextField) workOrders_jcb.getEditor().getEditorComponent()).getText());
            parameters.put("DeliveryBy", deliveryBy_jcb.getSelectedItem().toString());
            parameters.put("DeliveryDate", sdf1.format(deliveryDate_jdc.getDate()));
            parameters.put("DeliveryTime", deliveryTime_jtf.getText() + "" + am_pm_jcb.getSelectedItem().toString());
            parameters.put("Gsm", ((JTextField) gsm_jcb.getEditor().getEditorComponent()).getText());
            parameters.put("Sheets", sheets_jtf.getText());
            parameters.put("Length", length_jtf.getText());
            parameters.put("Width", width_jtf.getText());
            parameters.put("Cutter_Note", cutterNote_jtf.getText());
            parameters.put("Manufacturer", ((JTextField) mfrname_jcb.getEditor().getEditorComponent()).getText());
            parameters.put("Supplier", supplier_jcb.getSelectedItem().toString());

            JasperPrint print = JasperFillManager.fillReport(is, parameters, new JREmptyDataSource());
            JasperViewer jv = new JasperViewer(print, false);
            jv.viewReport(print, false);

//            if(print != null)
//            {
//            JasperPrintManager.printReport(print, true);
//            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }

    private void printWorkOrder() {
        try {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
            SimpleDateFormat sdf1 = new SimpleDateFormat("dd-MMM-yyyy", Locale.getDefault());

            String source = "WorkOrderForm.jasper";
            InputStream is = getClass().getResourceAsStream(source);

            Map parameters = new HashMap();
            parameters.put("Date", sdf1.format(new Date()));
            parameters.put("Customer", ((JTextField) customer_jcb.getEditor().getEditorComponent()).getText());
            parameters.put("JobName", ((JTextField) jobName_jcb.getEditor().getEditorComponent()).getText());
            parameters.put("OrderDate", sdf1.format(orderDate_jdc.getDate()));
            String mechine = null;
            if (demi_jchkbx.isSelected() == true) {
                mechine = "Demi";
            } else if (doubleDemi_jchkbx.isSelected() == true) {
                mechine = "Double Demi";
            }
            parameters.put("Mechine", mechine);
            parameters.put("WorkOrderId", ((JTextField) workOrders_jcb.getEditor().getEditorComponent()).getText());
            parameters.put("DeliveryBy", deliveryBy_jcb.getSelectedItem().toString());
            parameters.put("DeliveryDate", sdf1.format(deliveryDate_jdc.getDate()));
            parameters.put("DeliveryTime", deliveryTime_jtf.getText() + "" + am_pm_jcb.getSelectedItem().toString());
            parameters.put("Gsm", ((JTextField) gsm_jcb.getEditor().getEditorComponent()).getText());
            parameters.put("Sheets", sheets_jtf.getText());
            parameters.put("Length", length_jtf.getText());
            parameters.put("Width", width_jtf.getText());
            parameters.put("Cutter_Note", cutterNote_jtf.getText());
            parameters.put("Manufacturer", ((JTextField) mfrname_jcb.getEditor().getEditorComponent()).getText());
            parameters.put("Supplier", supplier_jcb.getSelectedItem().toString());
            parameters.put("ColourAndPlate", colourAndPlate_jcb.getSelectedItem().toString());
            parameters.put("Cyan", ((JTextField) colour1_jcb.getEditor().getEditorComponent()).getText());
            parameters.put("Magenta", ((JTextField) colour2_jcb.getEditor().getEditorComponent()).getText());
            parameters.put("Yellow", ((JTextField) colour3_jcb.getEditor().getEditorComponent()).getText());
            parameters.put("Black", ((JTextField) colour4_jcb.getEditor().getEditorComponent()).getText());
            parameters.put("Plate", plate_jcb.getSelectedItem().toString());
            parameters.put("Printed_Sheet_Count", "");
            parameters.put("Printer_Note", printerNote_jtf.getText());
            parameters.put("WorkOrder_DelSect", ((JTextField) workOrders_jcb.getEditor().getEditorComponent()).getText());
            parameters.put("JobName_DelSect", ((JTextField) jobName_jcb.getEditor().getEditorComponent()).getText());
            parameters.put("WorkOrder_DelSect", "");
            parameters.put("Bundles", "");
            parameters.put("Delivery_Note", deliveryNote_jtf.getText());
            parameters.put("PrintImage", imageFromDB);
            parameters.put("Printed_Sheet_Count", printSheetsCnt_jtf.getText());
            parameters.put("Final_Sheet_Count", finalShtsCnt_jtf.getText());

            JasperPrint print = JasperFillManager.fillReport(is, parameters, new JREmptyDataSource());
            JasperViewer jv = new JasperViewer(print, false);
            jv.viewReport(print, false);

//            if(print != null)
//            {
//            JasperPrintManager.printReport(print, true);
//            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }

    private void newData() {
        load_workOrders_jcb();
        ((JTextField) customer_jcb.getEditor().getEditorComponent()).setText("");
        ((JTextField) workOrders_jcb.getEditor().getEditorComponent()).setText("");
        orderDate_jdc.setDate(null);
        demi_jchkbx.setSelected(false);
        doubleDemi_jchkbx.setSelected(false);
        supplier_jcb.setSelectedItem("-Select-");
        ((JTextField) customer_jcb.getEditor().getEditorComponent()).setText("");
        ((JTextField) mfrname_jcb.getEditor().getEditorComponent()).setText("");
        colourAndPlate_jcb.setSelectedItem("-Select-");
        ((JTextField) colour1_jcb.getEditor().getEditorComponent()).setText("Nil");
        ((JTextField) colour2_jcb.getEditor().getEditorComponent()).setText("Nil");
        ((JTextField) colour3_jcb.getEditor().getEditorComponent()).setText("Nil");
        ((JTextField) colour4_jcb.getEditor().getEditorComponent()).setText("Nil");
        ((JTextField) plateCharge_jcb.getEditor().getEditorComponent()).setText("0");
        designCharge_jtf.setText("");
        sheets_jtf.setText("");
        ((JTextField) gsm_jcb.getEditor().getEditorComponent()).setText("");
        length_jtf.setText("");
        width_jtf.setText("");
        plate_jcb.setSelectedItem("-Select-");
        design_jcb.setSelectedItem("-Select-");
        rate_jtf.setText("");
        load_deliveryBy_jcb();
        deliveryBy_jcb.setSelectedItem("-Select-");
        deliveryDate_jdc.setDate(null);
        deliveryTime_jtf.setText("");
        printerNote_jtf.setText("");
        cutterNote_jtf.setText("");
        deliveryNote_jtf.setText("");
        updateWorkOrder_jb.setEnabled(true);
        ((JTextField) jobName_jcb.getEditor().getEditorComponent()).setText("");

        workOrderBLL.loadJobNameJComboBox(jobName_jcb);

        workOrders_jcb.requestFocusInWindow();
    }

    WorkOrderBLL workOrderBLL = new WorkOrderBLL();

    private void showWorkOrderDetails_jb_MouseClicked() {
        getWorkOrderDetails();
    }

    private boolean validationBeforeUpdate() {
        boolean valid = true;

        if (workOrders_jcb.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "Select a valid Work Order Id.", "Error", JOptionPane.ERROR_MESSAGE);
            workOrders_jcb.requestFocusInWindow();
            valid = false;
        } else if (customer_jcb.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "Select a Customer.", "Error", JOptionPane.ERROR_MESSAGE);
            customer_jcb.requestFocusInWindow();
            valid = false;
        } else if (orderDate_jdc.getDate() == null) {
            JOptionPane.showMessageDialog(this, "Specify Order Date.", "Error", JOptionPane.ERROR_MESSAGE);
            orderDate_jdc.requestFocusInWindow();
            valid = false;
        } else if (demi_jchkbx.isSelected() == false && doubleDemi_jchkbx.isSelected() == false) {
            JOptionPane.showMessageDialog(this, "Select Demi.", "Error", JOptionPane.ERROR_MESSAGE);
            demi_jchkbx.requestFocusInWindow();
            valid = false;
        } else if (supplier_jcb.getSelectedItem().toString().equals("-Select-")) {
            JOptionPane.showMessageDialog(this, "Select a Supplier.", "Error", JOptionPane.ERROR_MESSAGE);
            supplier_jcb.requestFocusInWindow();
            valid = false;
        } else if (customer_jcb.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "Select a Manufacturer.", "Error", JOptionPane.ERROR_MESSAGE);
            customer_jcb.requestFocusInWindow();
            valid = false;
        } else if (colourAndPlate_jcb.getSelectedItem().toString().equals("-Select-")) {
            JOptionPane.showMessageDialog(this, "Select Colour Plate.", "Error", JOptionPane.ERROR_MESSAGE);
            colourAndPlate_jcb.requestFocusInWindow();
            valid = false;
        } else if ((colourAndPlate_jcb.getSelectedItem().toString().equals("Single Colour")) && checkNilForColours() != 3) {
            JOptionPane.showMessageDialog(this, "Please select single colour for the plate.");
            valid = false;
        } else if ((colourAndPlate_jcb.getSelectedItem().toString().equals("Two Colour")) && checkNilForColours() != 2) {
            JOptionPane.showMessageDialog(this, "Please select two colours for the plate.");
            valid = false;
        } else if ((colourAndPlate_jcb.getSelectedItem().toString().equals("Three Colour")) && checkNilForColours() != 1) {
            JOptionPane.showMessageDialog(this, "Please select three colours for the plate.");
            valid = false;
        } else if ((colourAndPlate_jcb.getSelectedItem().toString().equals("Multi Colour")) && checkNilForColours() != 0) {
            JOptionPane.showMessageDialog(this, "Please select four colours for the plate.");
            valid = false;
        } else if (((JTextField) plateCharge_jcb.getEditor().getEditorComponent()).getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Specify Delivery Charge.", "Error", JOptionPane.ERROR_MESSAGE);
            plateCharge_jcb.requestFocusInWindow();
            valid = false;
        } else if (designCharge_jtf.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Specify Design Charge.", "Error", JOptionPane.ERROR_MESSAGE);
            designCharge_jtf.requestFocusInWindow();
            valid = false;
        } else if (isDigit(sheets_jtf.getText()) == false) {
            JOptionPane.showMessageDialog(this, "Specify No of Sheets.", "Error", JOptionPane.ERROR_MESSAGE);
            sheets_jtf.requestFocusInWindow();
            valid = false;
        } else if (isDigit(((JTextField) gsm_jcb.getEditor().getEditorComponent()).getText()) == false) {
            JOptionPane.showMessageDialog(this, "Specify GSM.", "Error", JOptionPane.ERROR_MESSAGE);
            sheets_jtf.requestFocusInWindow();
            valid = false;
        } else if (isDigit(length_jtf.getText()) == false) {
            JOptionPane.showMessageDialog(this, "Specify Length.", "Error", JOptionPane.ERROR_MESSAGE);
            length_jtf.requestFocusInWindow();
            valid = false;
        } else if (isDigit(width_jtf.getText()) == false) {
            JOptionPane.showMessageDialog(this, "Specify Width.", "Error", JOptionPane.ERROR_MESSAGE);
            width_jtf.requestFocusInWindow();
            valid = false;
        } else if (plate_jcb.getSelectedItem().toString().equals("-Select-")) {
            JOptionPane.showMessageDialog(this, "Specify Plate.", "Error", JOptionPane.ERROR_MESSAGE);
            plate_jcb.requestFocusInWindow();
            valid = false;
        } else if (design_jcb.getSelectedItem().toString().equals("-Select-")) {
            JOptionPane.showMessageDialog(this, "Specify Design.", "Error", JOptionPane.ERROR_MESSAGE);
            design_jcb.requestFocusInWindow();
            valid = false;
        } else if (isDecimalNumber(rate_jtf.getText()) == false) {
            JOptionPane.showMessageDialog(this, "Specify Rate.", "Error", JOptionPane.ERROR_MESSAGE);
            rate_jtf.requestFocusInWindow();
            valid = false;
        } else if (((JTextField) deliveryBy_jcb.getEditor().getEditorComponent()).getText().equals("-Select-")) {
            JOptionPane.showMessageDialog(this, "Specify Delivery Party.", "Error", JOptionPane.ERROR_MESSAGE);
            deliveryBy_jcb.requestFocusInWindow();
            valid = false;
        } else if (deliveryDate_jdc.getDate() == null) {
            JOptionPane.showMessageDialog(this, "Specify Delivery Date.", "Error", JOptionPane.ERROR_MESSAGE);
            deliveryDate_jdc.requestFocusInWindow();
            valid = false;
        } else if (isDecimalNumber(deliveryTime_jtf.getText()) == false) {
            JOptionPane.showMessageDialog(this, "Specify Delivery Time.", "Error", JOptionPane.ERROR_MESSAGE);
            deliveryTime_jtf.requestFocusInWindow();
            valid = false;
        } else if (printSheetsCnt_jtf.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Specify Printed Sheets Count.", "Error", JOptionPane.ERROR_MESSAGE);
            printSheetsCnt_jtf.requestFocusInWindow();
            valid = false;
        } else if (finalShtsCnt_jtf.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Specify Final Sheets Count.", "Error", JOptionPane.ERROR_MESSAGE);
            finalShtsCnt_jtf.requestFocusInWindow();
            valid = false;
        }
//        else if(orderName_jcb.getSelectedIndex() != -1)
//        {
//            JOptionPane.showMessageDialog(this,"Specified Work Order Name already saved.","Error",JOptionPane.ERROR_MESSAGE);
//            orderName_jcb.requestFocusInWindow();
//            valid = false;
//        }

        return valid;
    }

    private boolean validationBeforeCutWorkOrderPrint() {
        boolean valid = true;

        if (workOrders_jcb.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "Select a valid Work Order Id.", "Error", JOptionPane.ERROR_MESSAGE);
            workOrders_jcb.requestFocusInWindow();
            valid = false;
        } else if (customer_jcb.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "Select a Customer.", "Error", JOptionPane.ERROR_MESSAGE);
            customer_jcb.requestFocusInWindow();
            valid = false;
        } else if (orderDate_jdc.getDate() == null) {
            JOptionPane.showMessageDialog(this, "Specify Order Date.", "Error", JOptionPane.ERROR_MESSAGE);
            orderDate_jdc.requestFocusInWindow();
            valid = false;
        } else if (demi_jchkbx.isSelected() == false && doubleDemi_jchkbx.isSelected() == false) {
            JOptionPane.showMessageDialog(this, "Select Demi.", "Error", JOptionPane.ERROR_MESSAGE);
            demi_jchkbx.requestFocusInWindow();
            valid = false;
        } else if (supplier_jcb.getSelectedItem().toString().equals("-Select-")) {
            JOptionPane.showMessageDialog(this, "Select a Supplier.", "Error", JOptionPane.ERROR_MESSAGE);
            supplier_jcb.requestFocusInWindow();
            valid = false;
        } else if (mfrname_jcb.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "Select a Manufacturer.", "Error", JOptionPane.ERROR_MESSAGE);
            customer_jcb.requestFocusInWindow();
            valid = false;
        } else if (isDigit(sheets_jtf.getText()) == false) {
            JOptionPane.showMessageDialog(this, "Specify No of Sheets.", "Error", JOptionPane.ERROR_MESSAGE);
            sheets_jtf.requestFocusInWindow();
            valid = false;
        } else if (isDigit(((JTextField) gsm_jcb.getEditor().getEditorComponent()).getText()) == false) {
            JOptionPane.showMessageDialog(this, "Specify GSM.", "Error", JOptionPane.ERROR_MESSAGE);
            sheets_jtf.requestFocusInWindow();
            valid = false;
        } else if (isDigit(length_jtf.getText()) == false) {
            JOptionPane.showMessageDialog(this, "Specify Length.", "Error", JOptionPane.ERROR_MESSAGE);
            length_jtf.requestFocusInWindow();
            valid = false;
        } else if (isDigit(width_jtf.getText()) == false) {
            JOptionPane.showMessageDialog(this, "Specify Width.", "Error", JOptionPane.ERROR_MESSAGE);
            width_jtf.requestFocusInWindow();
            valid = false;
        } else if (plate_jcb.getSelectedItem().toString().equals("-Select-")) {
            JOptionPane.showMessageDialog(this, "Specify Plate.", "Error", JOptionPane.ERROR_MESSAGE);
            plate_jcb.requestFocusInWindow();
            valid = false;
        } else if (((JTextField) deliveryBy_jcb.getEditor().getEditorComponent()).getText().equals("-Select-")) {
            JOptionPane.showMessageDialog(this, "Specify Delivery Party.", "Error", JOptionPane.ERROR_MESSAGE);
            deliveryBy_jcb.requestFocusInWindow();
            valid = false;
        }
//        else if(orderName_jcb.getSelectedIndex() != -1)
//        {
//            JOptionPane.showMessageDialog(this,"Specified Work Order Name already saved.","Error",JOptionPane.ERROR_MESSAGE);
//            orderName_jcb.requestFocusInWindow();
//            valid = false;
//        }

        return valid;
    }

    private int checkNilForColours() {
        int count = 0;
        List<String> nilList = new ArrayList();

        nilList.add(((JTextField) colour1_jcb.getEditor().getEditorComponent()).getText());
        nilList.add(((JTextField) colour2_jcb.getEditor().getEditorComponent()).getText());
        nilList.add(((JTextField) colour3_jcb.getEditor().getEditorComponent()).getText());
        nilList.add(((JTextField) colour4_jcb.getEditor().getEditorComponent()).getText());

        for (int i = 0; i < nilList.size(); i++) {
            String nilCheck = nilList.get(i);

            if (nilCheck.equals("Nil")) {
                count++;
            }
        }

        return count;
    }

    public static boolean isDigit(String str) {
        boolean valid = true;

        try {
            Integer.parseInt(str);
        } catch (Exception e) {
            valid = false;
        }

        return valid;
    }

    public static boolean isDecimalNumber(String str) {
        boolean valid = true;

        try {
            new BigDecimal(str);
        } catch (Exception e) {
            valid = false;
        }

        return valid;
    }

    private void updateWorkOrderDetails() {
        boolean error = false;

        if (validationBeforeUpdate() == true) {
            try {
                SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd");
                ArrayList<String> colourList = new ArrayList();

                String workorderid = ((JTextField) workOrders_jcb.getEditor().getEditorComponent()).getText();
                String customer = ((JTextField) customer_jcb.getEditor().getEditorComponent()).getText();
                String orderdate = sdf1.format(orderDate_jdc.getDate());
                String demitype = null;
                if (demi_jchkbx.isSelected() == true) {
                    demitype = "demi";
                } else if (doubleDemi_jchkbx.isSelected() == true) {
                    demitype = "doubledemi";
                }
                String colourtype = colourAndPlate_jcb.getSelectedItem().toString();
                String cyan = ((JTextField) colour1_jcb.getEditor().getEditorComponent()).getText();
                String magenta = ((JTextField) colour2_jcb.getEditor().getEditorComponent()).getText();
                String yellow = ((JTextField) colour3_jcb.getEditor().getEditorComponent()).getText();
                String black = ((JTextField) colour4_jcb.getEditor().getEditorComponent()).getText();

                String sheets = sheets_jtf.getText();
                String length = length_jtf.getText();
                String width = width_jtf.getText();
                String gsm = ((JTextField) gsm_jcb.getEditor().getEditorComponent()).getText();
                String plate = plate_jcb.getSelectedItem().toString();
                String design = design_jcb.getSelectedItem().toString();
                String rate = rate_jtf.getText();

                String supplier = supplier_jcb.getSelectedItem().toString();
                String manufacturer = ((JTextField) mfrname_jcb.getEditor().getEditorComponent()).getText();
                String delivery_by = deliveryBy_jcb.getSelectedItem().toString();
                String delivery_date = sdf1.format(deliveryDate_jdc.getDate());
                String deliverytime = deliveryTime_jtf.getText();
                String am_pm = am_pm_jcb.getSelectedItem().toString();

                String printer_note = printerNote_jtf.getText();
                String cutter_note = cutterNote_jtf.getText();
                String delivery_note = deliveryNote_jtf.getText();
                String picture = null;
                String image_format = null;
                if (photo_jlbl.getIcon() != null) {
                    //Convert image to String
                    if (imageFormat == null) {
                        image_format = getImageFormat(imagefile.toString());
                    } else if (imagefile == null) {
                        image_format = imageFormat;
                    }

                    ImageIcon ic = (ImageIcon) photo_jlbl.getIcon();
                    Image image = ic.getImage();

                    ByteArrayOutputStream bos = new ByteArrayOutputStream();
                    BufferedImage bi = new BufferedImage(image.getWidth(this), image.getHeight(this), BufferedImage.TYPE_INT_RGB);
                    Graphics g = bi.createGraphics();
                    g.drawImage(image, 0, 0, null);
                    g.dispose();
                    ImageIO.write(bi, image_format, bos);
                    byte[] imageBytes = bos.toByteArray();
                    picture = Base64.getEncoder().encodeToString(imageBytes);
                    bos.close();
                } else {
                    picture = null;
                    image_format = null;
                }
                String printStatus = "PENDING";
                String workordername = ((JTextField) jobName_jcb.getEditor().getEditorComponent()).getText();
                String plate_charge = ((JTextField) plateCharge_jcb.getEditor().getEditorComponent()).getText();
                String design_charge = designCharge_jtf.getText();
                String print_sheet_count = printSheetsCnt_jtf.getText();
                String final_print_count = finalShtsCnt_jtf.getText();

                WorkOrder workOrderEntry_BLL = new WorkOrder();
                workOrderEntry_BLL.upateWorkOrderDetails(workorderid, customer, orderdate, demitype, colourtype, colourList, sheets, length, width, gsm, plate, design, rate, supplier, manufacturer, delivery_by, delivery_date, deliverytime, am_pm, printer_note, cutter_note, delivery_note, picture, image_format, printStatus, colourtype, cyan, yellow, magenta, black, workordername, plate_charge, design_charge, print_sheet_count, final_print_count);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "updateWorkOrderDetails(): " + e);
                error = true;
            }

            if (error == false) {
                JOptionPane.showMessageDialog(null, "Operation Successful.", "Success", JOptionPane.INFORMATION_MESSAGE);
                updateWorkOrder_jb.setEnabled(false);
                newData_jb.requestFocusInWindow();
            }
        }
    }

    class GetWorkOrderNo {

        String workOrderNo;
        boolean workOrderNoExist;

        Connection con = null;
        PreparedStatement prepstmt = null;
        ResultSet rs = null;

        public void setWorkOrderNo() {
            try {

                String workOrderId;
                boolean workOrderidExist;

                con = DatabaseConnection.createConnection();

                String sql_1 = "SELECT workorderid FROM print_work_order ";
                prepstmt = con.prepareStatement(sql_1);
                rs = prepstmt.executeQuery();
                if (rs.last() == true) {

                    workOrderidExist = true;
                    workOrderId = rs.getString("workorderid");

                    this.workOrderNo = workOrderId;
                    this.workOrderNoExist = workOrderidExist;

                } else {

                    workOrderidExist = false;
                    this.workOrderNoExist = workOrderidExist;

                }

            } catch (Exception e) {

                JOptionPane.showMessageDialog(null, "GetWorkOrderNo: " + e);

            } finally {

                try {

                    if (rs != null) {

                        rs.close();

                    }
                    if (prepstmt != null) {

                        prepstmt.close();

                    }
                    if (con != null) {

                        con.close();

                    }

                } catch (Exception ex) {

                    JOptionPane.showMessageDialog(null, ex);

                }

            }
        }

        public boolean getWorkOrderNoExistStatus() {

            return workOrderNoExist;

        }

        public String getWorkOrderNo() {

            return workOrderNo;

        }

    }

    private void browseImage_jb_MouseClicked() {

        loadImage();

    }

    private void loadImage() {

        try {

            String imagename = ((JTextField) workOrders_jcb.getEditor().getEditorComponent()).getText();

            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setSelectedFile(new File(imagename + ".jpeg"));
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Image", "jpg", "png", "tif");
            fileChooser.addChoosableFileFilter(filter);

            fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));

            int result = fileChooser.showOpenDialog(this);
            if (result == JFileChooser.APPROVE_OPTION) {

                imagefile = fileChooser.getSelectedFile();
                photo_jlbl.setIcon(new ImageIcon(scaleImage(ImageIO.read(imagefile), BufferedImage.TYPE_INT_RGB, 430, 430)));

            }

        } catch (Exception e) {

            JOptionPane.showMessageDialog(null, "EmployeeRegistration:loadImage() :" + e);

        }

    }

    public static BufferedImage scaleImage(BufferedImage image, int imageType, int newWidth, int newHeight) {
        // Make sure the aspect ratio is maintained, so the image is not distorted
        double thumbRatio = (double) newWidth / (double) newHeight;
        int imageWidth = image.getWidth(null);
        int imageHeight = image.getHeight(null);
        double aspectRatio = (double) imageWidth / (double) imageHeight;

        if (thumbRatio < aspectRatio) {
            newHeight = (int) (newWidth / aspectRatio);
        } else {
            newWidth = (int) (newHeight * aspectRatio);
        }

        // Draw the scaled image
        BufferedImage newImage = new BufferedImage(newWidth, newHeight,
                imageType);
        Graphics2D graphics2D = newImage.createGraphics();
        graphics2D.setRenderingHint(RenderingHints.KEY_INTERPOLATION,
                RenderingHints.VALUE_INTERPOLATION_BILINEAR);
        graphics2D.drawImage(image, 0, 0, newWidth, newHeight, null);

        return newImage;
    }

    public static String getImageFormat(String ImageName) {

        return (ImageName.substring((ImageName.indexOf('.')) + 1, ImageName.length()));

    }

    private void load_workOrders_jcb() {

        try {

            String customer = customer_jcb.getSelectedItem().toString();

            workOrders_jcb.removeAllItems();

            WorkOrder workOrderEntry_BLL = new WorkOrder();

            ArrayList<String> workOrderIdArr = workOrderEntry_BLL.getWorkOrders(customer);

            for (int i = 0; i < workOrderIdArr.size(); i++) {

                String workorders = workOrderIdArr.get(i);
                workOrders_jcb.addItem(workorders);

            }

            workOrders_jcb.setSelectedItem("");

        } catch (Exception e) {

            JOptionPane.showMessageDialog(this, e);

        }

    }

    private void load_deliveryBy_jcb() {
        try {
            deliveryBy_jcb.removeAllItems();

            WorkOrder workOrderEntry_BLL = new WorkOrder();
            List<WorkOrder> delPartyList = workOrderEntry_BLL.getDeliveryPartiesList();

            for (int i = 0; i < delPartyList.size(); i++) {
                String workorders = delPartyList.get(i).getDelivery_by();
                deliveryBy_jcb.addItem(workorders);
            }

            ((JTextField) deliveryBy_jcb.getEditor().getEditorComponent()).setText("");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }
    }

    private void getWorkOrderDetails() {
        if (workOrders_jcb.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "Please select a valid Work Id.", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                imageFromDB = null;
                SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
                String workOrderId = workOrders_jcb.getSelectedItem().toString();

                WorkOrder workOrderEntry_BLL = new WorkOrder();
                ArrayList workorderDetailsArr = workOrderEntry_BLL.getWorkOrderDetails(workOrderId);

                Date orderDate = (Date) workorderDetailsArr.get(0);
                Date orderDate_date = sdf.parse(sdf.format(orderDate));
                orderDate_jdc.setDate(orderDate_date);
                String mechine = workorderDetailsArr.get(1).toString();
                if (mechine.equals("demi")) {
                    demi_jchkbx.setSelected(true);
                } else if (mechine.equals("doubledemi")) {
                    doubleDemi_jchkbx.setSelected(true);
                }
                String colourplate = workorderDetailsArr.get(2).toString();
                colourAndPlate_jcb.setSelectedItem(colourplate);
                String cyan = workorderDetailsArr.get(3).toString();
                ((JTextField) colour1_jcb.getEditor().getEditorComponent()).setText(cyan);
                String magenta = workorderDetailsArr.get(4).toString();
                ((JTextField) colour2_jcb.getEditor().getEditorComponent()).setText(magenta);
                String yellow = workorderDetailsArr.get(5).toString();
                ((JTextField) colour3_jcb.getEditor().getEditorComponent()).setText(yellow);
                String black = workorderDetailsArr.get(6).toString();
                ((JTextField) colour4_jcb.getEditor().getEditorComponent()).setText(black);
                String sheet = workorderDetailsArr.get(7).toString();
                sheets_jtf.setText(sheet);
                String length = workorderDetailsArr.get(8).toString();
                length_jtf.setText(length);
                String width = workorderDetailsArr.get(9).toString();
                width_jtf.setText(width);
                String gsm = workorderDetailsArr.get(10).toString();
                ((JTextField) gsm_jcb.getEditor().getEditorComponent()).setText(gsm);
                String plate = workorderDetailsArr.get(11).toString();
                plate_jcb.setSelectedItem(plate);
                String design = workorderDetailsArr.get(12).toString();
                design_jcb.setSelectedItem(design);
                String rate = workorderDetailsArr.get(13).toString();
                rate_jtf.setText(rate);
                String supplier = workorderDetailsArr.get(14).toString();
                supplier_jcb.setSelectedItem(supplier);
                String manufacturer = workorderDetailsArr.get(15).toString();
                ((JTextField) mfrname_jcb.getEditor().getEditorComponent()).setText(manufacturer);
                String deliveryby = workorderDetailsArr.get(16).toString();
                deliveryBy_jcb.setSelectedItem(deliveryby);
                Date deliverydate = (Date) workorderDetailsArr.get(17);
                Date delDate_date = sdf.parse(sdf.format(deliverydate));
                deliveryDate_jdc.setDate(delDate_date);
                String deliverytime = workorderDetailsArr.get(18).toString();
                deliveryTime_jtf.setText(deliverytime);
                String am_pm = workorderDetailsArr.get(19).toString();
                am_pm_jcb.setSelectedItem(am_pm);
                String printernote = workorderDetailsArr.get(20).toString();
                printerNote_jtf.setText(printernote);
                String cutternote = workorderDetailsArr.get(21).toString();
                cutterNote_jtf.setText(cutternote);
                String deliverynote = workorderDetailsArr.get(22).toString();
                deliveryNote_jtf.setText(deliverynote);
                if (workorderDetailsArr.get(23).equals("NULL")) {
                    photo_jlbl.setIcon(null);
                    photo_jlbl.setText("No Photo");
                } else {
                    //Convert string to image
                    byte[] imageDataBytes = Base64.getDecoder().decode(workorderDetailsArr.get(23).toString());
                    InputStream in = new ByteArrayInputStream(imageDataBytes);
                    imageFromDB = ImageIO.read(in);
                    photo_jlbl.setIcon(new ImageIcon(scaleImage(imageFromDB, BufferedImage.TYPE_INT_RGB, 430, 430)));
                }
                String customer = workorderDetailsArr.get(24).toString();
                ((JTextField) customer_jcb.getEditor().getEditorComponent()).setText(customer);
                String workname = workorderDetailsArr.get(25).toString();
                ((JTextField) jobName_jcb.getEditor().getEditorComponent()).setText(workname);
                String plate_charge = workorderDetailsArr.get(26).toString();
                ((JTextField) plateCharge_jcb.getEditor().getEditorComponent()).setText(plate_charge);
                String design_charge = workorderDetailsArr.get(27).toString();
                designCharge_jtf.setText(design_charge);
                imageFormat = workorderDetailsArr.get(28).toString();
                String printedSheetsCnt = workorderDetailsArr.get(29).toString();
                printSheetsCnt_jtf.setText(printedSheetsCnt);
                String finalSheetsCnt = workorderDetailsArr.get(30).toString();
                finalShtsCnt_jtf.setText(finalSheetsCnt);
                customer_jcb.requestFocusInWindow();

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> am_pm_jcb;
    private javax.swing.JButton blackDefault_jb;
    private javax.swing.JButton browseImage_jb;
    private javax.swing.JButton closeWindow_jb;
    private javax.swing.JComboBox<String> colour1_jcb;
    private javax.swing.JComboBox<String> colour2_jcb;
    private javax.swing.JComboBox<String> colour3_jcb;
    private javax.swing.JComboBox<String> colour4_jcb;
    private javax.swing.JComboBox<String> colourAndPlate_jcb;
    private javax.swing.JComboBox<CustomerModal> customer_jcb;
    private javax.swing.JTextField cutterNote_jtf;
    private javax.swing.JButton cyanDefault_jb;
    private javax.swing.JComboBox<String> deliveryBy_jcb;
    private com.toedter.calendar.JDateChooser deliveryDate_jdc;
    private javax.swing.JTextField deliveryNote_jtf;
    private javax.swing.JTextField deliveryTime_jtf;
    private javax.swing.JRadioButton demi_jchkbx;
    private javax.swing.JTextField designCharge_jtf;
    private javax.swing.JComboBox<String> design_jcb;
    private javax.swing.JRadioButton doubleDemi_jchkbx;
    private javax.swing.JTextField finalShtsCnt_jtf;
    private javax.swing.JComboBox<String> gsm_jcb;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JComboBox<WorkOrder> jobName_jcb;
    private javax.swing.JTextField length_jtf;
    private javax.swing.JButton magentaDefault_jb;
    private javax.swing.JComboBox<ManufacturerModal> mfrname_jcb;
    private javax.swing.JButton newData_jb;
    private com.toedter.calendar.JDateChooser orderDate_jdc;
    private javax.swing.JLabel photo_jlbl;
    private javax.swing.JComboBox<String> plateCharge_jcb;
    private javax.swing.JComboBox<String> plate_jcb;
    private javax.swing.JTextField printSheetsCnt_jtf;
    private javax.swing.JButton print_jb;
    private javax.swing.JButton print_jb1;
    private javax.swing.JTextField printerNote_jtf;
    private javax.swing.JTextField rate_jtf;
    private javax.swing.JButton removeImage_jb;
    private javax.swing.JTextField sheets_jtf;
    private javax.swing.JButton showWorkOrderDetails_jb;
    private javax.swing.JComboBox<String> supplier_jcb;
    private javax.swing.JButton updateWorkOrder_jb;
    private javax.swing.JTextField width_jtf;
    private javax.swing.JComboBox<String> workOrders_jcb;
    private javax.swing.JButton yellowDefault_jb;
    // End of variables declaration//GEN-END:variables
}
